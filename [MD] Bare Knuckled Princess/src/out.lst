0001   0000             ; eXtended Genesis Music (XGM) Z80 driver - Stéphane Dallongeville @2014
0002   0000             ;
0003   0000             ; XGM is a music format dedicated to the Sega Megadrive/Genesis system.
0004   0000             ; It has been designed to minimize CPU decoding resource and keep reasonable data size (should be smaller than VGM file).
0005   0000             ; It supports both FM and PSG chip and allow up to 4 PCM channels (8 bits signed at 14 Khz) to be played at once.
0006   0000             ; These 4 PCM channels are obtained by software mixing in the FM DAC in replacement of the 6th FM channel (so at best you can have 5FM + 4PCM + 4PSG = 13 channels)
0007   0000             ;
0008   0000             ; The driver supports playing SFX in PCM format with 16 priority levels and also allow PSG channel reservation so you can use them from the 68000 to play SFX or whatever you want.
0009   0000             ; PCM samples can be >32KB, the only restriction is that they should have their address and size aligned to 256 bytes.
0010   0000             ;
0011   0000             ; we have to do 254 cycles per sample output which consist of :
0012   0000             ; - bufferize 4 PCM samples from the rom and mix them in write buffer
0013   0000             ; - read 1 sample from read buffer and output it to the DAC
0014   0000             ; - handle loop
0015   0000             ; - bufferize XGM data / parse and apply XGM command / handle extern command
0016   0000             ;
0017   0000             ; register usage :
0018   0000             ; HL  = sample source (in ROM)
0019   0000             ; DE  = write buffer / XGM buffer
0020   0000             ; BC  = counter
0021   0000             ; B = $80 (used for overflow and sample unsign)
0022   0000             ; IYL = vint pending counter - 1
0023   0000             ;   --> $FF means no vint pending
0024   0000             ;   --> $00 means 1 vint pending and so one XGM frame to process (in time)
0025   0000             ;   --> $01 means 2 vints pending and so 2 XGM frames to process (late)
0026   0000             ; IYH = temp value
0027   0000             ; HL' = YMPORT1
0028   0000             ; BC' = read buffer
0029   0000             
0030   0000             ; ###########################      define      ##############################
0031   0000             
0032   0000                         INCLUDE "z80_def.i80"   ; basic definitions
0001+  0000             ; ############################ define ##############################
0002+  0000             
0003+  0000             YMPORT0     EQU     $4000           ; YM2612 port 0
0004+  0000             YMPORT1     EQU     $4001           ; YM2612 port 1
0005+  0000             YMPORT2     EQU     $4002           ; YM2612 port 2
0006+  0000             YMPORT3     EQU     $4003           ; YM2612 port 3
0007+  0000             VDPSTATUS_H EQU     $7F04           ; VDP status port high
0008+  0000             VDPSTATUS_L EQU     $7F05           ; VDP status port low
0009+  0000             VCOUNTER    EQU     $7F08           ; V counter
0010+  0000             HCOUNTER    EQU     $7F09           ; H counter
0011+  0000             PSGPORT     EQU     $7F11           ; PSG port
0012+  0000             BANKREG     EQU     $6000           ; bank register
0013+  0000             
0014+  0000             COMPLAY_SFT EQU     0               ; start play command
0015+  0000             COMSTOP_SFT EQU     4               ; stop play command
0016+  0000             
0017+  0000             STATPLAY_SFT  EQU   0               ; playing status
0018+  0000             STATREADY_SFT EQU   7               ; driver ready status
0019+  0000             
0020+  0000             CH0_SFT     EQU     0               ; channel 0
0021+  0000             CH1_SFT     EQU     1               ; channel 1
0022+  0000             CH2_SFT     EQU     2               ; channel 2
0023+  0000             CH3_SFT     EQU     3               ; channel 3
0024+  0000             
0025+  0000             COMPLAY     EQU     1<<COMPLAY_SFT
0026+  0000             COMSTOP     EQU     1<<COMSTOP_SFT
0027+  0000             
0028+  0000             STATPLAY    EQU     1<<STATPLAY_SFT
0029+  0000             STATREADY   EQU     1<<STATREADY_SFT
0030+  0000             
0031+  0000             CH0         EQU     1<<CH0_SFT
0032+  0000             CH1         EQU     1<<CH1_SFT
0033+  0000             CH2         EQU     1<<CH2_SFT
0034+  0000             CH3         EQU     1<<CH3_SFT
0035+  0000             
0036+  0000             
0037+  0000             ; ########################### variable #############################
0038+  0000             
0039+  0000             COMMAND     EQU     $0100           ; command from 68K
0040+  0000             STATUS      EQU     $0102           ; status from Z80
0041+  0000             PARAMS      EQU     $0104           ; parameters (68K and Z80)
0033   0000             
0034   0000             
0035   0000             ; ###########################       var        ##############################
0036   0000             
0037   0000             XGM_PLAY_SFT    EQU     6           ; XGM music play command bit
0038   0000             XGM_RESUME_SFT  EQU     5           ; XGM music resume command bit
0039   0000             XGM_STOP_SFT    EQU     4           ; XGM music stop command bit
0040   0000             
0041   0000                                                 ; COMMAND b0 = play PCM0   STATUS b0 = PCM0 playing
0042   0000                                                 ; COMMAND b1 = play PCM1   STATUS b1 = PCM1 playing
0043   0000                                                 ; COMMAND b2 = play PCM2   STATUS b2 = PCM2 playing
0044   0000                                                 ; COMMAND b3 = play PCM3   STATUS b3 = PCM3 playing
0045   0000                                                 ; COMMAND b4 = stop XGM
0046   0000                                                 ; COMMAND b5 = resume XGM
0047   0000                                                 ; COMMAND b6 = play XGM    STATUS b6 = XGM playing
0048   0000             
0049   0000             XGM_ARG_A   EQU     PARAMS+$00      ; XGM address (bit 0 --> bit 23)
0050   0000             
0051   0000             PCM0_ARG_P  EQU     PARAMS+$04      ; priority (0 to 15)
0052   0000             PCM0_ARG_ID EQU     PARAMS+$05      ; PCM id (0 to 255)
0053   0000             PCM1_ARG_P  EQU     PARAMS+$06      ; priority (0 to 15)
0054   0000             PCM1_ARG_ID EQU     PARAMS+$07      ; PCM id (0 to 255)
0055   0000             PCM2_ARG_P  EQU     PARAMS+$08      ; priority (0 to 15)
0056   0000             PCM2_ARG_ID EQU     PARAMS+$09      ; PCM id (0 to 255)
0057   0000             PCM3_ARG_P  EQU     PARAMS+$0A      ; priority (0 to 15)
0058   0000             PCM3_ARG_ID EQU     PARAMS+$0B      ; PCM id (0 to 255)
0059   0000             
0060   0000             PCM_ARG_P   EQU     PCM0_ARG_P
0061   0000             PCM_ARG_ID  EQU     PCM0_ARG_ID
0062   0000             
0063   0000             PSG_ARG     EQU     PARAMS+$0C      ; xxxx CCCC  where 'CCCC' is PSG channel '3210'
0064   0000                                                 ; PSG channel reservation for 68k
0065   0000             PROTECT_ARG EQU     PARAMS+$0D      ; set to 1 from 68k during DMA (in vblank period)
0066   0000                                                 ; to prevent Z80 accessing 68k BUS
0067   0000             
0068   0000             MODIFYING_F EQU     PARAMS+$0E      ; Z80 is modifying the 'PENDING_FRM' variable
0069   0000             PENDING_FRM EQU     PARAMS+$0F      ; contains number of XGM frame to process
0070   0000             
0071   0000             PCM0_PRIO   EQU     PARAMS+$10      ; PCM0 internal priority
0072   0000             PCM0_ADDR   EQU     PARAMS+$12      ; PCM0 internal addr (bit8 --> bit23)
0073   0000             PCM0_LEN    EQU     PARAMS+$14      ; PCM0 internal len (bit8 --> bit23)
0074   0000             PCM1_PRIO   EQU     PARAMS+$18      ; PCM1 internal priority
0075   0000             PCM1_ADDR   EQU     PARAMS+$1A      ; PCM1 internal addr (bit8 --> bit23)
0076   0000             PCM1_LEN    EQU     PARAMS+$1C      ; PCM1 internal len (bit8 --> bit23)
0077   0000             PCM2_PRIO   EQU     PARAMS+$20      ; PCM2 internal priority
0078   0000             PCM2_ADDR   EQU     PARAMS+$22      ; PCM2 internal addr (bit8 --> bit23)
0079   0000             PCM2_LEN    EQU     PARAMS+$24      ; PCM2 internal len (bit8 --> bit23)
0080   0000             PCM3_PRIO   EQU     PARAMS+$28      ; PCM3 internal priority
0081   0000             PCM3_ADDR   EQU     PARAMS+$2A      ; PCM3 internal addr (bit8 --> bit23)
0082   0000             PCM3_LEN    EQU     PARAMS+$2C      ; PCM3 internal len (bit8 --> bit23)
0083   0000             
0084   0000             PCM_PRIO    EQU     PCM0_PRIO
0085   0000             PCM_ADDR    EQU     PCM0_ADDR
0086   0000             PCM_LEN     EQU     PCM0_LEN
0087   0000             
0088   0000             XGM_ADDR    EQU     PARAMS+$30      ; XGM internal addr (bit0 --> bit23)
0089   0000             
0090   0000             WRITEBUF    EQU     PARAMS+$34      ; PCM write buffer pointer (bit8 --> bit9)
0091   0000             READBUF     EQU     PARAMS+$36      ; PCM read buffer pointer (bit8 --> bit9)
0092   0000             
0093   0000             YM_RR_SAV   EQU     PARAMS+$40      ; YM RR save (4 slots * 6 channels)
0094   0000             PSG_ENV_SAV EQU     PARAMS+$58      ; PSG env save (4 channels)
0095   0000             YM_RR_OFF   EQU     PARAMS+$60      ; YM RR off (4 slots * 6 channels)
0096   0000             PSG_ENV_OFF EQU     PARAMS+$78      ; PSG env off (4 channels)
0097   0000             
0098   0000             YM_2B_SAV   EQU     PARAMS+$5C      ; YM register $2B last write save
0099   0000             YM_2B_CNT   EQU     PARAMS+$5D      ; YM register $2B ON expiration
0100   0000             
0101   0000             IDLE_LOOP   EQU     PARAMS+$7C      ; idle loop counter (XGM frame wait)
0102   0000             WAIT_LOOP   EQU     PARAMS+$7E      ; wait loop counter (DMA contention wait)
0103   0000             
0104   0000             DEBUG_1     EQU     PARAMS+$80      ; debug
0105   0000             DEBUG_2     EQU     PARAMS+$81      ; debug
0106   0000             DEBUG_3     EQU     PARAMS+$82      ; debug
0107   0000             DEBUG_4     EQU     PARAMS+$83      ; debug
0108   0000             DEBUG_5     EQU     PARAMS+$84      ; debug
0109   0000             DEBUG_6     EQU     PARAMS+$85      ; debug
0110   0000             DEBUG_7     EQU     PARAMS+$86      ; debug
0111   0000             DEBUG_8     EQU     PARAMS+$87      ; debug
0112   0000             DEBUG_9     EQU     PARAMS+$88      ; debug
0113   0000             DEBUG_A     EQU     PARAMS+$89      ; debug
0114   0000             
0115   0000             JUMP_TABLE  EQU     $1600           ; XGM command jump table (size = $100)
0116   0000             XGM_BUFFER  EQU     $1700           ; XGM music data buffer (size = $100)
0117   0000             
0118   0000             PCM_BUFFER0 EQU     $1800           ; PCM buffer 0
0119   0000             PCM_BUFFER1 EQU     $1900           ; PCM buffer 1
0120   0000             PCM_BUFFER2 EQU     $1A00           ; PCM buffer 2
0121   0000             PCM_BUFFER3 EQU     $1B00           ; PCM buffer 3
0122   0000             
0123   0000             PCM_BUFFER  EQU     PCM_BUFFER0     ; PCM buffer
0124   0000             
0125   0000             
0126   0000             ID_TABLE    EQU     $1C00           ; sample id table (size = $400)
0127   0000             
0128   0000             STACK       EQU     JUMP_TABLE      ; stack pointer above buffer region ($1600 --> $15XX)
0129   0000             
0130   0000             
0131   0000             ; ###########################      macro       ##############################
0132   0000             
0133   0000                         INCLUDE "z80_mac.i80"  ; basic macros
0001+  0000             ; ############################     macro     ##############################
0002+  0000             
0003+  0000             
0004+  0000             ; setBank
0005+  0000             ; -------
0006+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0007+  0000             ; HL  <-  BANKREG
0008+  0000             ;
0009+  0000             ; set the bank register for ROM area
0010+  0000             ; = 101 cycles
0011+  0000             
0012+  0000                         macro   setBank
0013+  0000~            
0014+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
0015+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
0016+  0000~                        RRA                     ;                           ' 4
0017+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
0018+  0000~                        RRA                     ;                           ' 4
0019+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
0020+  0000~                        RRA                     ;                           ' 4
0021+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
0022+  0000~                        RRA                     ;                           ' 4
0023+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
0024+  0000~                        RRA                     ;                           ' 4
0025+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
0026+  0000~                        RRA                     ;                           ' 4
0027+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
0028+  0000~                        RRA                     ;                           ' 4
0029+  0000~                        LD  (HL), A             ; #8 (bit 22)               ' 7
0030+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
0031+  0000~            
0032+  0000                         endm                    ;                           ' 101
0033+  0000             
0034+  0000             
0035+  0000             ; setBankFast
0036+  0000             ; -----------
0037+  0000             ; A    -> bit 21-15 of rom address to set in the bank register
0038+  0000             ; HL  <-  BANKREG
0039+  0000             ;
0040+  0000             ; set the bank register for ROM area
0041+  0000             ; = 97 cycles
0042+  0000             
0043+  0000                         macro   setBankFast
0044+  0000~            
0045+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
0046+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
0047+  0000~                        RRA                     ;                           ' 4
0048+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
0049+  0000~                        RRA                     ;                           ' 4
0050+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
0051+  0000~                        RRA                     ;                           ' 4
0052+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
0053+  0000~                        RRA                     ;                           ' 4
0054+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
0055+  0000~                        RRA                     ;                           ' 4
0056+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
0057+  0000~                        RRA                     ;                           ' 4
0058+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
0059+  0000~                        LD  (HL), L             ; #8 (bit 22 = 0)           ' 7
0060+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
0061+  0000~            
0062+  0000                         endm                    ;                           ' 97
0063+  0000             
0064+  0000             
0065+  0000             ; setBank_BC
0066+  0000             ; ----------
0067+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0068+  0000             ; BC  <-  BANKREG
0069+  0000             ; A   <-  0
0070+  0000             ;
0071+  0000             ; set the bank register for ROM area
0072+  0000             ; = 105 cycles
0073+  0000             
0074+  0000                         macro   setBank_BC
0075+  0000~            
0076+  0000~                        LD  BC, BANKREG         ; BC = BANKREG              ' 10
0077+  0000~                        LD  (BC), A             ; #1 (bit 15)               ' 7
0078+  0000~                        RRA                     ;                           ' 4
0079+  0000~                        LD  (BC), A             ; #2 (bit 16)               ' 7
0080+  0000~                        RRA                     ;                           ' 4
0081+  0000~                        LD  (BC), A             ; #3 (bit 17)               ' 7
0082+  0000~                        RRA                     ;                           ' 4
0083+  0000~                        LD  (BC), A             ; #4 (bit 18)               ' 7
0084+  0000~                        RRA                     ;                           ' 4
0085+  0000~                        LD  (BC), A             ; #5 (bit 19)               ' 7
0086+  0000~                        RRA                     ;                           ' 4
0087+  0000~                        LD  (BC), A             ; #6 (bit 20)               ' 7
0088+  0000~                        RRA                     ;                           ' 4
0089+  0000~                        LD  (BC), A             ; #7 (bit 21)               ' 7
0090+  0000~                        RRA                     ;                           ' 4
0091+  0000~                        LD  (BC), A             ; #8 (bit 22)               ' 7
0092+  0000~                        RRA                     ;                           ' 4
0093+  0000~                        LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0094+  0000~            
0095+  0000                         endm                    ;                           ' 105
0096+  0000             
0097+  0000             
0098+  0000             ; setBank_DE
0099+  0000             ; ----------
0100+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0101+  0000             ; DE  <-  BANKREG
0102+  0000             ; A   <-  0
0103+  0000             ;
0104+  0000             ; set the bank register for ROM area
0105+  0000             ; = 105 cycles
0106+  0000             
0107+  0000                         macro   setBank_DE
0108+  0000~            
0109+  0000~                        LD  DE, BANKREG         ; DE = BANKREG              ' 10
0110+  0000~                        LD  (DE), A             ; #1 (bit 15)               ' 7
0111+  0000~                        RRA                     ;                           ' 4
0112+  0000~                        LD  (DE), A             ; #2 (bit 16)               ' 7
0113+  0000~                        RRA                     ;                           ' 4
0114+  0000~                        LD  (DE), A             ; #3 (bit 17)               ' 7
0115+  0000~                        RRA                     ;                           ' 4
0116+  0000~                        LD  (DE), A             ; #4 (bit 18)               ' 7
0117+  0000~                        RRA                     ;                           ' 4
0118+  0000~                        LD  (DE), A             ; #5 (bit 19)               ' 7
0119+  0000~                        RRA                     ;                           ' 4
0120+  0000~                        LD  (DE), A             ; #6 (bit 20)               ' 7
0121+  0000~                        RRA                     ;                           ' 4
0122+  0000~                        LD  (DE), A             ; #7 (bit 21)               ' 7
0123+  0000~                        RRA                     ;                           ' 4
0124+  0000~                        LD  (DE), A             ; #8 (bit 22)               ' 7
0125+  0000~                        RRA                     ;                           ' 4
0126+  0000~                        LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0127+  0000~            
0128+  0000                         endm                    ;                           ' 105
0129+  0000             
0130+  0000             
0131+  0000             ; writeYMFast
0132+  0000             ; -----------
0133+  0000             ; HL  <-> YM port where to write
0134+  0000             ; D    -> address
0135+  0000             ; E    -> value
0136+  0000             ;
0137+  0000             ; write to YM2612 (no busy check)
0138+  0000             ; = 26 cycles
0139+  0000             
0140+  0000                         macro   writeYMFast
0141+  0000~            
0142+  0000~                        LD      (HL), D         ; write address             ' 7     |
0143+  0000~                        NOP                     ;                           ' 4     | 15
0144+  0000~                        NOP                     ; wait a bit for YM         ' 4     |
0145+  0000~            
0146+  0000~                        INC     L               ; next port                 ' 4     |
0147+  0000~                        LD      (HL), E         ; write value               ' 7     | 11
0148+  0000~            
0149+  0000                         endm
0150+  0000             
0151+  0000             
0152+  0000             
0153+  0000             ; getPlayCommand
0154+  0000             ; --------------
0155+  0000             ; HL  <-  point to COMMAND
0156+  0000             ; zf  <-  channel 'ch' play command
0157+  0000             ;
0158+  0000             ; Z flag reset if play command for channel 'ch'
0159+  0000             ; = 22 cycles
0160+  0000             
0161+  0000                         macro   getPlayCommand ch
0162+  0000~            
0163+  0000~                        LD      HL, COMMAND             ;                   ' 10
0164+  0000~                        BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
0165+  0000~            
0166+  0000                         endm                            ;                   ' 22
0167+  0000             
0168+  0000             
0169+  0000             ; getStopCommand
0170+  0000             ; --------------
0171+  0000             ; HL  <-  point to COMMAND
0172+  0000             ; zf  <-  channel 'ch' stop command
0173+  0000             ;
0174+  0000             ; Z flag reset if stop command for channel 'ch'
0175+  0000             ; = 22 cycles
0176+  0000             
0177+  0000                         macro   getStopCommand ch
0178+  0000~            
0179+  0000~                        LD      HL, COMMAND             ;                   ' 10
0180+  0000~                        BIT     COMSTOP_SFT+ch, (HL)    ; stop command ?    ' 12
0181+  0000~            
0182+  0000                         endm                            ;                   ' 22
0183+  0000             
0184+  0000             
0185+  0000             ; setPlayCommand
0186+  0000             ; ----------------
0187+  0000             ; HL  <-  point to COMMAND
0188+  0000             ;
0189+  0000             ; set the play command for channel 'ch'
0190+  0000             ; = 25 cycles
0191+  0000             
0192+  0000                         macro   setPlayCommand ch
0193+  0000~            
0194+  0000~                        LD      HL, COMMAND             ;                   ' 10
0195+  0000~                        SET     COMPLAY_SFT+ch, (HL)    ; set command       ' 15
0196+  0000~            
0197+  0000                         endm                            ;                   ' 25
0198+  0000             
0199+  0000             
0200+  0000             ; setStopCommand
0201+  0000             ; ----------------
0202+  0000             ; HL  <-  point to COMMAND
0203+  0000             ;
0204+  0000             ; set the stop command for channel 'ch'
0205+  0000             ; = 25 cycles
0206+  0000             
0207+  0000                         macro   setStopCommand ch
0208+  0000~            
0209+  0000~                        LD      HL, COMMAND             ;                   ' 10
0210+  0000~                        SET     COMSTOP_SFT+ch, (HL)    ; set command       ' 15
0211+  0000~            
0212+  0000                         endm                            ;                   ' 25
0213+  0000             
0214+  0000             
0215+  0000             ; clearPlayCommand
0216+  0000             ; ----------------
0217+  0000             ; HL  <-  point to COMMAND
0218+  0000             ;
0219+  0000             ; clear the play command for channel 'ch'
0220+  0000             ; = 25 cycles
0221+  0000             
0222+  0000                         macro   clearPlayCommand ch
0223+  0000~            
0224+  0000~                        LD      HL, COMMAND             ;                   ' 10
0225+  0000~                        RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
0226+  0000~            
0227+  0000                         endm                            ;                   ' 25
0228+  0000             
0229+  0000             
0230+  0000             ; clearStopCommand
0231+  0000             ; ----------------
0232+  0000             ; HL  <-  point to COMMAND
0233+  0000             ;
0234+  0000             ; clear the stop command for channel 'ch'
0235+  0000             ; = 25 cycles
0236+  0000             
0237+  0000                         macro   clearStopCommand ch
0238+  0000~            
0239+  0000~                        LD      HL, COMMAND             ;                   ' 10
0240+  0000~                        RES     COMSTOP_SFT+ch, (HL)    ; clear command     ' 15
0241+  0000~            
0242+  0000                         endm                            ;                   ' 25
0243+  0000             
0244+  0000             
0245+  0000             ; getPlayStatus
0246+  0000             ; -------------
0247+  0000             ; HL  <- point to STATUS
0248+  0000             ; zf  <-  channel 'ch' is playing
0249+  0000             ;
0250+  0000             ; Z flag reset if play status for channel 'ch'
0251+  0000             ; = 22 cycles
0252+  0000             
0253+  0000                         macro   getPlayStatus ch
0254+  0000~            
0255+  0000~                        LD      HL, STATUS              ;                   ' 10
0256+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
0257+  0000~            
0258+  0000                         endm                            ;                   ' 22
0259+  0000             
0260+  0000             
0261+  0000             ; setPlayStatus
0262+  0000             ; -------------
0263+  0000             ; HL  <- point to STATUS
0264+  0000             ;
0265+  0000             ; set the play status for channel 'ch'
0266+  0000             ; = 25 cycles
0267+  0000             
0268+  0000                         macro   setPlayStatus ch
0269+  0000~            
0270+  0000~                        LD      HL, STATUS              ;                   ' 10
0271+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
0272+  0000~            
0273+  0000                         endm                            ;                   ' 25
0274+  0000             
0275+  0000             
0276+  0000             ; clearPlayStatus
0277+  0000             ; ---------------
0278+  0000             ; HL  <- point to STATUS
0279+  0000             ;
0280+  0000             ; clear play status for channel 'ch'
0281+  0000             ; = 25 cycles
0282+  0000             
0283+  0000                         macro   clearPlayStatus ch
0284+  0000~            
0285+  0000~                        LD      HL, STATUS              ;                   ' 10
0286+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
0287+  0000~            
0288+  0000                         endm                            ;                   ' 25
0289+  0000             
0290+  0000             
0291+  0000             ; getLoopStatus
0292+  0000             ; -------------
0293+  0000             ; HL  <- point to STATUS+1
0294+  0000             ; zf  <-  channel 'ch' is playing
0295+  0000             ;
0296+  0000             ; Z flag reset if loop status for channel 'ch'
0297+  0000             ; = 22 cycles
0298+  0000             
0299+  0000                         macro   getLoopStatus ch
0300+  0000~            
0301+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0302+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
0303+  0000~            
0304+  0000                         endm                            ;                   ' 22
0305+  0000             
0306+  0000             
0307+  0000             ; setLoopStatus
0308+  0000             ; -------------
0309+  0000             ; HL  <- point to STATUS+1
0310+  0000             ;
0311+  0000             ; set the loop status for channel 'ch'
0312+  0000             ; = 25 cycles
0313+  0000             
0314+  0000                         macro   setLoopStatus ch
0315+  0000~            
0316+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0317+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
0318+  0000~            
0319+  0000                         endm                            ;                   ' 25
0320+  0000             
0321+  0000             
0322+  0000             ; clearLoopStatus
0323+  0000             ; ---------------
0324+  0000             ; HL  <- point to STATUS+1
0325+  0000             ;
0326+  0000             ; clear loop status for channel 'ch'
0327+  0000             ; = 25 cycles
0328+  0000             
0329+  0000                         macro   clearLoopStatus ch
0330+  0000~            
0331+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0332+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
0333+  0000~            
0334+  0000                         endm                            ;                   ' 25
0335+  0000             
0336+  0000             
0337+  0000             ; clearAllStatus
0338+  0000             ; --------------
0339+  0000             ; HL  <- 0
0340+  0000             ;
0341+  0000             ; clear play and loop status for all channel
0342+  0000             ; = 26 cycles
0343+  0000             
0344+  0000                         macro   clearAllStatus
0345+  0000~            
0346+  0000~                        LD      HL, $00                 ;                   ' 10
0347+  0000~                        LD      (STATUS), HL            ; clear status      ' 16
0348+  0000~            
0349+  0000                         endm                            ;                   ' 26
0350+  0000             
0351+  0000             
0352+  0000             ; ############################  macro wait macro  ##############################
0353+  0000             
0354+  0000             
0355+  0000             ; wait2p16x
0356+  0000             ; ---------
0357+  0000             ; wait for ((w * 16) + 2) cycles
0358+  0000             ;
0359+  0000                         macro   wait2p16x w
0360+  0000~            
0361+  0000~                        LD      A, w            ; 7-2
0362+  0000~            .loop
0363+  0000~                        DEC     A               ; 4
0364+  0000~                        JR      NZ, .loop       ; 12
0365+  0000~            
0366+  0000                         endm
0367+  0000             
0368+  0000             
0369+  0000                         macro   wait4
0370+  0000~                        NOP
0371+  0000                         endm
0372+  0000             
0373+  0000                         macro   wait6
0374+  0000~                        INC     DE
0375+  0000                         endm
0376+  0000             
0377+  0000                         macro   wait7
0378+  0000~                        LD      A, $0
0379+  0000                         endm
0380+  0000             
0381+  0000                         macro   wait8
0382+  0000~                        wait4
0383+  0000~                        wait4
0384+  0000                         endm
0385+  0000             
0386+  0000                         macro   wait9
0387+  0000~                        LD      R, A
0388+  0000                         endm
0389+  0000             
0390+  0000                         macro   wait10
0391+  0000~                        JP      .loop
0392+  0000~            .loop
0393+  0000                         endm
0394+  0000             
0395+  0000                         macro   wait11
0396+  0000~                        wait7
0397+  0000~                        wait4
0398+  0000                         endm
0399+  0000             
0400+  0000                         macro   wait12
0401+  0000~                        JR      .loop
0402+  0000~            .loop
0403+  0000                         endm
0404+  0000             
0405+  0000                         macro   wait13
0406+  0000~                        wait9
0407+  0000~                        wait4
0408+  0000                         endm
0409+  0000             
0410+  0000                         macro   wait14
0411+  0000~                        wait7
0412+  0000~                        wait7
0413+  0000                         endm
0414+  0000             
0415+  0000                         macro   wait15
0416+  0000~                        wait8
0417+  0000~                        wait7
0418+  0000                         endm
0419+  0000             
0420+  0000                         macro   wait16
0421+  0000~                        wait12
0422+  0000~                        wait4
0423+  0000                         endm
0424+  0000             
0425+  0000                         macro   wait17
0426+  0000~                        wait10
0427+  0000~                        wait7
0428+  0000                         endm
0429+  0000             
0430+  0000                         macro   wait18
0431+  0000~                        wait9
0432+  0000~                        wait9
0433+  0000                         endm
0434+  0000             
0435+  0000                         macro   wait19
0436+  0000~                        wait12
0437+  0000~                        wait7
0438+  0000                         endm
0439+  0000             
0440+  0000                         macro   wait20
0441+  0000~                        wait11
0442+  0000~                        wait9
0443+  0000                         endm
0444+  0000             
0445+  0000                         macro   wait21
0446+  0000~                        wait12
0447+  0000~                        wait9
0448+  0000                         endm
0449+  0000             
0450+  0000                         macro   wait22
0451+  0000~                        wait18
0452+  0000~                        wait4
0453+  0000                         endm
0454+  0000             
0455+  0000                         macro   wait23
0456+  0000~                        wait14
0457+  0000~                        wait9
0458+  0000                         endm
0459+  0000             
0460+  0000                         macro   wait24
0461+  0000~                        wait12
0462+  0000~                        wait12
0463+  0000                         endm
0464+  0000             
0465+  0000                         macro   wait25
0466+  0000~                        wait18
0467+  0000~                        wait7
0468+  0000                         endm
0469+  0000             
0470+  0000                         macro   wait26
0471+  0000~                        wait18
0472+  0000~                        wait8
0473+  0000                         endm
0474+  0000             
0475+  0000                         macro   wait27
0476+  0000~                        wait18
0477+  0000~                        wait9
0478+  0000                         endm
0479+  0000             
0480+  0000                         macro   wait28
0481+  0000~                        wait21
0482+  0000~                        wait7
0483+  0000                         endm
0484+  0000             
0485+  0000                         macro   wait29
0486+  0000~                        wait21
0487+  0000~                        wait8
0488+  0000                         endm
0489+  0000             
0490+  0000                         macro   wait30
0491+  0000~                        wait21
0492+  0000~                        wait9
0493+  0000                         endm
0494+  0000             
0495+  0000                         macro   wait31
0496+  0000~                        wait21
0497+  0000~                        wait10
0498+  0000                         endm
0499+  0000             
0500+  0000                         macro   wait32
0501+  0000~                        wait20
0502+  0000~                        wait12
0503+  0000                         endm
0504+  0000             
0505+  0000                         macro   wait33
0506+  0000~                        wait21
0507+  0000~                        wait12
0508+  0000                         endm
0509+  0000             
0510+  0000                         macro   wait34
0511+  0000~                        wait2p16x 2
0512+  0000                         endm
0513+  0000             
0514+  0000                         macro   wait35
0515+  0000~                        wait28
0516+  0000~                        wait7
0517+  0000                         endm
0518+  0000             
0519+  0000                         macro   wait36
0520+  0000~                        wait27
0521+  0000~                        wait9
0522+  0000                         endm
0523+  0000             
0524+  0000                         macro   wait37
0525+  0000~                        wait28
0526+  0000~                        wait9
0527+  0000                         endm
0528+  0000             
0529+  0000                         macro   wait38
0530+  0000~                        wait27
0531+  0000~                        wait11
0532+  0000                         endm
0533+  0000             
0534+  0000                         macro   wait39
0535+  0000~                        wait27
0536+  0000~                        wait12
0537+  0000                         endm
0538+  0000             
0539+  0000                         macro   wait40
0540+  0000~                        wait27
0541+  0000~                        wait13
0542+  0000                         endm
0543+  0000             
0544+  0000                         macro   wait41
0545+  0000~                        wait34
0546+  0000~                        wait7
0547+  0000                         endm
0548+  0000             
0549+  0000                         macro   wait42
0550+  0000~                        wait34
0551+  0000~                        wait8
0552+  0000                         endm
0553+  0000             
0554+  0000                         macro   wait43
0555+  0000~                        wait36
0556+  0000~                        wait7
0557+  0000                         endm
0558+  0000             
0559+  0000                         macro   wait44
0560+  0000~                        wait34
0561+  0000~                        wait10
0562+  0000                         endm
0563+  0000             
0564+  0000                         macro   wait45
0565+  0000~                        wait36
0566+  0000~                        wait9
0567+  0000                         endm
0568+  0000             
0569+  0000                         macro   wait46
0570+  0000~                        wait34
0571+  0000~                        wait12
0572+  0000                         endm
0573+  0000             
0574+  0000                         macro   wait47
0575+  0000~                        wait34
0576+  0000~                        wait13
0577+  0000                         endm
0578+  0000             
0579+  0000                         macro   wait48
0580+  0000~                        wait36
0581+  0000~                        wait12
0582+  0000                         endm
0583+  0000             
0584+  0000                         macro   wait49
0585+  0000~                        wait36
0586+  0000~                        wait13
0587+  0000                         endm
0588+  0000             
0589+  0000                         macro   wait50
0590+  0000~                        wait2p16x 3
0591+  0000                         endm
0592+  0000             
0593+  0000                         macro   wait51
0594+  0000~                        wait34
0595+  0000~                        wait17
0596+  0000                         endm
0597+  0000             
0598+  0000                         macro   wait52
0599+  0000~                        wait34
0600+  0000~                        wait18
0601+  0000                         endm
0602+  0000             
0603+  0000                         macro   wait53
0604+  0000~                        wait36
0605+  0000~                        wait17
0606+  0000                         endm
0607+  0000             
0608+  0000                         macro   wait54
0609+  0000~                        wait50
0610+  0000~                        wait4
0611+  0000                         endm
0612+  0000             
0613+  0000                         macro   wait55
0614+  0000~                        wait34
0615+  0000~                        wait21
0616+  0000                         endm
0617+  0000             
0618+  0000                         macro   wait56
0619+  0000~                        wait34
0620+  0000~                        wait22
0621+  0000                         endm
0622+  0000             
0623+  0000                         macro   wait57
0624+  0000~                        wait50
0625+  0000~                        wait7
0626+  0000                         endm
0627+  0000             
0628+  0000                         macro   wait58
0629+  0000~                        wait50
0630+  0000~                        wait8
0631+  0000                         endm
0632+  0000             
0633+  0000                         macro   wait59
0634+  0000~                        wait50
0635+  0000~                        wait9
0636+  0000                         endm
0637+  0000             
0638+  0000                         macro   wait60
0639+  0000~                        wait50
0640+  0000~                        wait10
0641+  0000                         endm
0642+  0000             
0643+  0000                         macro   wait61
0644+  0000~                        wait50
0645+  0000~                        wait11
0646+  0000                         endm
0647+  0000             
0648+  0000                         macro   wait62
0649+  0000~                        wait50
0650+  0000~                        wait12
0651+  0000                         endm
0652+  0000             
0653+  0000                         macro   wait63
0654+  0000~                        wait50
0655+  0000~                        wait13
0656+  0000                         endm
0657+  0000             
0658+  0000                         macro   wait64
0659+  0000~                        wait50
0660+  0000~                        wait14
0661+  0000                         endm
0662+  0000             
0663+  0000                         macro   wait65
0664+  0000~                        wait50
0665+  0000~                        wait15
0666+  0000                         endm
0667+  0000             
0668+  0000                         macro   wait66
0669+  0000~                        wait2p16x 4
0670+  0000                         endm
0671+  0000             
0672+  0000                         macro   wait67
0673+  0000~                        wait50
0674+  0000~                        wait17
0675+  0000                         endm
0676+  0000             
0677+  0000                         macro   wait68
0678+  0000~                        wait50
0679+  0000~                        wait18
0680+  0000                         endm
0681+  0000             
0682+  0000                         macro   wait70
0683+  0000~                        wait66
0684+  0000~                        wait4
0685+  0000                         endm
0686+  0000             
0687+  0000                         macro   wait72
0688+  0000~                        wait50
0689+  0000~                        wait22
0690+  0000                         endm
0691+  0000             
0692+  0000                         macro   wait73
0693+  0000~                        wait66
0694+  0000~                        wait7
0695+  0000                         endm
0696+  0000             
0697+  0000                         macro   wait74
0698+  0000~                        wait66
0699+  0000~                        wait8
0700+  0000                         endm
0701+  0000             
0702+  0000                         macro   wait75
0703+  0000~                        wait66
0704+  0000~                        wait9
0705+  0000                         endm
0706+  0000             
0707+  0000                         macro   wait76
0708+  0000~                        wait66
0709+  0000~                        wait10
0710+  0000                         endm
0711+  0000             
0712+  0000                         macro   wait77
0713+  0000~                        wait66
0714+  0000~                        wait11
0715+  0000                         endm
0716+  0000             
0717+  0000                         macro   wait78
0718+  0000~                        wait66
0719+  0000~                        wait12
0720+  0000                         endm
0721+  0000             
0722+  0000                         macro   wait79
0723+  0000~                        wait66
0724+  0000~                        wait13
0725+  0000                         endm
0726+  0000             
0727+  0000                         macro   wait80
0728+  0000~                        wait66
0729+  0000~                        wait14
0730+  0000                         endm
0731+  0000             
0732+  0000                         macro   wait81
0733+  0000~                        wait66
0734+  0000~                        wait15
0735+  0000                         endm
0736+  0000             
0737+  0000                         macro   wait82
0738+  0000~                        wait2p16x 5
0739+  0000                         endm
0740+  0000             
0741+  0000                         macro   wait83
0742+  0000~                        wait66
0743+  0000~                        wait17
0744+  0000                         endm
0745+  0000             
0746+  0000                         macro   wait84
0747+  0000~                        wait66
0748+  0000~                        wait18
0749+  0000                         endm
0750+  0000             
0751+  0000                         macro   wait85
0752+  0000~                        wait66
0753+  0000~                        wait19
0754+  0000                         endm
0755+  0000             
0756+  0000                         macro   wait86
0757+  0000~                        wait82
0758+  0000~                        wait4
0759+  0000                         endm
0760+  0000             
0761+  0000                         macro   wait87
0762+  0000~                        wait66
0763+  0000~                        wait21
0764+  0000                         endm
0765+  0000             
0766+  0000                         macro   wait88
0767+  0000~                        wait66
0768+  0000~                        wait22
0769+  0000                         endm
0770+  0000             
0771+  0000                         macro   wait89
0772+  0000~                        wait82
0773+  0000~                        wait7
0774+  0000                         endm
0775+  0000             
0776+  0000                         macro   wait90
0777+  0000~                        wait82
0778+  0000~                        wait8
0779+  0000                         endm
0780+  0000             
0781+  0000                         macro   wait91
0782+  0000~                        wait82
0783+  0000~                        wait9
0784+  0000                         endm
0785+  0000             
0786+  0000                         macro   wait92
0787+  0000~                        wait82
0788+  0000~                        wait10
0789+  0000                         endm
0790+  0000             
0791+  0000                         macro   wait94
0792+  0000~                        wait82
0793+  0000~                        wait12
0794+  0000                         endm
0795+  0000             
0796+  0000                         macro   wait95
0797+  0000~                        wait82
0798+  0000~                        wait13
0799+  0000                         endm
0800+  0000             
0801+  0000                         macro   wait96
0802+  0000~                        wait82
0803+  0000~                        wait14
0804+  0000                         endm
0805+  0000             
0806+  0000                         macro   wait97
0807+  0000~                        wait82
0808+  0000~                        wait15
0809+  0000                         endm
0810+  0000             
0811+  0000                         macro   wait98
0812+  0000~                        wait2p16x 6
0813+  0000                         endm
0814+  0000             
0815+  0000                         macro   wait99
0816+  0000~                        wait82
0817+  0000~                        wait17
0818+  0000                         endm
0819+  0000             
0820+  0000                         macro   wait100
0821+  0000~                        wait82
0822+  0000~                        wait18
0823+  0000                         endm
0824+  0000             
0825+  0000                         macro   wait102
0826+  0000~                        wait98
0827+  0000~                        wait4
0828+  0000                         endm
0829+  0000             
0830+  0000                         macro   wait103
0831+  0000~                        wait82
0832+  0000~                        wait21
0833+  0000                         endm
0834+  0000             
0835+  0000                         macro   wait104
0836+  0000~                        wait82
0837+  0000~                        wait22
0838+  0000                         endm
0839+  0000             
0840+  0000                         macro   wait105
0841+  0000~                        wait98
0842+  0000~                        wait7
0843+  0000                         endm
0844+  0000             
0845+  0000                         macro   wait106
0846+  0000~                        wait98
0847+  0000~                        wait8
0848+  0000                         endm
0849+  0000             
0850+  0000                         macro   wait107
0851+  0000~                        wait98
0852+  0000~                        wait9
0853+  0000                         endm
0854+  0000             
0855+  0000                         macro   wait108
0856+  0000~                        wait98
0857+  0000~                        wait10
0858+  0000                         endm
0859+  0000             
0860+  0000                         macro   wait109
0861+  0000~                        wait98
0862+  0000~                        wait11
0863+  0000                         endm
0864+  0000             
0865+  0000                         macro   wait110
0866+  0000~                        wait98
0867+  0000~                        wait12
0868+  0000                         endm
0869+  0000             
0870+  0000                         macro   wait111
0871+  0000~                        wait98
0872+  0000~                        wait13
0873+  0000                         endm
0874+  0000             
0875+  0000                         macro   wait112
0876+  0000~                        wait98
0877+  0000~                        wait14
0878+  0000                         endm
0879+  0000             
0880+  0000                         macro   wait114
0881+  0000~                        wait2p16x 7
0882+  0000                         endm
0883+  0000             
0884+  0000                         macro   wait115
0885+  0000~                        wait98
0886+  0000~                        wait17
0887+  0000                         endm
0888+  0000             
0889+  0000                         macro   wait116
0890+  0000~                        wait98
0891+  0000~                        wait18
0892+  0000                         endm
0893+  0000             
0894+  0000                         macro   wait117
0895+  0000~                        wait98
0896+  0000~                        wait19
0897+  0000                         endm
0898+  0000             
0899+  0000                         macro   wait118
0900+  0000~                        wait114
0901+  0000~                        wait4
0902+  0000                         endm
0903+  0000             
0904+  0000                         macro   wait119
0905+  0000~                        wait98
0906+  0000~                        wait21
0907+  0000                         endm
0908+  0000             
0909+  0000                         macro   wait120
0910+  0000~                        wait98
0911+  0000~                        wait22
0912+  0000                         endm
0913+  0000             
0914+  0000                         macro   wait121
0915+  0000~                        wait114
0916+  0000~                        wait7
0917+  0000                         endm
0918+  0000             
0919+  0000                         macro   wait122
0920+  0000~                        wait114
0921+  0000~                        wait8
0922+  0000                         endm
0923+  0000             
0924+  0000                         macro   wait123
0925+  0000~                        wait114
0926+  0000~                        wait9
0927+  0000                         endm
0928+  0000             
0929+  0000                         macro   wait124
0930+  0000~                        wait114
0931+  0000~                        wait10
0932+  0000                         endm
0933+  0000             
0934+  0000                         macro   wait125
0935+  0000~                        wait114
0936+  0000~                        wait11
0937+  0000                         endm
0938+  0000             
0939+  0000                         macro   wait126
0940+  0000~                        wait114
0941+  0000~                        wait12
0942+  0000                         endm
0943+  0000             
0944+  0000                         macro   wait127
0945+  0000~                        wait114
0946+  0000~                        wait13
0947+  0000                         endm
0948+  0000             
0949+  0000                         macro   wait128
0950+  0000~                        wait114
0951+  0000~                        wait14
0952+  0000                         endm
0953+  0000             
0954+  0000                         macro   wait129
0955+  0000~                        wait114
0956+  0000~                        wait15
0957+  0000                         endm
0958+  0000             
0959+  0000                         macro   wait130
0960+  0000~                        wait2p16x 8
0961+  0000                         endm
0962+  0000             
0963+  0000                         macro   wait131
0964+  0000~                        wait114
0965+  0000~                        wait17
0966+  0000                         endm
0967+  0000             
0968+  0000                         macro   wait132
0969+  0000~                        wait114
0970+  0000~                        wait18
0971+  0000                         endm
0972+  0000             
0973+  0000                         macro   wait133
0974+  0000~                        wait114
0975+  0000~                        wait19
0976+  0000                         endm
0977+  0000             
0978+  0000                         macro   wait134
0979+  0000~                        wait130
0980+  0000~                        wait4
0981+  0000                         endm
0982+  0000             
0983+  0000                         macro   wait135
0984+  0000~                        wait114
0985+  0000~                        wait21
0986+  0000                         endm
0987+  0000             
0988+  0000                         macro   wait136
0989+  0000~                        wait114
0990+  0000~                        wait22
0991+  0000                         endm
0992+  0000             
0993+  0000                         macro   wait137
0994+  0000~                        wait130
0995+  0000~                        wait7
0996+  0000                         endm
0997+  0000             
0998+  0000                         macro   wait138
0999+  0000~                        wait130
1000+  0000~                        wait8
1001+  0000                         endm
1002+  0000             
1003+  0000                         macro   wait139
1004+  0000~                        wait130
1005+  0000~                        wait9
1006+  0000                         endm
1007+  0000             
1008+  0000                         macro   wait140
1009+  0000~                        wait130
1010+  0000~                        wait10
1011+  0000                         endm
1012+  0000             
1013+  0000                         macro   wait141
1014+  0000~                        wait130
1015+  0000~                        wait11
1016+  0000                         endm
1017+  0000             
1018+  0000                         macro   wait144
1019+  0000~                        wait130
1020+  0000~                        wait14
1021+  0000                         endm
1022+  0000             
1023+  0000                         macro   wait145
1024+  0000~                        wait130
1025+  0000~                        wait15
1026+  0000                         endm
1027+  0000             
1028+  0000                         macro   wait146
1029+  0000~                        wait2p16x 9
1030+  0000                         endm
1031+  0000             
1032+  0000                         macro   wait147
1033+  0000~                        wait130
1034+  0000~                        wait17
1035+  0000                         endm
1036+  0000             
1037+  0000                         macro   wait148
1038+  0000~                        wait130
1039+  0000~                        wait18
1040+  0000                         endm
1041+  0000             
1042+  0000                         macro   wait149
1043+  0000~                        wait130
1044+  0000~                        wait19
1045+  0000                         endm
1046+  0000             
1047+  0000                         macro   wait150
1048+  0000~                        wait146
1049+  0000~                        wait4
1050+  0000                         endm
1051+  0000             
1052+  0000                         macro   wait154
1053+  0000~                        wait146
1054+  0000~                        wait8
1055+  0000                         endm
1056+  0000             
1057+  0000                         macro   wait155
1058+  0000~                        wait146
1059+  0000~                        wait9
1060+  0000                         endm
1061+  0000             
1062+  0000                         macro   wait156
1063+  0000~                        wait146
1064+  0000~                        wait10
1065+  0000                         endm
1066+  0000             
1067+  0000                         macro   wait157
1068+  0000~                        wait146
1069+  0000~                        wait11
1070+  0000                         endm
1071+  0000             
1072+  0000                         macro   wait158
1073+  0000~                        wait146
1074+  0000~                        wait12
1075+  0000                         endm
1076+  0000             
1077+  0000                         macro   wait160
1078+  0000~                        wait146
1079+  0000~                        wait14
1080+  0000                         endm
1081+  0000             
1082+  0000                         macro   wait161
1083+  0000~                        wait146
1084+  0000~                        wait15
1085+  0000                         endm
1086+  0000             
1087+  0000                         macro   wait162
1088+  0000~                        wait2p16x 10
1089+  0000                         endm
1090+  0000             
1091+  0000                         macro   wait164
1092+  0000~                        wait146
1093+  0000~                        wait18
1094+  0000                         endm
1095+  0000             
1096+  0000                         macro   wait165
1097+  0000~                        wait146
1098+  0000~                        wait19
1099+  0000                         endm
1100+  0000             
1101+  0000                         macro   wait166
1102+  0000~                        wait162
1103+  0000~                        wait4
1104+  0000                         endm
1105+  0000             
1106+  0000                         macro   wait172
1107+  0000~                        wait162
1108+  0000~                        wait10
1109+  0000                         endm
1110+  0000             
1111+  0000                         macro   wait174
1112+  0000~                        wait162
1113+  0000~                        wait12
1114+  0000                         endm
1115+  0000             
1116+  0000                         macro   wait175
1117+  0000~                        wait162
1118+  0000~                        wait13
1119+  0000                         endm
1120+  0000             
1121+  0000                         macro   wait176
1122+  0000~                        wait162
1123+  0000~                        wait14
1124+  0000                         endm
1125+  0000             
1126+  0000                         macro   wait178
1127+  0000~                        wait2p16x 11
1128+  0000                         endm
1129+  0000             
1130+  0000                         macro   wait179
1131+  0000~                        wait162
1132+  0000~                        wait17
1133+  0000                         endm
1134+  0000             
1135+  0000                         macro   wait180
1136+  0000~                        wait162
1137+  0000~                        wait18
1138+  0000                         endm
1139+  0000             
1140+  0000                         macro   wait182
1141+  0000~                        wait178
1142+  0000~                        wait4
1143+  0000                         endm
1144+  0000             
1145+  0000                         macro   wait183
1146+  0000~                        wait162
1147+  0000~                        wait121
1148+  0000                         endm
1149+  0000             
1150+  0000                         macro   wait186
1151+  0000~                        wait178
1152+  0000~                        wait8
1153+  0000                         endm
1154+  0000             
1155+  0000                         macro   wait187
1156+  0000~                        wait178
1157+  0000~                        wait9
1158+  0000                         endm
1159+  0000             
1160+  0000                         macro   wait189
1161+  0000~                        wait178
1162+  0000~                        wait11
1163+  0000                         endm
1164+  0000             
1165+  0000                         macro   wait191
1166+  0000~                        wait178
1167+  0000~                        wait13
1168+  0000                         endm
1169+  0000             
1170+  0000                         macro   wait192
1171+  0000~                        wait178
1172+  0000~                        wait14
1173+  0000                         endm
1174+  0000             
1175+  0000                         macro   wait193
1176+  0000~                        wait178
1177+  0000~                        wait15
1178+  0000                         endm
1179+  0000             
1180+  0000                         macro   wait194
1181+  0000~                        wait2p16x 12
1182+  0000                         endm
1183+  0000             
1184+  0000                         macro   wait197
1185+  0000~                        wait178
1186+  0000~                        wait19
1187+  0000                         endm
1188+  0000             
1189+  0000                         macro   wait203
1190+  0000~                        wait194
1191+  0000~                        wait9
1192+  0000                         endm
1193+  0000             
1194+  0000                         macro   wait210
1195+  0000~                        wait2p16x 13
1196+  0000                         endm
1197+  0000             
1198+  0000                         macro   wait218
1199+  0000~                        wait210
1200+  0000~                        wait8
1201+  0000                         endm
1202+  0000             
1203+  0000                         macro   wait226
1204+  0000~                        wait2p16x 14
1205+  0000                         endm
1206+  0000             
1207+  0000                         macro   wait234
1208+  0000~                        wait226
1209+  0000~                        wait8
1210+  0000                         endm
1211+  0000             
1212+  0000                         macro   wait242
1213+  0000~                        wait2p16x 15
1214+  0000                         endm
1215+  0000             
1216+  0000                         macro   wait244
1217+  0000~                        wait226
1218+  0000~                        wait18
1219+  0000                         endm
1220+  0000             
1221+  0000                         macro   wait246
1222+  0000~                        wait242
1223+  0000~                        wait4
1224+  0000                         endm
1225+  0000             
1226+  0000                         macro   wait254
1227+  0000~                        wait242
1228+  0000~                        wait12
1229+  0000                         endm
1230+  0000             
1231+  0000                         macro   wait258
1232+  0000~                        wait2p16x 16
1233+  0000                         endm
1234+  0000             
1235+  0000                         macro   wait260
1236+  0000~                        wait242
1237+  0000~                        wait18
1238+  0000                         endm
1239+  0000             
1240+  0000                         macro   wait262
1241+  0000~                        wait258
1242+  0000~                        wait4
1243+  0000                         endm
1244+  0000             
1245+  0000                         macro   wait264
1246+  0000~                        wait242
1247+  0000~                        wait22
1248+  0000                         endm
1249+  0000             
1250+  0000                         macro   wait268
1251+  0000~                        wait258
1252+  0000~                        wait10
1253+  0000                         endm
1254+  0000             
1255+  0000                         macro   wait274
1256+  0000~                        wait2p16x 17
1257+  0000                         endm
1258+  0000             
1259+  0000                         macro   wait276
1260+  0000~                        wait258
1261+  0000~                        wait18
1262+  0000                         endm
1263+  0000             
1264+  0000                         macro   wait278
1265+  0000~                        wait274
1266+  0000~                        wait4
1267+  0000                         endm
1268+  0000             
1269+  0000                         macro   wait282
1270+  0000~                        wait274
1271+  0000~                        wait8
1272+  0000                         endm
1273+  0000             
1274+  0000                         macro   wait283
1275+  0000~                        wait274
1276+  0000~                        wait9
1277+  0000                         endm
1278+  0000             
1279+  0000                         macro   wait285
1280+  0000~                        wait274
1281+  0000~                        wait11
1282+  0000                         endm
1283+  0000             
1284+  0000                         macro   wait287
1285+  0000~                        wait274
1286+  0000~                        wait13
1287+  0000                         endm
1288+  0000             
1289+  0000                         macro   wait290
1290+  0000~                        wait2p16x 18
1291+  0000                         endm
1292+  0000             
1293+  0000                         macro   wait294
1294+  0000~                        wait290
1295+  0000~                        wait4
1296+  0000                         endm
1297+  0000             
1298+  0000                         macro   wait295
1299+  0000~                        wait274
1300+  0000~                        wait21
1301+  0000                         endm
1302+  0000             
1303+  0000                         macro   wait298
1304+  0000~                        wait290
1305+  0000~                        wait8
1306+  0000                         endm
1307+  0000             
1308+  0000                         macro   wait305
1309+  0000~                        wait290
1310+  0000~                        wait15
1311+  0000                         endm
1312+  0000             
1313+  0000                         macro   wait306
1314+  0000~                        wait2p16x 19
1315+  0000                         endm
1316+  0000             
1317+  0000                         macro   wait308
1318+  0000~                        wait290
1319+  0000~                        wait18
1320+  0000                         endm
1321+  0000             
1322+  0000                         macro   wait320
1323+  0000~                        wait306
1324+  0000~                        wait14
1325+  0000                         endm
1326+  0000             
1327+  0000                         macro   wait322
1328+  0000~                        wait2p16x 20
1329+  0000                         endm
1330+  0000             
1331+  0000                         macro   wait324
1332+  0000~                        wait306
1333+  0000~                        wait18
1334+  0000                         endm
1335+  0000             
1336+  0000                         macro   wait329
1337+  0000~                        wait322
1338+  0000~                        wait7
1339+  0000                         endm
1340+  0000             
1341+  0000                         macro   wait337
1342+  0000~                        wait322
1343+  0000~                        wait15
1344+  0000                         endm
1345+  0000             
1346+  0000                         macro   wait338
1347+  0000~                        wait2p16x 21
1348+  0000                         endm
1349+  0000             
1350+  0000                         macro   wait345
1351+  0000~                        wait338
1352+  0000~                        wait7
1353+  0000                         endm
1354+  0000             
1355+  0000                         macro   wait434
1356+  0000~                        wait2p16x 27
1357+  0000                         endm
1358+  0000             
1359+  0000                         macro   wait450
1360+  0000~                        wait2p16x 28
1361+  0000                         endm
1362+  0000             
1363+  0000                         macro   wait454
1364+  0000~                        wait450
1365+  0000~                        wait4
1366+  0000                         endm
1367+  0000             
1368+  0000                         macro   wait455
1369+  0000~                        wait434
1370+  0000~                        wait21
1371+  0000                         endm
1372+  0000             
1373+  0000                         macro   wait546
1374+  0000~                        wait2p16x 34
1375+  0000                         endm
1376+  0000             
1377+  0000                         macro   wait562
1378+  0000~                        wait2p16x 35
1379+  0000                         endm
1380+  0000             
1381+  0000                         macro   wait567
1382+  0000~                        wait546
1383+  0000~                        wait21
1384+  0000                         endm
1385+  0000             
1386+  0000                         macro   wait578
1387+  0000~                        wait2p16x 36
1388+  0000                         endm
1389+  0000             
1390+  0000                         macro   wait586
1391+  0000~                        wait578
1392+  0000~                        wait8
1393+  0000                         endm
1394+  0000             
1395+  0000                         macro   wait590
1396+  0000~                        wait578
1397+  0000~                        wait12
1398+  0000                         endm
1399+  0000             
1400+  0000                         macro   wait594
1401+  0000~                        wait2p16x 37
1402+  0000                         endm
1403+  0000             
1404+  0000                         macro   wait595
1405+  0000~                        wait578
1406+  0000~                        wait17
1407+  0000                         endm
1408+  0000             
1409+  0000                         macro   wait598
1410+  0000~                        wait594
1411+  0000~                        wait4
1412+  0000                         endm
1413+  0000             
1414+  0000                         macro   wait599
1415+  0000~                        wait578
1416+  0000~                        wait21
1417+  0000                         endm
1418+  0000             
1419+  0000                         macro   wait602
1420+  0000~                        wait594
1421+  0000~                        wait8
1422+  0000                         endm
1423+  0000             
1424+  0000                         macro   wait609
1425+  0000~                        wait594
1426+  0000~                        wait15
1427+  0000                         endm
1428+  0000             
1429+  0000                         macro   wait610
1430+  0000~                        wait2p16x 38
1431+  0000                         endm
1432+  0000             
1433+  0000                         macro   wait614
1434+  0000~                        wait610
1435+  0000~                        wait4
1436+  0000                         endm
1437+  0000             
1438+  0000                         macro   wait618
1439+  0000~                        wait610
1440+  0000~                        wait8
1441+  0000                         endm
1442+  0000             
1443+  0000                         macro   wait619
1444+  0000~                        wait610
1445+  0000~                        wait9
1446+  0000                         endm
1447+  0000             
1448+  0000                         macro   wait622
1449+  0000~                        wait610
1450+  0000~                        wait12
1451+  0000                         endm
1452+  0000             
1453+  0000                         macro   wait623
1454+  0000~                        wait610
1455+  0000~                        wait13
1456+  0000                         endm
1457+  0000             
1458+  0000                         macro   wait626
1459+  0000~                        wait2p16x 39
1460+  0000                         endm
1461+  0000             
1462+  0000                         macro   wait634
1463+  0000~                        wait626
1464+  0000~                        wait8
1465+  0000                         endm
1466+  0000             
1467+  0000                         macro   wait638
1468+  0000~                        wait626
1469+  0000~                        wait12
1470+  0000                         endm
0134   0000             
0135   0000             
0136   0000             ; handlePCMCommand
0137   0000             ; ----------------
0138   0000             ; ? ->  HL  -> ?
0139   0000             ; ? ->  BC  -> ?
0140   0000             ; ? ->  SP  -> ?
0141   0000             ;
0142   0000             ; handle PCM command for channel 'ch' (PCM id < 0x100)
0143   0000             ; = 157 cycles
0144   0000             
0145   0000                         macro handlePCMCommand ch
0146   0000~            
0147   0000~                        LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
0148   0000~                        LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
0149   0000~            
0150   0000~                        LD      A, C                    ; A = new prio              ' 4     |
0151   0000~                        CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
0152   0000~                        JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
0153   0000~            
0154   0000~                        wait96                          ; sync                      ' 96    |
0155   0000~                        JP      .end                    ;                           ' 10    | 106 (157)
0156   0000~            
0157   0000~            .play_new
0158   0000~                        LD      A, B                    ; A = SFX id                ' 4     |
0159   0000~                        OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
0160   0000~                        JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
0161   0000~            
0162   0000~                        LD      C, 0                    ; reset prio for stop       ' 7     | +2
0163   0000~            
0164   0000~            .PCM_play                                   ;                           ' 69
0165   0000~                        LD      (HL), C                 ; set new prio              ' 7     | (76)
0166   0000~            
0167   0000~                        LD      H, (ID_TABLE>>10)       ;                           ' 7     |
0168   0000~                        LD      L, A                    ;                           ' 4     |
0169   0000~                        ADD     HL, HL                  ;                           ' 6     |
0170   0000~                        ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
0171   0000~                        LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
0172   0000~            
0173   0000~                        POP     HL                      ; copy params               ' 10    |
0174   0000~                        LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
0175   0000~                        POP     HL                      ;                           ' 10    | 52 (157)
0176   0000~                        LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
0177   0000~            
0178   0000~            .end
0179   0000                         endm
0180   0000             
0181   0000             
0182   0000             ; handlePCMCommandXGM
0183   0000             ; -------------------
0184   0000             ; XGM data ->  DE  -> XGM data
0185   0000             ; PCM prio ->  C   -> ?
0186   0000             ; ?        ->  HL  -> ?
0187   0000             ; ?        ->  SP  -> ?
0188   0000             ;
0189   0000             ; handle PCM command for channel 'ch' for XGM music (PCM id < 0x40)
0190   0000             ; = 142 cycles
0191   0000             
0192   0000                         macro handlePCMCommandXGM ch
0193   0000~            
0194   0000~                        LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
0195   0000~                        LD      A, C                    ; A = new prio              ' 4     |
0196   0000~                        CP      (HL)                    ; compare new and old prio  ' 7     | (31)
0197   0000~                        JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
0198   0000~            
0199   0000~                        INC     E                       ; next XGM command          ' 4     |
0200   0000~                        wait97                          ; sync                      ' 97    | 111 (142)
0201   0000~                        JP      .end                    ; done                      ' 10    |
0202   0000~            
0203   0000~            .play_new
0204   0000~                        LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
0205   0000~                        INC     E                       ; next XGM command          ' 4     |
0206   0000~                        OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
0207   0000~                        JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
0208   0000~            
0209   0000~                        LD      C, 0                    ; reset prio for stop       ' 7     | +2
0210   0000~            
0211   0000~            .PCM_play
0212   0000~                        LD      (HL), C                 ; set new prio              ' 7     | (65)
0213   0000~            
0214   0000~                        LD      H, (ID_TABLE>>8)        ;                           ' 7     |
0215   0000~                        ADD     A                       ;                           ' 4     |
0216   0000~                        ADD     A                       ;                           ' 4     | 25 (90)
0217   0000~                        LD      L, A                    ; HL point on new PCM addr  ' 4     |
0218   0000~                        LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
0219   0000~            
0220   0000~                        POP     HL                      ; copy params               ' 10    |
0221   0000~                        LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
0222   0000~                        POP     HL                      ;                           ' 10    | 52 (142)
0223   0000~                        LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
0224   0000~            
0225   0000~            .end                                        ;                           ' 142
0226   0000~            
0227   0000                         endm
0228   0000             
0229   0000             
0230   0000             ; prepareChannelAlt
0231   0000             ; -----------------
0232   0000             ; ? ->  HL  ->  point to the sample source (ROM)
0233   0000             ; ? ->  DE  ->  point to write buffer
0234   0000             ;
0235   0000             ; set bank and prepare registers to play PCM channel 'ch'
0236   0000             ; = 176 cycles
0237   0000             
0238   0000                         macro prepareChannelAlt ch
0239   0000~            
0240   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0241   0000~            
0242   0000~                        LD      A, L                    ; A = bit 8-15          ' 4     |
0243   0000~                        RLA                             ; C flag = bit 15       ' 4     |
0244   0000~                        LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0245   0000~                        RLA                             ; A = bit 15-22         ' 4     |
0246   0000~            
0247   0000~                        setBank_DE                      ; set bank              ' 105   | (137)
0248   0000~            
0249   0000~                        LD      H, L                    ;                       ' 4     |
0250   0000~                        SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0251   0000~                        LD      L, 0                    ; HL = sample addr bank ' 7     |
0252   0000~            
0253   0000~                        LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0254   0000~            
0255   0000                         endm
0256   0000             
0257   0000             ; prepareChannel
0258   0000             ; --------------
0259   0000             ; ? ->  SP  ->  point to the sample source (ROM)
0260   0000             ; ? ->  HL  ->  point to write buffer
0261   0000             ;
0262   0000             ; set bank and prepare registers to play PCM channel 'ch'
0263   0000             ; = 178 cycles
0264   0000             
0265   0000                         macro prepareChannel ch
0266   0000~            
0267   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0268   0000~            
0269   0000~                        LD      A, L                    ; A = bit 8-15          ' 4     |
0270   0000~                        RLA                             ; C flag = bit 15       ' 4     |
0271   0000~                        LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0272   0000~                        RLA                             ; A = bit 15-22         ' 4     |
0273   0000~            
0274   0000~                        setBank_DE                      ; set bank              ' 105   | (137)
0275   0000~            
0276   0000~                        LD      H, L                    ;                       ' 4     |
0277   0000~                        SET     7, H                    ; HL |= 0x8000          ' 8     | 25 (162)
0278   0000~                        LD      L, 0                    ; HL = sample addr bank ' 7     |
0279   0000~                        LD      SP, HL                  ; SP point on sample    ' 6     |
0280   0000~            
0281   0000~                        LD      HL, (WRITEBUF)          ; HL = write buffer     ' 16    | (178)
0282   0000~            
0283   0000                         endm
0284   0000             
0285   0000             
0286   0000             ; stopChannel
0287   0000             ; -----------
0288   0000             ; ? ->  HL  -> STATUS
0289   0000             ;
0290   0000             ; set null sample play for channel 'ch'
0291   0000             ; = 75 cycles
0292   0000             
0293   0000                         macro stopChannel ch
0294   0000~            
0295   0000~                        LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0296   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0297   0000~                        LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0298   0000~                        LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0299   0000~            
0300   0000~                        XOR     A                       ;                           ' 4     |
0301   0000~                        LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0302   0000~            
0303   0000                         endm
0304   0000             
0305   0000             
0306   0000             ; updateChannelData
0307   0000             ; -----------------
0308   0000             ; ? ->  HL  -> ?
0309   0000             ;
0310   0000             ; update sample address and sample lenght
0311   0000             ; check if sample is done and stop it if needed
0312   0000             ; = 153 cycles
0313   0000             
0314   0000                         macro updateChannelData ch
0315   0000~            
0316   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0317   0000~                        INC     HL                      ;                       ' 6     | (38)
0318   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0319   0000~            
0320   0000~                        LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0321   0000~                        DEC     HL                      ;                       ' 6     | 22 (60)
0322   0000~            
0323   0000~                        LD      A, H                    ;                       ' 4     |
0324   0000~                        OR      L                       ;                       ' 4     | 18 (78)
0325   0000~                        JP      Z, .done                ; sample done ?         ' 10    |
0326   0000~            
0327   0000~                        LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
0328   0000~                        wait49                          ;                       ' 49    | 75 (153)
0329   0000~                        JP      .end                    ;                       ' 10    |
0330   0000~            
0331   0000~            .done
0332   0000~                        stopChannel ch                  ; stop channel          ' 75    | (153)
0333   0000~            
0334   0000~            .end
0335   0000~            
0336   0000                         endm
0337   0000             
0338   0000             
0339   0000             ; compareReadWrite
0340   0000             ; ----------------
0341   0000             ; read buffer  -> BC'
0342   0000             ; write buffer -> DE
0343   0000             ;                 ZF ->  Write == Read buffer
0344   0000             ;
0345   0000             ; compare read and write buffer
0346   0000             ; = 16 cycles
0347   0000             
0348   0000                         macro compareReadWrite
0349   0000~            
0350   0000~                        EXX                     ;                           ' 4     |
0351   0000~                        LD      A, B            ; A = read buffer high      ' 4     |
0352   0000~                        EXX                     ;                           ' 4     | 16
0353   0000~                        CP      D               ; compare write buffer high ' 4     |
0354   0000~            
0355   0000                         endm
0356   0000             
0357   0000             
0358   0000             ; readAndClear
0359   0000             ; ------------
0360   0000             ; point to sample source (ROM) ->  HL  ->  point to sample source (ROM)
0361   0000             ; point to write buffer        ->  DE  ->  point to write buffer
0362   0000             ; ?                            ->  PF  ->  0=done 1=not done
0363   0000             ;
0364   0000             ; read 1 sample from rom and write it in output buffer
0365   0000             ; = 19 cycles
0366   0000             
0367   0000                         macro readAndClear
0368   0000~            
0369   0000~                        LDI                     ;                           ' 16+3  | 19
0370   0000~            
0371   0000                         endm
0372   0000             
0373   0000             
0374   0000             ; readAndClear2
0375   0000             ; -------------
0376   0000             ; point to sample source (ROM) ->  HL  ->  point to sample source (ROM)
0377   0000             ; point to write buffer        ->  DE  ->  point to write buffer
0378   0000             ; ?                            ->  PF  ->  0=done 1=not done
0379   0000             ;
0380   0000             ; read 2 samples from rom and write them in write buffer
0381   0000             ; = 38 cycles
0382   0000             
0383   0000                         macro readAndClear2
0384   0000~            
0385   0000~                        LDI                     ;                           ' 16+3  |
0386   0000~                        LDI                     ;                           ' 16+3  | (38)
0387   0000~            
0388   0000                         endm
0389   0000             
0390   0000             
0391   0000             ; readAndMix2
0392   0000             ; -----------
0393   0000             ; point to sample source (ROM) ->  SP  ->  point to sample source (ROM)
0394   0000             ; point to write buffer        ->  HL  ->  point to write buffer
0395   0000             ; $80 ->  C
0396   0000             ;
0397   0000             ; read 2 samples and mix them in output buffer
0398   0000             ; = 80 (+22 when overflow)
0399   0000             
0400   0000                         macro readAndMix2
0401   0000~            
0402   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
0403   0000~            
0404   0000~                        LD      A, E            ; first sample              ' 4     |
0405   0000~                        ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
0406   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0407   0000~            
0408   0000~                        LD      A, C            ; fix overflow              ' 4     |
0409   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0410   0000~            
0411   0000~            .ok
0412   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0413   0000~                        INC     L               ;                           ' 4     | 11 (48)
0414   0000~            
0415   0000~                        LD      A, D            ; second sample             ' 4     |
0416   0000~                        ADD     (HL)            ; mix                       ' 7     | 21 (69)
0417   0000~                        JP      PO, .ok2        ; check overflow            ' 10    |
0418   0000~            
0419   0000~                        LD      A, C            ; fix overflow              ' 4     |
0420   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0421   0000~            
0422   0000~            .ok2
0423   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0424   0000~                        INC     L               ;                           ' 4     | 11 (80)
0425   0000~            
0426   0000                         endm                    ;                           ' 80 (+22)
0427   0000             
0428   0000             
0429   0000             ; readAndMix16WhilePlay3
0430   0000             ; ----------------------
0431   0000             ; point to sample source (ROM) ->  SP  ->  point to sample source (ROM)
0432   0000             ; point to write buffer        ->  HL  ->  point to write buffer
0433   0000             ; $80 ->  C
0434   0000             ;
0435   0000             ; read 16 samples and mix them in output buffer
0436   0000             ; = 2 samples + 240 cycles
0437   0000             
0438   0000                         macro readAndMix16WhilePlay3
0439   0000~            
0440   0000~                        sampleOutput            ;                           ' 36    | (36)
0441   0000~            
0442   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    |
0443   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    | 160 (196)
0444   0000~            
0445   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+6  | (212)
0446   0000~            
0447   0000~                        LD      A, E            ; first sample              ' 4     |
0448   0000~                        ADD     (HL)            ; mix with write buffer     ' 7     | 21 (233)
0449   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0450   0000~            
0451   0000~                        LD      A, C            ; fix overflow              ' 4     |
0452   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0453   0000~            
0454   0000~            .ok
0455   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0456   0000~                        INC     L               ;                           ' 4     | 11 (254-10)
0457   0000~            
0458   0000~                        sampleOutput            ; -10 --> too soon          ' 36    | (36-10)
0459   0000~            
0460   0000~                        LD      A, D            ; second sample             ' 4     |
0461   0000~                        ADD     (HL)            ; mix                       ' 7     | 21 (47)
0462   0000~                        JP      PO, .ok2        ; check overflow            ' 10    |
0463   0000~            
0464   0000~                        LD      A, C            ; fix overflow              ' 4     |
0465   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0466   0000~            
0467   0000~            .ok2
0468   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0469   0000~                        INC     L               ;                           ' 4     | 11 (58)
0470   0000~            
0471   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    |
0472   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    | 160 (218)
0473   0000~            
0474   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+6  | (234)
0475   0000~            
0476   0000~                        LD      A, E            ; first sample              ' 4     |
0477   0000~                        ADD     (HL)            ; mix with write buffer     ' 7     | 21 (254+1)
0478   0000~                        JP      PO, .ok3        ; check overflow            ' 10    |
0479   0000~            
0480   0000~                        LD      A, C            ; fix overflow              ' 4     |
0481   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0482   0000~            
0483   0000~            .ok3
0484   0000~                        LD      (HL), A         ; store it in write sample  ' 7     | (254+8)
0485   0000~            
0486   0000~                        sampleOutput            ; +8 --> too late           ' 36    | (36+8)
0487   0000~            
0488   0000~                        INC     L               ;                           ' 4     | (48)
0489   0000~            
0490   0000~                        LD      A, D            ; second sample             ' 4     |
0491   0000~                        ADD     (HL)            ; mix                       ' 7     | 21 (69)
0492   0000~                        JP      PO, .ok4        ; check overflow            ' 10    |
0493   0000~            
0494   0000~                        LD      A, C            ; fix overflow              ' 4     |
0495   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0496   0000~            
0497   0000~            .ok4
0498   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0499   0000~                        INC     L               ;                           ' 4     | 11 (80)
0500   0000~            
0501   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    |
0502   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    | 160 (240)
0503   0000~            
0504   0000                         endm                    ;                           ' 240
0505   0000             
0506   0000             
0507   0000             ; readMixAndUnsign
0508   0000             ; ----------------
0509   0000             ; point to sample source (ROM) ->  HL  ->  point to sample source (ROM)
0510   0000             ; point to write buffer        ->  DE  ->  point to write buffer
0511   0000             ; $80 ->  C
0512   0000             ;
0513   0000             ; read 1 sample and mix it with output buffer, then unsign it
0514   0000             ; = 46 (+11 when overflow)
0515   0000             
0516   0000                         macro readMixAndUnsign
0517   0000~            
0518   0000~                        LD      A, (DE)         ; read value in write buf   ' 7     |
0519   0000~                        ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
0520   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0521   0000~            
0522   0000~                        LD      A, C            ; fix overflow              ' 4     |
0523   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0524   0000~            
0525   0000~            .ok
0526   0000~                        ADD     C               ; unsign                    ' 4     |
0527   0000~                        LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
0528   0000~                        INC     E               ;                           ' 4     |
0529   0000~                        INC     L               ; next                      ' 4     |
0530   0000~            
0531   0000                         endm                    ;                           ' 46 (+11)
0532   0000             
0533   0000             
0534   0000             ; sampleOutput
0535   0000             ; ------------
0536   0000             ; YMPORT0     -> HL'
0537   0000             ; YMPORT1     -> DE'
0538   0000             ; read buffer -> BC' ->  read buffer
0539   0000             ;
0540   0000             ; output a sample to the DAC
0541   0000             ; = 36 cycles
0542   0000             
0543   0000                         macro sampleOutput
0544   0000~            
0545   0000~                        EXX                     ;                           ' 4     | 4
0546   0000~            
0547   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7     |
0548   0000~                        INC     BC              ; increment read address    ' 6     |
0549   0000~                        RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0550   0000~                        LD      (DE), A         ; play sample               ' 7     |
0551   0000~            
0552   0000~                        EXX                     ;                           ' 4     | (36)
0553   0000~            
0554   0000                         endm
0555   0000             
0556   0000             
0557   0000             ; sampleOutputSafe
0558   0000             ; ----------------
0559   0000             ; YMPORT0     -> HL'
0560   0000             ; YMPORT1     -> DE'
0561   0000             ; read buffer -> BC' ->  read buffer
0562   0000             ;
0563   0000             ; output a sample to the DAC
0564   0000             ; = 46 cycles
0565   0000             
0566   0000                         macro sampleOutputSafe
0567   0000~            
0568   0000~                        EXX                     ;                           ' 4     | 4
0569   0000~            
0570   0000~                        LD      (HL), $2A       ; prepare DAC write         ' 10    |
0571   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7     |
0572   0000~                        INC     BC              ; increment read address    ' 6     | 38 (42)
0573   0000~                        RES     2, B            ; read_address &= 0x03FF    ' 8     |
0574   0000~                        LD      (DE), A         ; play sample               ' 7     |
0575   0000~            
0576   0000~                        EXX                     ;                           ' 4     | (46)
0577   0000~            
0578   0000                         endm
0579   0000             
0580   0000             
0581   0000             ; waitYMReadyFast
0582   0000             ; ---------------
0583   0000             ; YMPORT0   -> HL
0584   0000             ;
0585   0000             ; wait until YM ready
0586   0000             ; = 22 cycles minimum (22 * X)
0587   0000             
0588   0000                         macro waitYMReadyFast
0589   0000~            
0590   0000~            .wait
0591   0000~                        BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
0592   0000~                        JP      NZ, .wait       ; wait while busy           ' 10    |
0593   0000~            
0594   0000                         endm
0595   0000             
0596   0000             
0597   0000             ; waitYMReady
0598   0000             ; -----------
0599   0000             ; YMPORT0   -> HL'
0600   0000             ;
0601   0000             ; wait until YM ready
0602   0000             ; = 30 cycles minimum (8 + (22 * X))
0603   0000             
0604   0000                         macro waitYMReady
0605   0000~            
0606   0000~                        EXX                     ;                           ' 4     | (4)
0607   0000~            
0608   0000~            .wait
0609   0000~                        BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
0610   0000~                        JP      NZ, .wait       ; wait while busy           ' 10    |
0611   0000~            
0612   0000~                        EXX                     ;                           ' 4     | (30)
0613   0000~            
0614   0000                         endm
0615   0000             
0616   0000             
0617   0000             ; ###########################       init       ##############################
0618   0000             
0619   0000                         ORG     $0000
0620   0000             
0621   0000             init
0622   0000 F3                      DI                      ; disable ints
0623   0001 31 00 16                LD      SP, STACK       ; setup stack
0624   0004 ED 56                   IM      $01             ; set int mode 1
0625   0006 AF                      XOR     A
0626   0007 32 02 01                LD      (STATUS), A     ; driver not ready
0627   000A 32 00 01                LD      (COMMAND), A    ; command cleared
0628   000D C3 00 02                JP      start           ; jump to start
0629   0010             
0630   0010             
0631   0010             ; ###########################       main       ##############################
0632   0010             
0633   0010 00                      BLOCK   $0200-$
0634   0200             
0635   0200             start
0636   0200             
0637   0200 21 04 01                LD      HL, PARAMS
0638   0203 3E 00                   LD      A, $00
0639   0205 06 40                   LD      B, $40
0640   0207             
0641   0207             cp_loop
0642   0207 77                      LD      (HL), A         ; clear parameters
0643   0208 23                      INC     HL
0644   0209 10 FC                   DJNZ    cp_loop
0645   020B             
0646   020B 21 64 01                LD      HL, YM_RR_OFF
0647   020E 3E FF                   LD      A, $FF
0648   0210 06 18                   LD      B, (6 * 4)
0649   0212             
0650   0212             off_loop
0651   0212 77                      LD      (HL), A         ; clear off settings
0652   0213 23                      INC     HL
0653   0214 10 FC                   DJNZ    off_loop
0654   0216             
0655   0216 21 7C 01                LD      HL, PSG_ENV_OFF
0656   0219             
0657   0219 36 9F                   LD      (HL), $9F       ; PSG channel 0 off
0658   021B 23                      INC     HL
0659   021C 36 BF                   LD      (HL), $BF       ; PSG channel 1 off
0660   021E 23                      INC     HL
0661   021F 36 DF                   LD      (HL), $DF       ; PSG channel 2 off
0662   0221 23                      INC     HL
0663   0222 36 FF                   LD      (HL), $FF       ; PSG channel 3 off
0664   0224             
0665   0224 21 64 01                LD      HL, YM_RR_OFF
0666   0227 11 44 01                LD      DE, YM_RR_SAV
0667   022A 01 1C 00                LD      BC, (6 * 4) + 4
0668   022D ED B0                   LDIR                    ; copy off settings to sav settings
0669   022F             
0670   022F 21 00 18                LD      HL, PCM_BUFFER
0671   0232 3E 80                   LD      A, $80
0672   0234 06 00                   LD      B, $00          ; for 256 * 4 bytes to clear
0673   0236             
0674   0236             cb_loop
0675   0236 77                      LD      (HL), A         ; initialise buffers to silent
0676   0237 23                      INC     HL
0677   0238 77                      LD      (HL), A
0678   0239 23                      INC     HL
0679   023A 77                      LD      (HL), A
0680   023B 23                      INC     HL
0681   023C 77                      LD      (HL), A
0682   023D 23                      INC     HL
0683   023E 10 F6                   DJNZ    cb_loop
0684   0240             
0685   0240 3E 00                   LD      A, $00
0686   0242             
0687   0242 21 60 01                LD      HL, YM_2B_SAV
0688   0245 77                      LD      (HL), A         ; DAC disabled by default
0689   0246 21 61 01                LD      HL, YM_2B_CNT
0690   0249 77                      LD      (HL), A         ; DAC disabled by default
0691   024A             
0692   024A 21 12 01                LD      HL, MODIFYING_F
0693   024D 77                      LD      (HL), A         ; clear modifying variable flag
0694   024E 21 13 01                LD      HL, PENDING_FRM
0695   0251 77                      LD      (HL), A         ; clear frame to process counter
0696   0252             
0697   0252 CD 5C 14                CALL    initDAC         ; prepare DAC for output
0698   0255             
0699   0255 21 00 18                LD      HL, PCM_BUFFER0 ; initialise write and read buffer
0700   0258 22 38 01                LD      (WRITEBUF), HL
0701   025B 21 00 19                LD      HL, PCM_BUFFER1
0702   025E 22 3A 01                LD      (READBUF), HL
0703   0261             
0704   0261 44 4D                   LD      BC, HL          ; BC' point to read buffer
0705   0263 21 00 40                LD      HL, YMPORT0     ; HL' point to YMPORT0
0706   0266 11 01 40                LD      DE, YMPORT1     ; DE' point to YMPORT1
0707   0269 D9                      EXX
0708   026A             
0709   026A                         stopChannel 0           ; stop all channels
0709   026A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0709   026D 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0709   0270 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0709   0273 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0709   0276 AF          >            XOR     A                       ;                           ' 4     |
0709   0277 32 14 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0710   027A                         stopChannel 1
0710   027A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0710   027D 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0710   0280 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0710   0283 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0710   0286 AF          >            XOR     A                       ;                           ' 4     |
0710   0287 32 1C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0711   028A                         stopChannel 2
0711   028A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0711   028D 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0711   0290 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0711   0293 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0711   0296 AF          >            XOR     A                       ;                           ' 4     |
0711   0297 32 24 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0712   029A                         stopChannel 3
0712   029A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0712   029D 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0712   02A0 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0712   02A3 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0712   02A6 AF          >            XOR     A                       ;                           ' 4     |
0712   02A7 32 2C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0713   02AA             
0714   02AA 3E 80                   LD      A, STATREADY
0715   02AC 32 02 01                LD      (STATUS), A     ; driver ready
0716   02AF             
0717   02AF             main_loop
0718   02AF             
0719   02AF             ;    LD  A, (VCOUNTER)
0720   02AF             ;    LD  (DEBUG_1), A
0721   02AF             
0722   02AF             
0723   02AF             ; prepare XGM buffer
0724   02AF             ; ------------------
0725   02AF             
0726   02AF             ; $00
0727   02AF             
0728   02AF             ;    LD  A, (VCOUNTER)
0729   02AF             ;    LD  (DEBUG_6), A
0730   02AF             
0731   02AF                         sampleOutput                ;                       ' 36    | 36
0731   02AF D9          >            EXX                     ;                           ' 4     | 4
0731   02B0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0731   02B1 03          >            INC     BC              ; increment read address    ' 6     |
0731   02B2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0731   02B4 12          >            LD      (DE), A         ; play sample               ' 7     |
0731   02B5 D9          >            EXX                     ;                           ' 4     | (36)
0732   02B6             
0733   02B6 11 00 17                LD      DE, XGM_BUFFER      ; DE point to XGM buf   ' 10    |
0734   02B9 3A 02 01                LD      A, (STATUS)         ; A = STATUS            ' 13    |
0735   02BC CB 77                   BIT     XGM_PLAY_SFT, A     ; is XGM playing ?      ' 8     | 41 (77)
0736   02BE C2 CA 02                JP      NZ, has_xgm         ; go to prepare buf     ' 10    |
0737   02C1             
0738   02C1                         wait146                     ; sync                  ' 146   |
0738   02C1 3E 09       >            LD      A, w            ; 7-2
0738   02C3 3D          >            DEC     A               ; 4
0738   02C4 20 FD       >            JR      NZ, .loop       ; 12
0739   02C6 AF                      XOR     A                   ; A = 0                 ' 4     | 160 (237)
0740   02C7 C3 D8 04                JP      end_prep_xgm        ; preparation done      ' 10    |
0741   02CA             
0742   02CA             has_xgm
0743   02CA 2A 34 01                LD      HL, (XGM_ADDR)      ; XGM addr (b0-b15)     ' 16    |
0744   02CD 7C                      LD      A, H                ; A = XGM addr (b8-b15) ' 4     |
0745   02CE 17                      RLA                         ; CF = XGM addr b15     ' 4     | 146 (223)
0746   02CF 3A 36 01                LD      A, (XGM_ADDR+2)     ; A = sample addr (H)   ' 13    |
0747   02D2 17                      RLA                         ; sample addr (b22-b15) ' 4     |
0748   02D3                         setBank_BC                  ; setBank               ' 105   |
0748   02D3 01 00 60    >            LD  BC, BANKREG         ; BC = BANKREG              ' 10
0748   02D6 02          >            LD  (BC), A             ; #1 (bit 15)               ' 7
0748   02D7 1F          >            RRA                     ;                           ' 4
0748   02D8 02          >            LD  (BC), A             ; #2 (bit 16)               ' 7
0748   02D9 1F          >            RRA                     ;                           ' 4
0748   02DA 02          >            LD  (BC), A             ; #3 (bit 17)               ' 7
0748   02DB 1F          >            RRA                     ;                           ' 4
0748   02DC 02          >            LD  (BC), A             ; #4 (bit 18)               ' 7
0748   02DD 1F          >            RRA                     ;                           ' 4
0748   02DE 02          >            LD  (BC), A             ; #5 (bit 19)               ' 7
0748   02DF 1F          >            RRA                     ;                           ' 4
0748   02E0 02          >            LD  (BC), A             ; #6 (bit 20)               ' 7
0748   02E1 1F          >            RRA                     ;                           ' 4
0748   02E2 02          >            LD  (BC), A             ; #7 (bit 21)               ' 7
0748   02E3 1F          >            RRA                     ;                           ' 4
0748   02E4 02          >            LD  (BC), A             ; #8 (bit 22)               ' 7
0748   02E5 1F          >            RRA                     ;                           ' 4
0748   02E6 02          >            LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0749   02E7             
0750   02E7 7C                      LD      A, H                ; save H                ' 4     |
0751   02E8 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0752   02EA 06 00                   LD      B, $0               ; B = 0                 ' 7     | 30 (254-1)
0753   02EC 4E                      LD      C, (HL)             ; BC = bytes to process ' 7     |
0754   02ED 67                      LD      H, A                ; restore H             ' 4     |
0755   02EE             
0756   02EE             ; $00+X
0757   02EE                         sampleOutput                ;                       ' 36    | (36-1)
0757   02EE D9          >            EXX                     ;                           ' 4     | 4
0757   02EF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0757   02F0 03          >            INC     BC              ; increment read address    ' 6     |
0757   02F1 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0757   02F3 12          >            LD      (DE), A         ; play sample               ' 7     |
0757   02F4 D9          >            EXX                     ;                           ' 4     | (36)
0758   02F5             
0759   02F5 7D                      LD      A, L                ; A = addr low          ' 4     |
0760   02F6 81                      ADD     C                   ; compute new addr (L)  ' 4     |
0761   02F7 32 34 01                LD      (XGM_ADDR+0), A     ; store new addr (L)    ' 13    | 28 (63)
0762   02FA 38 1A                   JR      C, .split           ; carry --> separate    ' 7     |
0763   02FC             
0764   02FC             .no_split
0765   02FC                         wait104                     ; sync                  ' 104   | (167)
0765   02FC 3E 05       >            LD      A, w            ; 7-2
0765   02FE 3D          >            DEC     A               ; 4
0765   02FF 20 FD       >            JR      NZ, .loop       ; 12
0765   0301 ED 4F       >            LD      R, A
0765   0303 ED 4F       >            LD      R, A
0765   0305 00          >            NOP
0766   0306             
0767   0306 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0768   0308 23                      INC     HL                  ; HL = start frame data ' 6     |
0769   0309 AF                      XOR     A                   ; no second part        ' 4     |
0770   030A FD 67                   LD      IYH, A              ; IYH = sec part size   ' 8     | 44 (211)
0771   030C 00                      NOP                         ;                       ' 4     |
0772   030D 0D                      DEC     C                   ; first part size = 0 ? ' 4     |
0773   030E CA F5 03                JP      Z, .second_part     ; go to second part     ' 10    |
0774   0311             
0775   0311                         wait12                      ; sync                  ' 12    | 22 (233)
0775   0311 18 00       >            JR      .loop
0776   0313 C3 54 03                JP      .first_part_pre     ; start filling         ' 10    |
0777   0316             
0778   0316             .split
0779   0316 FD 67                   LD      IYH, A              ; IYH = sec part size   ' 8     |
0780   0318 91                      SUB     C                   ;                       ' 4     |
0781   0319 ED 44                   NEG                         ;                       ' 8     | 34 (97)
0782   031B 3D                      DEC     A                   ; A = (C - IYH) - 1     ' 4     |
0783   031C C2 3A 03                JP      NZ, .first_part_ok  ; not zero --> do it    ' 10    |
0784   031F             
0785   031F 7C                      LD      A, H                ; A = addr med (M)      ' 4     |
0786   0320 C6 01                   ADD     $1                  ; inc with CF set       ' 7     |
0787   0322 32 35 01                LD      (XGM_ADDR+1), A     ; store new addr (M)    ' 13    |
0788   0325 3A 36 01                LD      A, (XGM_ADDR+2)     ; load sample addr (H)  ' 13    |
0789   0328 88                      ADC     B                   ; inc                   ' 4     | 68 (164)
0790   0329 32 36 01                LD      (XGM_ADDR+2), A     ; store sample addr (H) ' 13    |
0791   032C CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0792   032E 23                      INC     HL                  ; HL = start frame data ' 6     |
0793   032F             
0794   032F                         wait36                      ; sync                  ' 36    |
0794   032F ED 4F       >            LD      R, A
0794   0331 ED 4F       >            LD      R, A
0794   0333 ED 4F       >            LD      R, A
0794   0335 ED 4F       >            LD      R, A
0795   0337 C3 F5 03                JP      .second_part        ; go second part        ' 10    | 65 (211)
0796   033A             
0797   033A             .first_part_ok
0798   033A 4F                      LD      C, A                ; C = first part size   ' 4     |
0799   033B 7C                      LD      A, H                ; A = addr med (M)      ' 4     |
0800   033C C6 01                   ADD     $1                  ; inc with CF set       ' 7     |
0801   033E 32 35 01                LD      (XGM_ADDR+1), A     ; store new addr (M)    ' 13    |
0802   0341 3A 36 01                LD      A, (XGM_ADDR+2)     ; load sample addr (H)  ' 13    | 72 (169)
0803   0344 88                      ADC     B                   ; inc                   ' 4     |
0804   0345 32 36 01                LD      (XGM_ADDR+2), A     ; store sample addr (H) ' 13    |
0805   0348 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0806   034A 23                      INC     HL                  ; HL = start frame data ' 6     |
0807   034B             
0808   034B                         wait64                      ; sync                  ' 64    | (233)
0808   034B 3E 03       >            LD      A, w            ; 7-2
0808   034D 3D          >            DEC     A               ; 4
0808   034E 20 FD       >            JR      NZ, .loop       ; 12
0808   0350 3E 00       >            LD      A, $0
0808   0352 3E 00       >            LD      A, $0
0809   0354             
0810   0354             .first_part_pre                         ;                       ' 233
0811   0354 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0812   0356 B9                      CP      C                   ; C < block size        ' 4     | 21 (254)
0813   0357 D2 80 03                JP      NC, .first_part_end ; go to last bytes      ' 10    |
0814   035A             
0815   035A             .first_part
0816   035A             ; $00+X
0817   035A                         sampleOutput                ;                       ' 36    | 36
0817   035A D9          >            EXX                     ;                           ' 4     | 4
0817   035B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0817   035C 03          >            INC     BC              ; increment read address    ' 6     |
0817   035D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0817   035F 12          >            LD      (DE), A         ; play sample               ' 7     |
0817   0360 D9          >            EXX                     ;                           ' 4     | (36)
0818   0361             
0819   0361 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0820   0363 ED A0                   LDI                         ; 11 bytes at once      ' 16+1  |
0821   0365 ED A0                   LDI                         ;                       ' 16+1  |
0822   0367 ED A0                   LDI                         ;                       ' 16+1  |
0823   0369 ED A0                   LDI                         ;                       ' 16+1  |
0824   036B ED A0                   LDI                         ;                       ' 16+1  | 187 (223)
0825   036D ED A0                   LDI                         ;                       ' 16+1  |
0826   036F ED A0                   LDI                         ;                       ' 16+1  |
0827   0371 ED A0                   LDI                         ;                       ' 16+1  |
0828   0373 ED A0                   LDI                         ;                       ' 16+1  |
0829   0375 ED A0                   LDI                         ;                       ' 16+1  |
0830   0377             
0831   0377                         wait10                      ; sync                  ' 10    |
0831   0377 C3 7A 03    >            JP      .loop
0832   037A 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0833   037C B9                      CP      C                   ; remaining > 11        ' 4     | 31 (254)
0834   037D DA 5A 03                JP      C, .first_part      ; continu block fill    ' 10    |
0835   0380             
0836   0380             .first_part_end
0837   0380             ; $00+X
0838   0380                         sampleOutput                ;                       ' 36    | 36
0838   0380 D9          >            EXX                     ;                           ' 4     | 4
0838   0381 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0838   0382 03          >            INC     BC              ; increment read address    ' 6     |
0838   0383 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0838   0385 12          >            LD      (DE), A         ; play sample               ' 7     |
0838   0386 D9          >            EXX                     ;                           ' 4     | (36)
0839   0387             
0840   0387 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0841   0389 E2 D4 03                JP      PO, .fst_part_d0    ;                       ' 10    | 27 (63)
0842   038C ED A0                   LDI                         ;                       ' 16+1  |
0843   038E E2 DA 03                JP      PO, .fst_part_d1    ;                       ' 10    | 27 (90)
0844   0391 ED A0                   LDI                         ;                       ' 16+1  |
0845   0393 E2 E0 03                JP      PO, .fst_part_d2    ;                       ' 10    | 27 (117)
0846   0396 ED A0                   LDI                         ;                       ' 16+1  |
0847   0398 E2 E6 03                JP      PO, .fst_part_d3    ;                       ' 10    | 27 (144)
0848   039B ED A0                   LDI                         ;                       ' 16+1  |
0849   039D E2 EC 03                JP      PO, .fst_part_d4    ;                       ' 10    | 27 (171)
0850   03A0 ED A0                   LDI                         ;                       ' 16+1  |
0851   03A2 E2 F2 03                JP      PO, .fst_part_d5    ;                       ' 10    | 27 (198)
0852   03A5             
0853   03A5                         wait56                      ; sync                  ' 56    | (254)
0853   03A5 3E 02       >            LD      A, w            ; 7-2
0853   03A7 3D          >            DEC     A               ; 4
0853   03A8 20 FD       >            JR      NZ, .loop       ; 12
0853   03AA ED 4F       >            LD      R, A
0853   03AC ED 4F       >            LD      R, A
0853   03AE 00          >            NOP
0854   03AF             
0855   03AF             ; $00+X
0856   03AF                         sampleOutput                ;                       ' 36    | 36
0856   03AF D9          >            EXX                     ;                           ' 4     | 4
0856   03B0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0856   03B1 03          >            INC     BC              ; increment read address    ' 6     |
0856   03B2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0856   03B4 12          >            LD      (DE), A         ; play sample               ' 7     |
0856   03B5 D9          >            EXX                     ;                           ' 4     | (36)
0857   03B6             
0858   03B6 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0859   03B8 E2 D4 03                JP      PO, .fst_part_d0    ;                       ' 10    | 27 (63)
0860   03BB ED A0                   LDI                         ;                       ' 16+1  |
0861   03BD E2 DA 03                JP      PO, .fst_part_d1    ;                       ' 10    | 27 (90)
0862   03C0 ED A0                   LDI                         ;                       ' 16+1  |
0863   03C2 E2 E0 03                JP      PO, .fst_part_d2    ;                       ' 10    | 27 (117)
0864   03C5 ED A0                   LDI                         ;                       ' 16+1  |
0865   03C7 E2 E6 03                JP      PO, .fst_part_d3    ;                       ' 10    | 27 (144)
0866   03CA ED A0                   LDI                         ;                       ' 16+1  |
0867   03CC E2 EC 03                JP      PO, .fst_part_d4    ;                       ' 10    | 27 (171)
0868   03CF ED A0                   LDI                         ;                       ' 16+1  |
0869   03D1 C3 F2 03                JP      .fst_part_d5        ;                       ' 10    | 27 (198)
0870   03D4             
0871   03D4             .fst_part_d0
0872   03D4                         wait27                      ; sync                  ' 27    | (90)
0872   03D4 ED 4F       >            LD      R, A
0872   03D6 ED 4F       >            LD      R, A
0872   03D8 ED 4F       >            LD      R, A
0873   03DA             .fst_part_d1
0874   03DA                         wait27                      ; sync                  ' 27    | (117)
0874   03DA ED 4F       >            LD      R, A
0874   03DC ED 4F       >            LD      R, A
0874   03DE ED 4F       >            LD      R, A
0875   03E0             .fst_part_d2
0876   03E0                         wait27                      ; sync                  ' 27    | (144)
0876   03E0 ED 4F       >            LD      R, A
0876   03E2 ED 4F       >            LD      R, A
0876   03E4 ED 4F       >            LD      R, A
0877   03E6             .fst_part_d3
0878   03E6                         wait27                      ; sync                  ' 27    | (171)
0878   03E6 ED 4F       >            LD      R, A
0878   03E8 ED 4F       >            LD      R, A
0878   03EA ED 4F       >            LD      R, A
0879   03EC             .fst_part_d4
0880   03EC                         wait27                      ; sync                  ' 27    | (198)
0880   03EC ED 4F       >            LD      R, A
0880   03EE ED 4F       >            LD      R, A
0880   03F0 ED 4F       >            LD      R, A
0881   03F2             .fst_part_d5
0882   03F2                         wait13                      ; sync                  ' 13    | (211)
0882   03F2 ED 4F       >            LD      R, A
0882   03F4 00          >            NOP
0883   03F5             
0884   03F5             .second_part                            ;                       ' 211
0885   03F5 00                      NOP                         ; sync                  ' 4
0886   03F6 FD 7C                   LD      A, IYH              ; A = second part size  ' 8     |
0887   03F8 B7                      OR      A                   ;                       ' 4     | 26 (237)
0888   03F9 CA D8 04                JP      Z, end_prep_xgm     ; done                  ' 10    |
0889   03FC             
0890   03FC                         wait17                      ; sync                  ' 17    | 254
0890   03FC C3 FF 03    >            JP      .loop
0890   03FF 3E 00       >            LD      A, $0
0891   0401             
0892   0401             ; $00+X
0893   0401                         sampleOutput                ;                       ' 36    | 36
0893   0401 D9          >            EXX                     ;                           ' 4     | 4
0893   0402 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0893   0403 03          >            INC     BC              ; increment read address    ' 6     |
0893   0404 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0893   0406 12          >            LD      (DE), A         ; play sample               ' 7     |
0893   0407 D9          >            EXX                     ;                           ' 4     | (36)
0894   0408             
0895   0408 2A 34 01                LD      HL, (XGM_ADDR)      ; XGM addr (b0-b15)     ' 16    |
0896   040B 7C                      LD      A, H                ; A = XGM addr (b8-b15) ' 4     |
0897   040C 17                      RLA                         ; CF = XGM addr b15     ' 4     | 146 (182)
0898   040D 3A 36 01                LD      A, (XGM_ADDR+2)     ; A = sample addr (H)   ' 13    |
0899   0410 17                      RLA                         ; sample addr (b22-b15) ' 4     |
0900   0411                         setBank_BC                  ; setBank               ' 105   |
0900   0411 01 00 60    >            LD  BC, BANKREG         ; BC = BANKREG              ' 10
0900   0414 02          >            LD  (BC), A             ; #1 (bit 15)               ' 7
0900   0415 1F          >            RRA                     ;                           ' 4
0900   0416 02          >            LD  (BC), A             ; #2 (bit 16)               ' 7
0900   0417 1F          >            RRA                     ;                           ' 4
0900   0418 02          >            LD  (BC), A             ; #3 (bit 17)               ' 7
0900   0419 1F          >            RRA                     ;                           ' 4
0900   041A 02          >            LD  (BC), A             ; #4 (bit 18)               ' 7
0900   041B 1F          >            RRA                     ;                           ' 4
0900   041C 02          >            LD  (BC), A             ; #5 (bit 19)               ' 7
0900   041D 1F          >            RRA                     ;                           ' 4
0900   041E 02          >            LD  (BC), A             ; #6 (bit 20)               ' 7
0900   041F 1F          >            RRA                     ;                           ' 4
0900   0420 02          >            LD  (BC), A             ; #7 (bit 21)               ' 7
0900   0421 1F          >            RRA                     ;                           ' 4
0900   0422 02          >            LD  (BC), A             ; #8 (bit 22)               ' 7
0900   0423 1F          >            RRA                     ;                           ' 4
0900   0424 02          >            LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0901   0425             
0902   0425 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     | 15 (197)
0903   0427 2E 00                   LD      L, 0                ;                       ' 7     |
0904   0429             
0905   0429                         wait21                      ; sync                  ' 21    | (218)
0905   0429 18 00       >            JR      .loop
0905   042B ED 4F       >            LD      R, A
0906   042D             
0907   042D 06 00                   LD      B, 0                ; B = 0                 ' 7     |
0908   042F FD 4C                   LD      C, IYH              ; BC = second part size ' 8     |
0909   0431 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     | 36 (254)
0910   0433 B9                      CP      C                   ; C < block size        ' 4     |
0911   0434 D2 5D 04                JP      NC, .sec_part_end   ; go to last bytes      ' 10    |
0912   0437             
0913   0437             ; $00+X
0914   0437             .sec_part_loop
0915   0437                         sampleOutput                ;                       ' 36    | 36
0915   0437 D9          >            EXX                     ;                           ' 4     | 4
0915   0438 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0915   0439 03          >            INC     BC              ; increment read address    ' 6     |
0915   043A CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0915   043C 12          >            LD      (DE), A         ; play sample               ' 7     |
0915   043D D9          >            EXX                     ;                           ' 4     | (36)
0916   043E             
0917   043E ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0918   0440 ED A0                   LDI                         ; 11 bytes at once      ' 16+1  |
0919   0442 ED A0                   LDI                         ;                       ' 16+1  |
0920   0444 ED A0                   LDI                         ;                       ' 16+1  |
0921   0446 ED A0                   LDI                         ;                       ' 16+1  |
0922   0448 ED A0                   LDI                         ;                       ' 16+1  | 187 (223)
0923   044A ED A0                   LDI                         ;                       ' 16+1  |
0924   044C ED A0                   LDI                         ;                       ' 16+1  |
0925   044E ED A0                   LDI                         ;                       ' 16+1  |
0926   0450 ED A0                   LDI                         ;                       ' 16+1  |
0927   0452 ED A0                   LDI                         ;                       ' 16+1  |
0928   0454             
0929   0454                         wait10                      ; sync                  ' 10    |
0929   0454 C3 57 04    >            JP      .loop
0930   0457 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0931   0459 B9                      CP      C                   ; remaining > 11        ' 4     | 31 (254)
0932   045A DA 37 04                JP      C, .sec_part_loop   ; continu block fill    ' 10    |
0933   045D             
0934   045D             .sec_part_end
0935   045D             ; $00+X
0936   045D                         sampleOutput                ;                       ' 36    | 36
0936   045D D9          >            EXX                     ;                           ' 4     | 4
0936   045E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0936   045F 03          >            INC     BC              ; increment read address    ' 6     |
0936   0460 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0936   0462 12          >            LD      (DE), A         ; play sample               ' 7     |
0936   0463 D9          >            EXX                     ;                           ' 4     | (36)
0937   0464             
0938   0464 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0939   0466 E2 B1 04                JP      PO, .sec_part_d0    ;                       ' 10    | 27 (63)
0940   0469 ED A0                   LDI                         ;                       ' 16+1  |
0941   046B E2 B7 04                JP      PO, .sec_part_d1    ;                       ' 10    | 27 (90)
0942   046E ED A0                   LDI                         ;                       ' 16+1  |
0943   0470 E2 BD 04                JP      PO, .sec_part_d2    ;                       ' 10    | 27 (117)
0944   0473 ED A0                   LDI                         ;                       ' 16+1  |
0945   0475 E2 C3 04                JP      PO, .sec_part_d3    ;                       ' 10    | 27 (144)
0946   0478 ED A0                   LDI                         ;                       ' 16+1  |
0947   047A E2 C9 04                JP      PO, .sec_part_d4    ;                       ' 10    | 27 (171)
0948   047D ED A0                   LDI                         ;                       ' 16+1  |
0949   047F E2 CF 04                JP      PO, .sec_part_d5    ;                       ' 10    | 27 (198)
0950   0482             
0951   0482                         wait56                      ; sync                  ' 56    | (254)
0951   0482 3E 02       >            LD      A, w            ; 7-2
0951   0484 3D          >            DEC     A               ; 4
0951   0485 20 FD       >            JR      NZ, .loop       ; 12
0951   0487 ED 4F       >            LD      R, A
0951   0489 ED 4F       >            LD      R, A
0951   048B 00          >            NOP
0952   048C             
0953   048C             ; $00+X
0954   048C                         sampleOutput                ;                       ' 36    | 36
0954   048C D9          >            EXX                     ;                           ' 4     | 4
0954   048D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0954   048E 03          >            INC     BC              ; increment read address    ' 6     |
0954   048F CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0954   0491 12          >            LD      (DE), A         ; play sample               ' 7     |
0954   0492 D9          >            EXX                     ;                           ' 4     | (36)
0955   0493             
0956   0493 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0957   0495 E2 B1 04                JP      PO, .sec_part_d0    ;                       ' 10    | 27 (63)
0958   0498 ED A0                   LDI                         ;                       ' 16+1  |
0959   049A E2 B7 04                JP      PO, .sec_part_d1    ;                       ' 10    | 27 (90)
0960   049D ED A0                   LDI                         ;                       ' 16+1  |
0961   049F E2 BD 04                JP      PO, .sec_part_d2    ;                       ' 10    | 27 (117)
0962   04A2 ED A0                   LDI                         ;                       ' 16+1  |
0963   04A4 E2 C3 04                JP      PO, .sec_part_d3    ;                       ' 10    | 27 (144)
0964   04A7 ED A0                   LDI                         ;                       ' 16+1  |
0965   04A9 E2 C9 04                JP      PO, .sec_part_d4    ;                       ' 10    | 27 (171)
0966   04AC ED A0                   LDI                         ;                       ' 16+1  |
0967   04AE C3 CF 04                JP      .sec_part_d5        ;                       ' 10    | 27 (198)
0968   04B1             
0969   04B1             .sec_part_d0
0970   04B1                         wait27                      ; sync                  '       | (90)
0970   04B1 ED 4F       >            LD      R, A
0970   04B3 ED 4F       >            LD      R, A
0970   04B5 ED 4F       >            LD      R, A
0971   04B7             .sec_part_d1
0972   04B7                         wait27                      ; sync                  '       | (117)
0972   04B7 ED 4F       >            LD      R, A
0972   04B9 ED 4F       >            LD      R, A
0972   04BB ED 4F       >            LD      R, A
0973   04BD             .sec_part_d2
0974   04BD                         wait27                      ; sync                  '       | (144)
0974   04BD ED 4F       >            LD      R, A
0974   04BF ED 4F       >            LD      R, A
0974   04C1 ED 4F       >            LD      R, A
0975   04C3             .sec_part_d3
0976   04C3                         wait27                      ; sync                  '       | (171)
0976   04C3 ED 4F       >            LD      R, A
0976   04C5 ED 4F       >            LD      R, A
0976   04C7 ED 4F       >            LD      R, A
0977   04C9             .sec_part_d4
0978   04C9                         wait27                      ; sync                  '       | (198)
0978   04C9 ED 4F       >            LD      R, A
0978   04CB ED 4F       >            LD      R, A
0978   04CD ED 4F       >            LD      R, A
0979   04CF             .sec_part_d5
0980   04CF                         wait35                      ; sync                  ' 35    |
0980   04CF 18 00       >            JR      .loop
0980   04D1 ED 4F       >            LD      R, A
0980   04D3 3E 00       >            LD      A, $0
0980   04D5 3E 00       >            LD      A, $0
0981   04D7 AF                      XOR     A                   ; A = 0                 ' 4     | 39 (237)
0982   04D8             
0983   04D8             end_prep_xgm                            ;                       ' 237
0984   04D8 12                      LD      (DE), A             ; XGM buf end with 0    ' 7     |
0985   04D9                         wait10                      ; sync                  ' 10    | 17 (254)
0985   04D9 C3 DC 04    >            JP      .loop
0986   04DC             
0987   04DC             
0988   04DC             ; XGM PREP DONE
0989   04DC             ; -------------
0990   04DC             
0991   04DC             ; $01+x
0992   04DC                         sampleOutput                ;                       ' 36    | (36)
0992   04DC D9          >            EXX                     ;                           ' 4     | 4
0992   04DD 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0992   04DE 03          >            INC     BC              ; increment read address    ' 6     |
0992   04DF CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0992   04E1 12          >            LD      (DE), A         ; play sample               ' 7     |
0992   04E2 D9          >            EXX                     ;                           ' 4     | (36)
0993   04E3             
0994   04E3                         wait172                     ; sync                  ' 172   | (208)
0994   04E3 3E 0A       >            LD      A, w            ; 7-2
0994   04E5 3D          >            DEC     A               ; 4
0994   04E6 20 FD       >            JR      NZ, .loop       ; 12
0994   04E8 C3 EB 04    >            JP      .loop
0995   04EB             
0996   04EB ED 5B 38 01             LD      DE, (WRITEBUF)      ; DE = write buf        ' 20    |
0997   04EF                         compareReadWrite            ; PCM buffer full ?     ' 16    | 46 (254)
0997   04EF D9          >            EXX                     ;                           ' 4     |
0997   04F0 78          >            LD      A, B            ; A = read buffer high      ' 4     |
0997   04F1 D9          >            EXX                     ;                           ' 4     | 16
0997   04F2 BA          >            CP      D               ; compare write buffer high ' 4     |
0998   04F3 CA C7 09                JP      Z, sync_frame       ; go to sync directly   ' 10    |
0999   04F6             
1000   04F6             pcm_mix
1001   04F6             
1002   04F6             ; PCM channel 0
1003   04F6             ; -------------
1004   04F6             
1005   04F6             ; $02+X
1006   04F6                         sampleOutput                ;                       ' 36    |
1006   04F6 D9          >            EXX                     ;                           ' 4     | 4
1006   04F7 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1006   04F8 03          >            INC     BC              ; increment read address    ' 6     |
1006   04F9 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1006   04FB 12          >            LD      (DE), A         ; play sample               ' 7     |
1006   04FC D9          >            EXX                     ;                           ' 4     | (36)
1007   04FD                         prepareChannelAlt 0         ;                       ' 176   |
1007   04FD 2A 16 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1007   0500 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1007   0501 17          >            RLA                             ; C flag = bit 15       ' 4     |
1007   0502 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1007   0503 17          >            RLA                             ; A = bit 15-22         ' 4     |
1007   0504 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1007   0507 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1007   0508 1F          >            RRA                     ;                           ' 4
1007   0509 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1007   050A 1F          >            RRA                     ;                           ' 4
1007   050B 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1007   050C 1F          >            RRA                     ;                           ' 4
1007   050D 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1007   050E 1F          >            RRA                     ;                           ' 4
1007   050F 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1007   0510 1F          >            RRA                     ;                           ' 4
1007   0511 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1007   0512 1F          >            RRA                     ;                           ' 4
1007   0513 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1007   0514 1F          >            RRA                     ;                           ' 4
1007   0515 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1007   0516 1F          >            RRA                     ;                           ' 4
1007   0517 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1007   0518 65          >            LD      H, L                    ;                       ' 4     |
1007   0519 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
1007   051B 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1007   051D ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
1008   0521 01 F2 00                LD      BC, 242             ; prepare loop counter  ' 10    | 254
1009   0524                         wait32                      ; sync                  ' 32    |
1009   0524 3E 00       >            LD      A, $0
1009   0526 00          >            NOP
1009   0527 ED 4F       >            LD      R, A
1009   0529 18 00       >            JR      .loop
1010   052B             
1011   052B             ; $03-$18+X
1012   052B             .loop_ch0
1013   052B                         sampleOutput                ;                       ' 36    |
1013   052B D9          >            EXX                     ;                           ' 4     | 4
1013   052C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1013   052D 03          >            INC     BC              ; increment read address    ' 6     |
1013   052E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1013   0530 12          >            LD      (DE), A         ; play sample               ' 7     |
1013   0531 D9          >            EXX                     ;                           ' 4     | (36)
1014   0532                         readAndClear2               ;                       ' 38    |
1014   0532 ED A0       >            LDI                     ;                           ' 16+3  |
1014   0534 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1015   0536                         readAndClear2               ; process 11 samples    ' 38    |
1015   0536 ED A0       >            LDI                     ;                           ' 16+3  |
1015   0538 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1016   053A                         readAndClear2               ;                       ' 38    | 254-1
1016   053A ED A0       >            LDI                     ;                           ' 16+3  |
1016   053C ED A0       >            LDI                     ;                           ' 16+3  | (38)
1017   053E                         readAndClear2               ;                       ' 38    |
1017   053E ED A0       >            LDI                     ;                           ' 16+3  |
1017   0540 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1018   0542                         readAndClear2               ;                       ' 38    |
1018   0542 ED A0       >            LDI                     ;                           ' 16+3  |
1018   0544 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1019   0546                         readAndClear                ;                       ' 19    |
1019   0546 ED A0       >            LDI                     ;                           ' 16+3  | 19
1020   0548                         wait8                       ; sync                  ' 8     |
1020   0548 00          >            NOP
1020   0549 00          >            NOP
1021   054A             
1022   054A                         sampleOutput                ; -1 --> a bit early    ' 36    |
1022   054A D9          >            EXX                     ;                           ' 4     | 4
1022   054B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1022   054C 03          >            INC     BC              ; increment read address    ' 6     |
1022   054D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1022   054F 12          >            LD      (DE), A         ; play sample               ' 7     |
1022   0550 D9          >            EXX                     ;                           ' 4     | (36)
1023   0551                         readAndClear2               ;                       ' 38    |
1023   0551 ED A0       >            LDI                     ;                           ' 16+3  |
1023   0553 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1024   0555                         readAndClear2               ; process 11 samples    ' 38    |
1024   0555 ED A0       >            LDI                     ;                           ' 16+3  |
1024   0557 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1025   0559                         readAndClear2               ;                       ' 38    | 254+1
1025   0559 ED A0       >            LDI                     ;                           ' 16+3  |
1025   055B ED A0       >            LDI                     ;                           ' 16+3  | (38)
1026   055D                         readAndClear2               ;                       ' 38    |
1026   055D ED A0       >            LDI                     ;                           ' 16+3  |
1026   055F ED A0       >            LDI                     ;                           ' 16+3  | (38)
1027   0561                         readAndClear2               ;                       ' 38    |
1027   0561 ED A0       >            LDI                     ;                           ' 16+3  |
1027   0563 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1028   0565                         readAndClear                ;                       ' 19    |
1028   0565 ED A0       >            LDI                     ;                           ' 16+3  | 19
1029   0567 EA 2B 05                JP      PE, .loop_ch0       ;                       ' 10    |
1030   056A             
1031   056A             ; $19+X
1032   056A                         sampleOutput                ;                       ' 36    |
1032   056A D9          >            EXX                     ;                           ' 4     | 4
1032   056B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1032   056C 03          >            INC     BC              ; increment read address    ' 6     |
1032   056D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1032   056F 12          >            LD      (DE), A         ; play sample               ' 7     |
1032   0570 D9          >            EXX                     ;                           ' 4     | (36)
1033   0571                         readAndClear2               ;                       ' 38    |
1033   0571 ED A0       >            LDI                     ;                           ' 16+3  |
1033   0573 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1034   0575                         readAndClear2               ; process 10 samples    ' 38    |
1034   0575 ED A0       >            LDI                     ;                           ' 16+3  |
1034   0577 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1035   0579                         readAndClear2               ;                       ' 38    | 254+10
1035   0579 ED A0       >            LDI                     ;                           ' 16+3  |
1035   057B ED A0       >            LDI                     ;                           ' 16+3  | (38)
1036   057D                         readAndClear2               ;                       ' 38    |
1036   057D ED A0       >            LDI                     ;                           ' 16+3  |
1036   057F ED A0       >            LDI                     ;                           ' 16+3  | (38)
1037   0581                         readAndClear2               ;                       ' 38    |
1037   0581 ED A0       >            LDI                     ;                           ' 16+3  |
1037   0583 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1038   0585                         readAndClear2               ;                       ' 38    |
1038   0585 ED A0       >            LDI                     ;                           ' 16+3  |
1038   0587 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1039   0589             
1040   0589             ; $1A+X
1041   0589                         sampleOutput                ; +10 --> too late      ' 36+10 |
1041   0589 D9          >            EXX                     ;                           ' 4     | 4
1041   058A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1041   058B 03          >            INC     BC              ; increment read address    ' 6     |
1041   058C CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1041   058E 12          >            LD      (DE), A         ; play sample               ' 7     |
1041   058F D9          >            EXX                     ;                           ' 4     | (36)
1042   0590                         readAndClear2               ;                       ' 38    |
1042   0590 ED A0       >            LDI                     ;                           ' 16+3  |
1042   0592 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1043   0594                         updateChannelData 0         ; update channel data   ' 153   | 254
1043   0594 2A 16 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1043   0597 23          >            INC     HL                      ;                       ' 6     | (38)
1043   0598 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1043   059B 2A 18 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1043   059E 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1043   059F 7C          >            LD      A, H                    ;                       ' 4     |
1043   05A0 B5          >            OR      L                       ;                       ' 4     | 18 (78)
1043   05A1 CA B5 05    >            JP      Z, .done                ; sample done ?         ' 10    |
1043   05A4 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1043   05A7 ED 4F       >            LD      R, A
1043   05A9 ED 4F       >            LD      R, A
1043   05AB ED 4F       >            LD      R, A
1043   05AD ED 4F       >            LD      R, A
1043   05AF ED 4F       >            LD      R, A
1043   05B1 00          >            NOP
1043   05B2 C3 C5 05    >            JP      .end                    ;                       ' 10    |
1043   05B5 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1043   05B8 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1043   05BB 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1043   05BE 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1043   05C1 AF          >            XOR     A                       ;                           ' 4     |
1043   05C2 32 14 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1044   05C5                         wait17                      ; sync                  ' 17    |
1044   05C5 C3 C8 05    >            JP      .loop
1044   05C8 3E 00       >            LD      A, $0
1045   05CA             
1046   05CA             
1047   05CA             ;    LD  A, (VCOUNTER)
1048   05CA             ;    LD  (DEBUG_2), A
1049   05CA             
1050   05CA             ; PCM channel 1
1051   05CA             ; -------------
1052   05CA             
1053   05CA             ; $1B+X
1054   05CA                         sampleOutput                ;                       ' 36    |
1054   05CA D9          >            EXX                     ;                           ' 4     | 4
1054   05CB 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1054   05CC 03          >            INC     BC              ; increment read address    ' 6     |
1054   05CD CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1054   05CF 12          >            LD      (DE), A         ; play sample               ' 7     |
1054   05D0 D9          >            EXX                     ;                           ' 4     | (36)
1055   05D1                         prepareChannel 1            ;                       ' 178   | 254
1055   05D1 2A 1E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1055   05D4 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1055   05D5 17          >            RLA                             ; C flag = bit 15       ' 4     |
1055   05D6 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1055   05D7 17          >            RLA                             ; A = bit 15-22         ' 4     |
1055   05D8 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1055   05DB 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1055   05DC 1F          >            RRA                     ;                           ' 4
1055   05DD 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1055   05DE 1F          >            RRA                     ;                           ' 4
1055   05DF 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1055   05E0 1F          >            RRA                     ;                           ' 4
1055   05E1 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1055   05E2 1F          >            RRA                     ;                           ' 4
1055   05E3 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1055   05E4 1F          >            RRA                     ;                           ' 4
1055   05E5 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1055   05E6 1F          >            RRA                     ;                           ' 4
1055   05E7 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1055   05E8 1F          >            RRA                     ;                           ' 4
1055   05E9 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1055   05EA 1F          >            RRA                     ;                           ' 4
1055   05EB 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1055   05EC 65          >            LD      H, L                    ;                       ' 4     |
1055   05ED CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 25 (162)
1055   05EF 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1055   05F1 F9          >            LD      SP, HL                  ; SP point on sample    ' 6     |
1055   05F2 2A 38 01    >            LD      HL, (WRITEBUF)          ; HL = write buffer     ' 16    | (178)
1056   05F5 01 80 10                LD      BC, $1080           ; prepare loop counter  ' 10    |
1057   05F8                         wait30                      ; sync                  ' 30    |
1057   05F8 18 00       >            JR      .loop
1057   05FA ED 4F       >            LD      R, A
1057   05FC ED 4F       >            LD      R, A
1058   05FE             
1059   05FE             ; $1C-4B+X
1060   05FE             .loop_ch1
1061   05FE                         readAndMix16WhilePlay3      ;                       ' 240   |
1061   05FE D9          >            EXX                     ;                           ' 4     | 4
1061   05FF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1061   0600 03          >            INC     BC              ; increment read address    ' 6     |
1061   0601 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1061   0603 12          >            LD      (DE), A         ; play sample               ' 7     |
1061   0604 D9          >            EXX                     ;                           ' 4     | (36)
1061   0605 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1061   0606 7B          >            LD      A, E            ; first sample              ' 4     |
1061   0607 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1061   0608 E2 0E 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   060B 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   060C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   060E 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   060F 2C          >            INC     L               ;                           ' 4     | 11 (48)
1061   0610 7A          >            LD      A, D            ; second sample             ' 4     |
1061   0611 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   0612 E2 18 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   0615 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0616 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0618 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   0619 2C          >            INC     L               ;                           ' 4     | 11 (80)
1061   061A D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1061   061B 7B          >            LD      A, E            ; first sample              ' 4     |
1061   061C 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1061   061D E2 23 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   0620 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0621 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0623 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   0624 2C          >            INC     L               ;                           ' 4     | 11 (48)
1061   0625 7A          >            LD      A, D            ; second sample             ' 4     |
1061   0626 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   0627 E2 2D 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   062A 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   062B CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   062D 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   062E 2C          >            INC     L               ;                           ' 4     | 11 (80)
1061   062F D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (212)
1061   0630 7B          >            LD      A, E            ; first sample              ' 4     |
1061   0631 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (233)
1061   0632 E2 38 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   0635 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0636 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0638 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   0639 2C          >            INC     L               ;                           ' 4     | 11 (254-10)
1061   063A D9          >            EXX                     ;                           ' 4     | 4
1061   063B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1061   063C 03          >            INC     BC              ; increment read address    ' 6     |
1061   063D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1061   063F 12          >            LD      (DE), A         ; play sample               ' 7     |
1061   0640 D9          >            EXX                     ;                           ' 4     | (36)
1061   0641 7A          >            LD      A, D            ; second sample             ' 4     |
1061   0642 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (47)
1061   0643 E2 49 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   0646 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0647 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0649 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   064A 2C          >            INC     L               ;                           ' 4     | 11 (58)
1061   064B D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1061   064C 7B          >            LD      A, E            ; first sample              ' 4     |
1061   064D 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1061   064E E2 54 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   0651 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0652 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0654 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   0655 2C          >            INC     L               ;                           ' 4     | 11 (48)
1061   0656 7A          >            LD      A, D            ; second sample             ' 4     |
1061   0657 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   0658 E2 5E 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   065B 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   065C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   065E 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   065F 2C          >            INC     L               ;                           ' 4     | 11 (80)
1061   0660 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1061   0661 7B          >            LD      A, E            ; first sample              ' 4     |
1061   0662 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1061   0663 E2 69 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   0666 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0667 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0669 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   066A 2C          >            INC     L               ;                           ' 4     | 11 (48)
1061   066B 7A          >            LD      A, D            ; second sample             ' 4     |
1061   066C 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   066D E2 73 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   0670 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0671 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   0673 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   0674 2C          >            INC     L               ;                           ' 4     | 11 (80)
1061   0675 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (234)
1061   0676 7B          >            LD      A, E            ; first sample              ' 4     |
1061   0677 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (254+1)
1061   0678 E2 7E 06    >            JP      PO, .ok3        ; check overflow            ' 10    |
1061   067B 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   067C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   067E 77          >            LD      (HL), A         ; store it in write sample  ' 7     | (254+8)
1061   067F D9          >            EXX                     ;                           ' 4     | 4
1061   0680 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1061   0681 03          >            INC     BC              ; increment read address    ' 6     |
1061   0682 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1061   0684 12          >            LD      (DE), A         ; play sample               ' 7     |
1061   0685 D9          >            EXX                     ;                           ' 4     | (36)
1061   0686 2C          >            INC     L               ;                           ' 4     | (48)
1061   0687 7A          >            LD      A, D            ; second sample             ' 4     |
1061   0688 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   0689 E2 8F 06    >            JP      PO, .ok4        ; check overflow            ' 10    |
1061   068C 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   068D CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   068F 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   0690 2C          >            INC     L               ;                           ' 4     | 11 (80)
1061   0691 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1061   0692 7B          >            LD      A, E            ; first sample              ' 4     |
1061   0693 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1061   0694 E2 9A 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   0697 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   0698 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   069A 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   069B 2C          >            INC     L               ;                           ' 4     | 11 (48)
1061   069C 7A          >            LD      A, D            ; second sample             ' 4     |
1061   069D 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   069E E2 A4 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   06A1 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   06A2 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   06A4 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   06A5 2C          >            INC     L               ;                           ' 4     | 11 (80)
1061   06A6 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1061   06A7 7B          >            LD      A, E            ; first sample              ' 4     |
1061   06A8 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1061   06A9 E2 AF 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1061   06AC 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   06AD CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   06AF 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   06B0 2C          >            INC     L               ;                           ' 4     | 11 (48)
1061   06B1 7A          >            LD      A, D            ; second sample             ' 4     |
1061   06B2 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1061   06B3 E2 B9 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1061   06B6 79          >            LD      A, C            ; fix overflow              ' 4     |
1061   06B7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1061   06B9 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1061   06BA 2C          >            INC     L               ;                           ' 4     | 11 (80)
1062   06BB 05                      DEC     B                   ;                       ' 4     | 254*3
1063   06BC C2 FE 05                JP      NZ, .loop_ch1       ;                       ' 10    |
1064   06BF             
1065   06BF             ; $4C+X
1066   06BF                         sampleOutput                ;                       ' 36    |
1066   06BF D9          >            EXX                     ;                           ' 4     | 4
1066   06C0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1066   06C1 03          >            INC     BC              ; increment read address    ' 6     |
1066   06C2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1066   06C4 12          >            LD      (DE), A         ; play sample               ' 7     |
1066   06C5 D9          >            EXX                     ;                           ' 4     | (36)
1067   06C6                         updateChannelData 1         ; update channel data   ' 153   | 254
1067   06C6 2A 1E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1067   06C9 23          >            INC     HL                      ;                       ' 6     | (38)
1067   06CA 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1067   06CD 2A 20 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1067   06D0 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1067   06D1 7C          >            LD      A, H                    ;                       ' 4     |
1067   06D2 B5          >            OR      L                       ;                       ' 4     | 18 (78)
1067   06D3 CA E7 06    >            JP      Z, .done                ; sample done ?         ' 10    |
1067   06D6 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1067   06D9 ED 4F       >            LD      R, A
1067   06DB ED 4F       >            LD      R, A
1067   06DD ED 4F       >            LD      R, A
1067   06DF ED 4F       >            LD      R, A
1067   06E1 ED 4F       >            LD      R, A
1067   06E3 00          >            NOP
1067   06E4 C3 F7 06    >            JP      .end                    ;                       ' 10    |
1067   06E7 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1067   06EA 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1067   06ED 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1067   06F0 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1067   06F3 AF          >            XOR     A                       ;                           ' 4     |
1067   06F4 32 1C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1068   06F7                         wait65                      ; sync                  ' 65    |
1068   06F7 3E 03       >            LD      A, w            ; 7-2
1068   06F9 3D          >            DEC     A               ; 4
1068   06FA 20 FD       >            JR      NZ, .loop       ; 12
1068   06FC 00          >            NOP
1068   06FD 00          >            NOP
1068   06FE 3E 00       >            LD      A, $0
1069   0700             
1070   0700             
1071   0700             ;    LD  A, (VCOUNTER)
1072   0700             ;    LD  (DEBUG_3), A
1073   0700             
1074   0700             ; PCM channel 2
1075   0700             ; -------------
1076   0700             
1077   0700             ; $4D+X
1078   0700                         sampleOutput                ;                       ' 36    |
1078   0700 D9          >            EXX                     ;                           ' 4     | 4
1078   0701 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1078   0702 03          >            INC     BC              ; increment read address    ' 6     |
1078   0703 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1078   0705 12          >            LD      (DE), A         ; play sample               ' 7     |
1078   0706 D9          >            EXX                     ;                           ' 4     | (36)
1079   0707                         prepareChannel 2            ;                       ' 178   | 254
1079   0707 2A 26 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1079   070A 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1079   070B 17          >            RLA                             ; C flag = bit 15       ' 4     |
1079   070C 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1079   070D 17          >            RLA                             ; A = bit 15-22         ' 4     |
1079   070E 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1079   0711 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1079   0712 1F          >            RRA                     ;                           ' 4
1079   0713 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1079   0714 1F          >            RRA                     ;                           ' 4
1079   0715 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1079   0716 1F          >            RRA                     ;                           ' 4
1079   0717 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1079   0718 1F          >            RRA                     ;                           ' 4
1079   0719 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1079   071A 1F          >            RRA                     ;                           ' 4
1079   071B 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1079   071C 1F          >            RRA                     ;                           ' 4
1079   071D 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1079   071E 1F          >            RRA                     ;                           ' 4
1079   071F 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1079   0720 1F          >            RRA                     ;                           ' 4
1079   0721 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1079   0722 65          >            LD      H, L                    ;                       ' 4     |
1079   0723 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 25 (162)
1079   0725 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1079   0727 F9          >            LD      SP, HL                  ; SP point on sample    ' 6     |
1079   0728 2A 38 01    >            LD      HL, (WRITEBUF)          ; HL = write buffer     ' 16    | (178)
1080   072B 01 80 10                LD      BC, $1080           ; prepare loop counter  ' 10    |
1081   072E                         wait30                      ; sync                  ' 30    |
1081   072E 18 00       >            JR      .loop
1081   0730 ED 4F       >            LD      R, A
1081   0732 ED 4F       >            LD      R, A
1082   0734             
1083   0734             ; $4E-7D+X
1084   0734             .loop_ch2
1085   0734                         readAndMix16WhilePlay3      ;                       ' 240   |
1085   0734 D9          >            EXX                     ;                           ' 4     | 4
1085   0735 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1085   0736 03          >            INC     BC              ; increment read address    ' 6     |
1085   0737 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1085   0739 12          >            LD      (DE), A         ; play sample               ' 7     |
1085   073A D9          >            EXX                     ;                           ' 4     | (36)
1085   073B D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1085   073C 7B          >            LD      A, E            ; first sample              ' 4     |
1085   073D 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1085   073E E2 44 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   0741 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   0742 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   0744 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   0745 2C          >            INC     L               ;                           ' 4     | 11 (48)
1085   0746 7A          >            LD      A, D            ; second sample             ' 4     |
1085   0747 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   0748 E2 4E 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   074B 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   074C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   074E 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   074F 2C          >            INC     L               ;                           ' 4     | 11 (80)
1085   0750 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1085   0751 7B          >            LD      A, E            ; first sample              ' 4     |
1085   0752 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1085   0753 E2 59 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   0756 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   0757 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   0759 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   075A 2C          >            INC     L               ;                           ' 4     | 11 (48)
1085   075B 7A          >            LD      A, D            ; second sample             ' 4     |
1085   075C 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   075D E2 63 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   0760 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   0761 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   0763 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   0764 2C          >            INC     L               ;                           ' 4     | 11 (80)
1085   0765 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (212)
1085   0766 7B          >            LD      A, E            ; first sample              ' 4     |
1085   0767 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (233)
1085   0768 E2 6E 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   076B 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   076C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   076E 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   076F 2C          >            INC     L               ;                           ' 4     | 11 (254-10)
1085   0770 D9          >            EXX                     ;                           ' 4     | 4
1085   0771 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1085   0772 03          >            INC     BC              ; increment read address    ' 6     |
1085   0773 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1085   0775 12          >            LD      (DE), A         ; play sample               ' 7     |
1085   0776 D9          >            EXX                     ;                           ' 4     | (36)
1085   0777 7A          >            LD      A, D            ; second sample             ' 4     |
1085   0778 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (47)
1085   0779 E2 7F 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   077C 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   077D CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   077F 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   0780 2C          >            INC     L               ;                           ' 4     | 11 (58)
1085   0781 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1085   0782 7B          >            LD      A, E            ; first sample              ' 4     |
1085   0783 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1085   0784 E2 8A 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   0787 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   0788 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   078A 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   078B 2C          >            INC     L               ;                           ' 4     | 11 (48)
1085   078C 7A          >            LD      A, D            ; second sample             ' 4     |
1085   078D 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   078E E2 94 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   0791 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   0792 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   0794 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   0795 2C          >            INC     L               ;                           ' 4     | 11 (80)
1085   0796 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1085   0797 7B          >            LD      A, E            ; first sample              ' 4     |
1085   0798 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1085   0799 E2 9F 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   079C 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   079D CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   079F 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07A0 2C          >            INC     L               ;                           ' 4     | 11 (48)
1085   07A1 7A          >            LD      A, D            ; second sample             ' 4     |
1085   07A2 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   07A3 E2 A9 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   07A6 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07A7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07A9 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07AA 2C          >            INC     L               ;                           ' 4     | 11 (80)
1085   07AB D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (234)
1085   07AC 7B          >            LD      A, E            ; first sample              ' 4     |
1085   07AD 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (254+1)
1085   07AE E2 B4 07    >            JP      PO, .ok3        ; check overflow            ' 10    |
1085   07B1 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07B2 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07B4 77          >            LD      (HL), A         ; store it in write sample  ' 7     | (254+8)
1085   07B5 D9          >            EXX                     ;                           ' 4     | 4
1085   07B6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1085   07B7 03          >            INC     BC              ; increment read address    ' 6     |
1085   07B8 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1085   07BA 12          >            LD      (DE), A         ; play sample               ' 7     |
1085   07BB D9          >            EXX                     ;                           ' 4     | (36)
1085   07BC 2C          >            INC     L               ;                           ' 4     | (48)
1085   07BD 7A          >            LD      A, D            ; second sample             ' 4     |
1085   07BE 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   07BF E2 C5 07    >            JP      PO, .ok4        ; check overflow            ' 10    |
1085   07C2 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07C3 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07C5 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07C6 2C          >            INC     L               ;                           ' 4     | 11 (80)
1085   07C7 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1085   07C8 7B          >            LD      A, E            ; first sample              ' 4     |
1085   07C9 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1085   07CA E2 D0 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   07CD 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07CE CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07D0 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07D1 2C          >            INC     L               ;                           ' 4     | 11 (48)
1085   07D2 7A          >            LD      A, D            ; second sample             ' 4     |
1085   07D3 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   07D4 E2 DA 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   07D7 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07D8 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07DA 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07DB 2C          >            INC     L               ;                           ' 4     | 11 (80)
1085   07DC D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1085   07DD 7B          >            LD      A, E            ; first sample              ' 4     |
1085   07DE 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1085   07DF E2 E5 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1085   07E2 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07E3 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07E5 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07E6 2C          >            INC     L               ;                           ' 4     | 11 (48)
1085   07E7 7A          >            LD      A, D            ; second sample             ' 4     |
1085   07E8 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1085   07E9 E2 EF 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1085   07EC 79          >            LD      A, C            ; fix overflow              ' 4     |
1085   07ED CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1085   07EF 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1085   07F0 2C          >            INC     L               ;                           ' 4     | 11 (80)
1086   07F1 05                      DEC     B                   ;                       ' 4     | 254*3
1087   07F2 C2 34 07                JP      NZ, .loop_ch2       ;                       ' 10    |
1088   07F5             
1089   07F5             ; $7E+X
1090   07F5                         sampleOutput                ;                       ' 36    |
1090   07F5 D9          >            EXX                     ;                           ' 4     | 4
1090   07F6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1090   07F7 03          >            INC     BC              ; increment read address    ' 6     |
1090   07F8 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1090   07FA 12          >            LD      (DE), A         ; play sample               ' 7     |
1090   07FB D9          >            EXX                     ;                           ' 4     | (36)
1091   07FC                         updateChannelData 2         ; update channel data   ' 153   | 254
1091   07FC 2A 26 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1091   07FF 23          >            INC     HL                      ;                       ' 6     | (38)
1091   0800 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1091   0803 2A 28 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1091   0806 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1091   0807 7C          >            LD      A, H                    ;                       ' 4     |
1091   0808 B5          >            OR      L                       ;                       ' 4     | 18 (78)
1091   0809 CA 1D 08    >            JP      Z, .done                ; sample done ?         ' 10    |
1091   080C 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1091   080F ED 4F       >            LD      R, A
1091   0811 ED 4F       >            LD      R, A
1091   0813 ED 4F       >            LD      R, A
1091   0815 ED 4F       >            LD      R, A
1091   0817 ED 4F       >            LD      R, A
1091   0819 00          >            NOP
1091   081A C3 2D 08    >            JP      .end                    ;                       ' 10    |
1091   081D 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1091   0820 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1091   0823 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1091   0826 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1091   0829 AF          >            XOR     A                       ;                           ' 4     |
1091   082A 32 24 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1092   082D                         wait65                      ; sync                  ' 65    |
1092   082D 3E 03       >            LD      A, w            ; 7-2
1092   082F 3D          >            DEC     A               ; 4
1092   0830 20 FD       >            JR      NZ, .loop       ; 12
1092   0832 00          >            NOP
1092   0833 00          >            NOP
1092   0834 3E 00       >            LD      A, $0
1093   0836             
1094   0836             
1095   0836             ;    LD  A, (VCOUNTER)
1096   0836             ;    LD  (DEBUG_4), A
1097   0836             
1098   0836             ; PCM channel 3
1099   0836             ; -------------
1100   0836             
1101   0836             ; $7F+X
1102   0836                         sampleOutput                ;                       ' 36    |
1102   0836 D9          >            EXX                     ;                           ' 4     | 4
1102   0837 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1102   0838 03          >            INC     BC              ; increment read address    ' 6     |
1102   0839 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1102   083B 12          >            LD      (DE), A         ; play sample               ' 7     |
1102   083C D9          >            EXX                     ;                           ' 4     | (36)
1103   083D                         prepareChannelAlt 3         ;                       ' 176   | 254
1103   083D 2A 2E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1103   0840 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1103   0841 17          >            RLA                             ; C flag = bit 15       ' 4     |
1103   0842 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1103   0843 17          >            RLA                             ; A = bit 15-22         ' 4     |
1103   0844 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1103   0847 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1103   0848 1F          >            RRA                     ;                           ' 4
1103   0849 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1103   084A 1F          >            RRA                     ;                           ' 4
1103   084B 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1103   084C 1F          >            RRA                     ;                           ' 4
1103   084D 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1103   084E 1F          >            RRA                     ;                           ' 4
1103   084F 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1103   0850 1F          >            RRA                     ;                           ' 4
1103   0851 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1103   0852 1F          >            RRA                     ;                           ' 4
1103   0853 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1103   0854 1F          >            RRA                     ;                           ' 4
1103   0855 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1103   0856 1F          >            RRA                     ;                           ' 4
1103   0857 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1103   0858 65          >            LD      H, L                    ;                       ' 4     |
1103   0859 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
1103   085B 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1103   085D ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
1104   0861 01 80 1C                LD      BC, $1C80           ; prepare loop counter  ' 10    |
1105   0864                         wait32                      ; sync                  ' 32    |
1105   0864 3E 00       >            LD      A, $0
1105   0866 00          >            NOP
1105   0867 ED 4F       >            LD      R, A
1105   0869 18 00       >            JR      .loop
1106   086B             
1107   086B             ; $80-$B7+X
1108   086B             .loop_ch3
1109   086B                         sampleOutput                ;                       ' 36    |
1109   086B D9          >            EXX                     ;                           ' 4     | 4
1109   086C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1109   086D 03          >            INC     BC              ; increment read address    ' 6     |
1109   086E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1109   0870 12          >            LD      (DE), A         ; play sample               ' 7     |
1109   0871 D9          >            EXX                     ;                           ' 4     | (36)
1110   0872                         readMixAndUnsign            ; mix/unsign 9 samples  ' 46    |
1110   0872 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1110   0873 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1110   0874 E2 7A 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1110   0877 79          >            LD      A, C            ; fix overflow              ' 4     |
1110   0878 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1110   087A 81          >            ADD     C               ; unsign                    ' 4     |
1110   087B 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1110   087C 1C          >            INC     E               ;                           ' 4     |
1110   087D 2C          >            INC     L               ; next                      ' 4     |
1111   087E                         readMixAndUnsign            ;                       ' 46    |
1111   087E 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1111   087F 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1111   0880 E2 86 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1111   0883 79          >            LD      A, C            ; fix overflow              ' 4     |
1111   0884 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1111   0886 81          >            ADD     C               ; unsign                    ' 4     |
1111   0887 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1111   0888 1C          >            INC     E               ;                           ' 4     |
1111   0889 2C          >            INC     L               ; next                      ' 4     |
1112   088A                         readMixAndUnsign            ;                       ' 46    | 254+12
1112   088A 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1112   088B 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1112   088C E2 92 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1112   088F 79          >            LD      A, C            ; fix overflow              ' 4     |
1112   0890 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1112   0892 81          >            ADD     C               ; unsign                    ' 4     |
1112   0893 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1112   0894 1C          >            INC     E               ;                           ' 4     |
1112   0895 2C          >            INC     L               ; next                      ' 4     |
1113   0896                         readMixAndUnsign            ;                       ' 46    |
1113   0896 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1113   0897 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1113   0898 E2 9E 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1113   089B 79          >            LD      A, C            ; fix overflow              ' 4     |
1113   089C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1113   089E 81          >            ADD     C               ; unsign                    ' 4     |
1113   089F 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1113   08A0 1C          >            INC     E               ;                           ' 4     |
1113   08A1 2C          >            INC     L               ; next                      ' 4     |
1114   08A2                         readMixAndUnsign            ;                       ' 46    |
1114   08A2 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1114   08A3 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1114   08A4 E2 AA 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1114   08A7 79          >            LD      A, C            ; fix overflow              ' 4     |
1114   08A8 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1114   08AA 81          >            ADD     C               ; unsign                    ' 4     |
1114   08AB 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1114   08AC 1C          >            INC     E               ;                           ' 4     |
1114   08AD 2C          >            INC     L               ; next                      ' 4     |
1115   08AE             
1116   08AE                         sampleOutput                ; +12 --> late          ' 36    |
1116   08AE D9          >            EXX                     ;                           ' 4     | 4
1116   08AF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1116   08B0 03          >            INC     BC              ; increment read address    ' 6     |
1116   08B1 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1116   08B3 12          >            LD      (DE), A         ; play sample               ' 7     |
1116   08B4 D9          >            EXX                     ;                           ' 4     | (36)
1117   08B5                         readMixAndUnsign            ;                       ' 46    |
1117   08B5 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1117   08B6 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1117   08B7 E2 BD 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1117   08BA 79          >            LD      A, C            ; fix overflow              ' 4     |
1117   08BB CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1117   08BD 81          >            ADD     C               ; unsign                    ' 4     |
1117   08BE 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1117   08BF 1C          >            INC     E               ;                           ' 4     |
1117   08C0 2C          >            INC     L               ; next                      ' 4     |
1118   08C1                         readMixAndUnsign            ;                       ' 46    |
1118   08C1 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1118   08C2 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1118   08C3 E2 C9 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1118   08C6 79          >            LD      A, C            ; fix overflow              ' 4     |
1118   08C7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1118   08C9 81          >            ADD     C               ; unsign                    ' 4     |
1118   08CA 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1118   08CB 1C          >            INC     E               ;                           ' 4     |
1118   08CC 2C          >            INC     L               ; next                      ' 4     |
1119   08CD                         readMixAndUnsign            ;                       ' 46    | 254
1119   08CD 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1119   08CE 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1119   08CF E2 D5 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1119   08D2 79          >            LD      A, C            ; fix overflow              ' 4     |
1119   08D3 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1119   08D5 81          >            ADD     C               ; unsign                    ' 4     |
1119   08D6 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1119   08D7 1C          >            INC     E               ;                           ' 4     |
1119   08D8 2C          >            INC     L               ; next                      ' 4     |
1120   08D9                         readMixAndUnsign            ;                       ' 46    |
1120   08D9 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1120   08DA 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1120   08DB E2 E1 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1120   08DE 79          >            LD      A, C            ; fix overflow              ' 4     |
1120   08DF CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1120   08E1 81          >            ADD     C               ; unsign                    ' 4     |
1120   08E2 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1120   08E3 1C          >            INC     E               ;                           ' 4     |
1120   08E4 2C          >            INC     L               ; next                      ' 4     |
1121   08E5                         wait8                       ; sync                  ' 8     |
1121   08E5 00          >            NOP
1121   08E6 00          >            NOP
1122   08E7 05                      DEC     B                   ;                       ' 4     |
1123   08E8 C2 6B 08                JP      NZ, .loop_ch3       ;                       ' 10    |
1124   08EB             
1125   08EB             ; $B8+X
1126   08EB                         sampleOutput                ;                       ' 36    |
1126   08EB D9          >            EXX                     ;                           ' 4     | 4
1126   08EC 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1126   08ED 03          >            INC     BC              ; increment read address    ' 6     |
1126   08EE CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1126   08F0 12          >            LD      (DE), A         ; play sample               ' 7     |
1126   08F1 D9          >            EXX                     ;                           ' 4     | (36)
1127   08F2                         readMixAndUnsign            ;                       ' 46    |
1127   08F2 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1127   08F3 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1127   08F4 E2 FA 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1127   08F7 79          >            LD      A, C            ; fix overflow              ' 4     |
1127   08F8 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1127   08FA 81          >            ADD     C               ; unsign                    ' 4     |
1127   08FB 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1127   08FC 1C          >            INC     E               ;                           ' 4     |
1127   08FD 2C          >            INC     L               ; next                      ' 4     |
1128   08FE                         readMixAndUnsign            ;                       ' 46    | 254
1128   08FE 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1128   08FF 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1128   0900 E2 06 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1128   0903 79          >            LD      A, C            ; fix overflow              ' 4     |
1128   0904 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1128   0906 81          >            ADD     C               ; unsign                    ' 4     |
1128   0907 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1128   0908 1C          >            INC     E               ;                           ' 4     |
1128   0909 2C          >            INC     L               ; next                      ' 4     |
1129   090A                         readMixAndUnsign            ;                       ' 46    |
1129   090A 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1129   090B 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1129   090C E2 12 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1129   090F 79          >            LD      A, C            ; fix overflow              ' 4     |
1129   0910 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1129   0912 81          >            ADD     C               ; unsign                    ' 4     |
1129   0913 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1129   0914 1C          >            INC     E               ;                           ' 4     |
1129   0915 2C          >            INC     L               ; next                      ' 4     |
1130   0916                         readMixAndUnsign            ;                       ' 46    |
1130   0916 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1130   0917 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1130   0918 E2 1E 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1130   091B 79          >            LD      A, C            ; fix overflow              ' 4     |
1130   091C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1130   091E 81          >            ADD     C               ; unsign                    ' 4     |
1130   091F 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1130   0920 1C          >            INC     E               ;                           ' 4     |
1130   0921 2C          >            INC     L               ; next                      ' 4     |
1131   0922                         wait34                      ;                       ' 34    |
1131   0922 3E 02       >            LD      A, w            ; 7-2
1131   0924 3D          >            DEC     A               ; 4
1131   0925 20 FD       >            JR      NZ, .loop       ; 12
1132   0927             
1133   0927             ; $B9+X
1134   0927                         sampleOutput                ;                       ' 36    |
1134   0927 D9          >            EXX                     ;                           ' 4     | 4
1134   0928 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1134   0929 03          >            INC     BC              ; increment read address    ' 6     |
1134   092A CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1134   092C 12          >            LD      (DE), A         ; play sample               ' 7     |
1134   092D D9          >            EXX                     ;                           ' 4     | (36)
1135   092E                         updateChannelData 3         ; update channel data   ' 153   | 254
1135   092E 2A 2E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1135   0931 23          >            INC     HL                      ;                       ' 6     | (38)
1135   0932 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1135   0935 2A 30 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1135   0938 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1135   0939 7C          >            LD      A, H                    ;                       ' 4     |
1135   093A B5          >            OR      L                       ;                       ' 4     | 18 (78)
1135   093B CA 4F 09    >            JP      Z, .done                ; sample done ?         ' 10    |
1135   093E 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1135   0941 ED 4F       >            LD      R, A
1135   0943 ED 4F       >            LD      R, A
1135   0945 ED 4F       >            LD      R, A
1135   0947 ED 4F       >            LD      R, A
1135   0949 ED 4F       >            LD      R, A
1135   094B 00          >            NOP
1135   094C C3 5F 09    >            JP      .end                    ;                       ' 10    |
1135   094F 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1135   0952 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1135   0955 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1135   0958 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1135   095B AF          >            XOR     A                       ;                           ' 4     |
1135   095C 32 2C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1136   095F                         wait65                      ; sync                  ' 65    |
1136   095F 3E 03       >            LD      A, w            ; 7-2
1136   0961 3D          >            DEC     A               ; 4
1136   0962 20 FD       >            JR      NZ, .loop       ; 12
1136   0964 00          >            NOP
1136   0965 00          >            NOP
1136   0966 3E 00       >            LD      A, $0
1137   0968             
1138   0968             
1139   0968             ;    LD  A, (VCOUNTER)
1140   0968             ;    LD  (DEBUG_5), A
1141   0968             
1142   0968             ; next write buffer
1143   0968             ; -----------------
1144   0968             
1145   0968             ; $BA+X
1146   0968             next_write_buf
1147   0968                         sampleOutput                ;                       ' 36    | 36
1147   0968 D9          >            EXX                     ;                           ' 4     | 4
1147   0969 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1147   096A 03          >            INC     BC              ; increment read address    ' 6     |
1147   096B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1147   096D 12          >            LD      (DE), A         ; play sample               ' 7     |
1147   096E D9          >            EXX                     ;                           ' 4     | (36)
1148   096F             
1149   096F 3A 02 01                LD      A, (STATUS)         ; A = (STATUS)          ' 13    |
1150   0972 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1151   0975 36 2B                   LD      (HL), $2B           ; register = DAC enable ' 10    | 54 (90)
1152   0977 2C                      INC     L                   ; HL point on YM port1  ' 4     |
1153   0978 E6 0F                   AND     $0F                 ; PCM is playing ?      ' 7     |
1154   097A C2 8D 09                JP      NZ, .still_pcm      ;                       ' 10    |
1155   097D             
1156   097D 3A 61 01                LD      A, (YM_2B_CNT)      ;                       ' 13    |
1157   0980 B7                      OR      A                   ;                       ' 4     | 27 (117)
1158   0981 CA 9E 09                JP      Z, .no_pcm          ; DAC enabled expired ? ' 10    |
1159   0984             
1160   0984 3D                      DEC     A                   ; decrement expiration  ' 4     |
1161   0985 32 61 01                LD      (YM_2B_CNT), A      ;                       ' 13    |
1162   0988 3E 80                   LD      A, $80              ; DAC enabled           ' 7     | 34 (151)
1163   098A C3 A5 09                JP      .set_dac            ; assume still PCM      ' 10    |
1164   098D             
1165   098D             .still_pcm                              ;                       ' 90
1166   098D                         wait7                       ; sync                  ' 7     |
1166   098D 3E 00       >            LD      A, $0
1167   098F 3E 03                   LD      A, 3                ; set DAC ON expiration ' 7     | 27 (117)
1168   0991 32 61 01                LD      (YM_2B_CNT), A      ; 4 frames to expire    ' 13    |
1169   0994             
1170   0994                         wait17                      ; sync                  ' 17    |
1170   0994 C3 97 09    >            JP      .loop
1170   0997 3E 00       >            LD      A, $0
1171   0999 3E 80                   LD      A, $80              ; DAC enabled           ' 7     | 34 (151)
1172   099B C3 A5 09                JP      .set_dac            ; assume still PCM      ' 10    |
1173   099E             
1174   099E             .no_pcm                                 ;                       ' 117
1175   099E                         wait21                      ; sync                  ' 21    |
1175   099E 18 00       >            JR      .loop
1175   09A0 ED 4F       >            LD      R, A
1176   09A2 3A 60 01                LD      A, (YM_2B_SAV)      ; use current DAC on    ' 13    | 34 (151)
1177   09A5             
1178   09A5             .set_dac                                ;                       ' 151
1179   09A5 77                      LD      (HL), A             ; set DAC enabled       ' 7     |
1180   09A6 2D                      DEC     L                   ; HL point on YM port0  ' 4     | 11 (162)
1181   09A7             
1182   09A7 D9                      EXX                         ;                       ' 4     |
1183   09A8 78                      LD      A, B                ; A = read buffer high  ' 4     |
1184   09A9 32 3B 01                LD      (READBUF+1), A      ; save current read buf ' 13    | 25 (187)
1185   09AC D9                      EXX                         ;                       ' 4     |
1186   09AD             
1187   09AD BA                      CP      D                   ; prepare DAC write     ' 4     |
1188   09AE 36 2A                   LD      (HL), 0x2A          ; write buf == read buf ' 10    | 24 (211)
1189   09B0 CA BD 09                JP      Z, .continu_pcm     ; continu to fill pcm   ' 10    |
1190   09B3             
1191   09B3 14                      INC     D                   ; inc write addr        ' 4     |
1192   09B4 CB 92                   RES     2, D                ; write addr &= 0x03FF  ' 8     | 42 (254-1)
1193   09B6 ED 53 38 01             LD      (WRITEBUF), DE      ; save new write addr   ' 20    |
1194   09BA C3 C7 09                JP      sync_frame          ;                       ' 10    |
1195   09BD             
1196   09BD             .continu_pcm
1197   09BD 14                      INC     D                   ; inc write addr        ' 4     |
1198   09BE CB 92                   RES     2, D                ; write addr &= 0x03FF  ' 8     | 42 (254-1)
1199   09C0 ED 53 38 01             LD      (WRITEBUF), DE      ; save new write addr   ' 20    |
1200   09C4 C3 F6 04                JP      pcm_mix             ; do pcm mix again      ' 10    |
1201   09C7             
1202   09C7             ; sync
1203   09C7             ; ----
1204   09C7             
1205   09C7             ; $BB+X
1206   09C7             sync_frame                              ; DE point on write buf
1207   09C7                         sampleOutput                ;                       ' 36    | (36)
1207   09C7 D9          >            EXX                     ;                           ' 4     | 4
1207   09C8 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1207   09C9 03          >            INC     BC              ; increment read address    ' 6     |
1207   09CA CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1207   09CC 12          >            LD      (DE), A         ; play sample               ' 7     |
1207   09CD D9          >            EXX                     ;                           ' 4     | (36)
1208   09CE             
1209   09CE                         wait62                      ; sync                  ' 62    | (98)
1209   09CE 3E 03       >            LD      A, w            ; 7-2
1209   09D0 3D          >            DEC     A               ; 4
1209   09D1 20 FD       >            JR      NZ, .loop       ; 12
1209   09D3 18 00       >            JR      .loop
1210   09D5             
1211   09D5 2A 80 01                LD      HL, (IDLE_LOOP)     ;                       ' 16    |
1212   09D8 23                      INC     HL                  ; increment idle loop   ' 6     | 38 (136)
1213   09D9 22 80 01                LD      (IDLE_LOOP), HL     ;                       ' 16    |
1214   09DC             
1215   09DC 3A 13 01                LD      A, (PENDING_FRM)    ; A = frame to process  ' 13    |
1216   09DF B7                      OR      A                   ; something to do ?     ' 4     | 27 (163)
1217   09E0 C2 0B 0A                JP      NZ, .do_xgm         ; do the XGM frame      ' 10    |
1218   09E3             
1219   09E3 3A 11 01                LD      A, (PROTECT_ARG)    ; get BUS protect state ' 13    |
1220   09E6 B7                      OR      A                   ; protecting ?          ' 4     | 27 (190)
1221   09E7 C2 FB 09                JP      NZ, .wait_dma       ; wait for it           ' 10    |
1222   09EA             
1223   09EA D9                      EXX                         ;                       ' 4     |
1224   09EB 78                      LD      A, B                ; A = read buffer high  ' 4     |
1225   09EC 32 3B 01                LD      (READBUF+1), A      ; save current read buf ' 13    | 25 (215)
1226   09EF D9                      EXX                         ;                       ' 4     |
1227   09F0             
1228   09F0 C6 01                   ADD     $1                  ;                       ' 7     |
1229   09F2 CB 97                   RES     2, A                ; read pos &= 0x03FF    ' 8     |
1230   09F4 BA                      CP      D                   ; pcm buffer empty ?    ' 4     | 29 (244)
1231   09F5 CA 08 0A                JP      Z, .do_pcm          ; fill pcm              ' 10    |
1232   09F8             
1233   09F8 C3 C7 09                JP      sync_frame          ; wait for a frame      ' 10    | (254)
1234   09FB             
1235   09FB             .wait_dma                               ;                       ' 190
1236   09FB 2A 82 01                LD      HL, (WAIT_LOOP)     ;                       ' 16    |
1237   09FE 23                      INC     HL                  ; increment wait loop   ' 6     | 38 (228)
1238   09FF 22 82 01                LD      (WAIT_LOOP), HL     ;                       ' 16    |
1239   0A02             
1240   0A02                         wait16                      ; sync                  ' 16    |
1240   0A02 18 00       >            JR      .loop
1240   0A04 00          >            NOP
1241   0A05 C3 C7 09                JP      sync_frame          ; wait for a frame      ' 10    | 26 (254)
1242   0A08             
1243   0A08             .do_pcm                                 ;                       ' 244
1244   0A08 C3 F6 04                JP      pcm_mix             ; do pcm mix again      ' 10    | (254)
1245   0A0B             
1246   0A0B             .do_xgm                                 ;                       ' 163
1247   0A0B                         wait81                      ; sync                  ' 81    |
1247   0A0B 3E 04       >            LD      A, w            ; 7-2
1247   0A0D 3D          >            DEC     A               ; 4
1247   0A0E 20 FD       >            JR      NZ, .loop       ; 12
1247   0A10 00          >            NOP
1247   0A11 00          >            NOP
1247   0A12 3E 00       >            LD      A, $0
1248   0A14 11 00 17                LD      DE, XGM_BUFFER      ; DE point to XGM buf   ' 10    | 91 (254)
1249   0A17             
1250   0A17             
1251   0A17             ;    LD  A, (VCOUNTER)
1252   0A17             ;    LD  (DEBUG_7), A
1253   0A17             
1254   0A17             ; execute XGM command
1255   0A17             ; -------------------
1256   0A17             
1257   0A17             ; $BC+X+Y
1258   0A17             execute_xgm
1259   0A17                         sampleOutput                ;                       ' 36    | (36)
1259   0A17 D9          >            EXX                     ;                           ' 4     | 4
1259   0A18 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1259   0A19 03          >            INC     BC              ; increment read address    ' 6     |
1259   0A1A CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1259   0A1C 12          >            LD      (DE), A         ; play sample               ' 7     |
1259   0A1D D9          >            EXX                     ;                           ' 4     | (36)
1260   0A1E             
1261   0A1E 1A                      LD      A, (DE)             ; A = command           ' 7     |
1262   0A1F 32 24 0A                LD      (.ld_hl_xx + 1), A  ; set jump address      ' 13    |
1263   0A22 1C                      INC     E                   ; next command          ' 4     | 44 (80)
1264   0A23             .ld_hl_xx                               ;                       '       |
1265   0A23 2A 00 16                LD      HL, (JUMP_TABLE)    ; LD HL, (jt)           ' 16    |
1266   0A26 E9                      JP      (HL)                ;                       ' 4     |
1267   0A27             
1268   0A27             
1269   0A27             ; next frame command
1270   0A27             ; ------------------
1271   0A27             
1272   0A27             com_next_frame                          ; 00                    ' 80
1273   0A27 C3 FA 11                JP      xgm_done            ; XGM frame done        ' 10    | (90)
1274   0A2A             
1275   0A2A             
1276   0A2A             ; PSG command
1277   0A2A             ; -----------
1278   0A2A             
1279   0A2A             com_psg_tone_w0                         ; 10                    ' 80
1280   0A2A                         wait126                     ; sync                  ' 126   |
1280   0A2A 3E 07       >            LD      A, w            ; 7-2
1280   0A2C 3D          >            DEC     A               ; 4
1280   0A2D 20 FD       >            JR      NZ, .loop       ; 12
1280   0A2F 18 00       >            JR      .loop
1281   0A31 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 146 (226)
1282   0A34 C3 A1 0A                JP      psg_tone_write0     ;                       ' 10    |
1283   0A37             
1284   0A37             com_psg_tone_w1                         ; 11                    ' 80
1285   0A37                         wait108                     ; sync                  ' 108   |
1285   0A37 3E 06       >            LD      A, w            ; 7-2
1285   0A39 3D          >            DEC     A               ; 4
1285   0A3A 20 FD       >            JR      NZ, .loop       ; 12
1285   0A3C C3 3F 0A    >            JP      .loop
1286   0A3F 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 128 (208)
1287   0A42 C3 9E 0A                JP      psg_tone_write1     ;                       ' 10    |
1288   0A45             
1289   0A45             com_psg_tone_w2                         ; 12                    ' 80
1290   0A45                         wait90                      ; sync                  ' 90    |
1290   0A45 3E 05       >            LD      A, w            ; 7-2
1290   0A47 3D          >            DEC     A               ; 4
1290   0A48 20 FD       >            JR      NZ, .loop       ; 12
1290   0A4A 00          >            NOP
1290   0A4B 00          >            NOP
1291   0A4C 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 110 (190)
1292   0A4F C3 9B 0A                JP      psg_tone_write2     ;                       ' 10    |
1293   0A52             
1294   0A52             com_psg_tone_w3                         ; 13                    ' 80
1295   0A52                         wait72                      ; sync                  ' 72    |
1295   0A52 3E 03       >            LD      A, w            ; 7-2
1295   0A54 3D          >            DEC     A               ; 4
1295   0A55 20 FD       >            JR      NZ, .loop       ; 12
1295   0A57 ED 4F       >            LD      R, A
1295   0A59 ED 4F       >            LD      R, A
1295   0A5B 00          >            NOP
1296   0A5C 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 92 (172)
1297   0A5F C3 98 0A                JP      psg_tone_write3     ;                       ' 10    |
1298   0A62             
1299   0A62             com_psg_tone_w4                         ; 14                    ' 80
1300   0A62                         wait54                      ; sync                  ' 54    |
1300   0A62 3E 03       >            LD      A, w            ; 7-2
1300   0A64 3D          >            DEC     A               ; 4
1300   0A65 20 FD       >            JR      NZ, .loop       ; 12
1300   0A67 00          >            NOP
1301   0A68 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 74 (154)
1302   0A6B C3 95 0A                JP      psg_tone_write4     ;                       ' 10    |
1303   0A6E             
1304   0A6E             com_psg_tone_w5                         ; 15                    ' 80
1305   0A6E                         wait36                      ; sync                  ' 36    |
1305   0A6E ED 4F       >            LD      R, A
1305   0A70 ED 4F       >            LD      R, A
1305   0A72 ED 4F       >            LD      R, A
1305   0A74 ED 4F       >            LD      R, A
1306   0A76 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 56 (136)
1307   0A79 C3 92 0A                JP      psg_tone_write5     ;                       ' 10    |
1308   0A7C             
1309   0A7C             com_psg_tone_w6                         ; 16                    ' 80
1310   0A7C                         wait18                      ; sync                  ' 18    |
1310   0A7C ED 4F       >            LD      R, A
1310   0A7E ED 4F       >            LD      R, A
1311   0A80 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 38 (118)
1312   0A83 C3 8F 0A                JP      psg_tone_write6     ;                       ' 10    |
1313   0A86             
1314   0A86             com_psg_tone_w7                         ; 17                    ' 80
1315   0A86 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 20 (100)
1316   0A89 C3 8C 0A                JP      psg_tone_write7     ;                       ' 10    |
1317   0A8C             
1318   0A8C             
1319   0A8C             psg_tone_write7                         ;                       ' 100
1320   0A8C 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1321   0A8D 1C                      INC     E                   ; next data             ' 4     | 18 (118)
1322   0A8E 77                      LD      (HL), A             ; write to PSG          ' 7     |
1323   0A8F             
1324   0A8F             psg_tone_write6
1325   0A8F 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1326   0A90 1C                      INC     E                   ; next data             ' 4     | 18 (136)
1327   0A91 77                      LD      (HL), A             ; write to PSG          ' 7     |
1328   0A92             
1329   0A92             psg_tone_write5
1330   0A92 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1331   0A93 1C                      INC     E                   ; next data             ' 4     | 18 (154)
1332   0A94 77                      LD      (HL), A             ; write to PSG          ' 7     |
1333   0A95             
1334   0A95             psg_tone_write4
1335   0A95 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1336   0A96 1C                      INC     E                   ; next data             ' 4     | 18 (172)
1337   0A97 77                      LD      (HL), A             ; write to PSG          ' 7     |
1338   0A98             
1339   0A98             psg_tone_write3
1340   0A98 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1341   0A99 1C                      INC     E                   ; next data             ' 4     | 18 (190)
1342   0A9A 77                      LD      (HL), A             ; write to PSG          ' 7     |
1343   0A9B             
1344   0A9B             psg_tone_write2
1345   0A9B 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1346   0A9C 1C                      INC     E                   ; next data             ' 4     | 18 (208)
1347   0A9D 77                      LD      (HL), A             ; write to PSG          ' 7     |
1348   0A9E             
1349   0A9E             psg_tone_write1
1350   0A9E 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1351   0A9F 1C                      INC     E                   ; next data             ' 4     | 18 (226)
1352   0AA0 77                      LD      (HL), A             ; write to PSG          ' 7     |
1353   0AA1             
1354   0AA1             psg_tone_write0
1355   0AA1 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1356   0AA2 1C                      INC     E                   ; next data             ' 4     | 18 (244)
1357   0AA3 77                      LD      (HL), A             ; write to PSG          ' 7     |
1358   0AA4             
1359   0AA4 C3 17 0A                JP      execute_xgm         ;                       ' 10    | (254)
1360   0AA7             
1361   0AA7             
1362   0AA7             com_psg_env_w0                          ; 18                    ' 80
1363   0AA7                         wait72                      ; sync                  ' 72    |
1363   0AA7 3E 03       >            LD      A, w            ; 7-2
1363   0AA9 3D          >            DEC     A               ; 4
1363   0AAA 20 FD       >            JR      NZ, .loop       ; 12
1363   0AAC ED 4F       >            LD      R, A
1363   0AAE ED 4F       >            LD      R, A
1363   0AB0 00          >            NOP
1364   0AB1 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 102 (182)
1365   0AB4 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1366   0AB7 C3 1B 0B                JP      psg_env_write0      ;                       ' 10    |
1367   0ABA             
1368   0ABA             com_psg_env_w1                          ; 18                    ' 80
1369   0ABA                         wait10                      ; sync                  ' 10    |
1369   0ABA C3 BD 0A    >            JP      .loop
1370   0ABD 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 40 (120)
1371   0AC0 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1372   0AC3 C3 0E 0B                JP      psg_env_write1      ;                       ' 10    |
1373   0AC6             
1374   0AC6             com_psg_env_w2                          ; 18                    ' 80
1375   0AC6                         wait154                     ; sync                  ' 154   |
1375   0AC6 3E 09       >            LD      A, w            ; 7-2
1375   0AC8 3D          >            DEC     A               ; 4
1375   0AC9 20 FD       >            JR      NZ, .loop       ; 12
1375   0ACB 00          >            NOP
1375   0ACC 00          >            NOP
1376   0ACD 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 174 (254)
1377   0AD0 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1378   0AD3             
1379   0AD3                         sampleOutput                ;                       ' 36    | (36)
1379   0AD3 D9          >            EXX                     ;                           ' 4     | 4
1379   0AD4 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1379   0AD5 03          >            INC     BC              ; increment read address    ' 6     |
1379   0AD6 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1379   0AD8 12          >            LD      (DE), A         ; play sample               ' 7     |
1379   0AD9 D9          >            EXX                     ;                           ' 4     | (36)
1380   0ADA             
1381   0ADA                         wait12                      ; sync                  ' 12    |
1381   0ADA 18 00       >            JR      .loop
1382   0ADC C3 01 0B                JP      psg_env_write2      ;                       ' 10    | 22 (58)
1383   0ADF             
1384   0ADF             com_psg_env_w3                          ; 18                    ' 80
1385   0ADF                         wait110                     ; sync                  ' 110   |
1385   0ADF 3E 06       >            LD      A, w            ; 7-2
1385   0AE1 3D          >            DEC     A               ; 4
1385   0AE2 20 FD       >            JR      NZ, .loop       ; 12
1385   0AE4 18 00       >            JR      .loop
1386   0AE6 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 130 (210)
1387   0AE9 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1388   0AEC             
1389   0AEC             psg_env_write3
1390   0AEC 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1391   0AED 07                      RLCA                        ;                       ' 4     |
1392   0AEE 07                      RLCA                        ;                       ' 4     |
1393   0AEF 07                      RLCA                        ;                       ' 4     |
1394   0AF0 E6 03                   AND     $3                  ; A = channel number    ' 7     | 41 (254-3)
1395   0AF2 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     |
1396   0AF4 4F                      LD      C, A                ; BC point on save      ' 4     |
1397   0AF5                         wait4                       ; sync                  ' 4     |
1397   0AF5 00          >            NOP
1398   0AF6             
1399   0AF6                         sampleOutput                ;                       ' 36    | (36-3)
1399   0AF6 D9          >            EXX                     ;                           ' 4     | 4
1399   0AF7 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1399   0AF8 03          >            INC     BC              ; increment read address    ' 6     |
1399   0AF9 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1399   0AFB 12          >            LD      (DE), A         ; play sample               ' 7     |
1399   0AFC D9          >            EXX                     ;                           ' 4     | (36)
1400   0AFD             
1401   0AFD 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1402   0AFE 1C                      INC     E                   ; next data             ' 4     | 25 (58)
1403   0AFF 77                      LD      (HL), A             ; write to PSG          ' 7     |
1404   0B00 02                      LD      (BC), A             ; write to save         ' 7     |
1405   0B01             
1406   0B01             psg_env_write2                          ;                       ' 58
1407   0B01 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1408   0B02 07                      RLCA                        ;                       ' 4     |
1409   0B03 07                      RLCA                        ;                       ' 4     |
1410   0B04 07                      RLCA                        ;                       ' 4     |
1411   0B05 E6 03                   AND     $3                  ; A = channel number    ' 7     |
1412   0B07 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (120)
1413   0B09 4F                      LD      C, A                ; BC point on save      ' 4     |
1414   0B0A 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1415   0B0B 1C                      INC     E                   ; next data             ' 4     |
1416   0B0C 77                      LD      (HL), A             ; write to PSG          ' 7     |
1417   0B0D 02                      LD      (BC), A             ; write to save         ' 7     |
1418   0B0E             
1419   0B0E             psg_env_write1
1420   0B0E 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1421   0B0F 07                      RLCA                        ;                       ' 4     |
1422   0B10 07                      RLCA                        ;                       ' 4     |
1423   0B11 07                      RLCA                        ;                       ' 4     |
1424   0B12 E6 03                   AND     $3                  ; A = channel number    ' 7     |
1425   0B14 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (182)
1426   0B16 4F                      LD      C, A                ; BC point on save      ' 4     |
1427   0B17 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1428   0B18 1C                      INC     E                   ; next data             ' 4     |
1429   0B19 77                      LD      (HL), A             ; write to PSG          ' 7     |
1430   0B1A 02                      LD      (BC), A             ; write to save         ' 7     |
1431   0B1B             
1432   0B1B             psg_env_write0
1433   0B1B 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1434   0B1C 07                      RLCA                        ;                       ' 4     |
1435   0B1D 07                      RLCA                        ;                       ' 4     |
1436   0B1E 07                      RLCA                        ;                       ' 4     |
1437   0B1F E6 03                   AND     $3                  ; A = channel number    ' 7     |
1438   0B21 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (244)
1439   0B23 4F                      LD      C, A                ; BC point on save      ' 4     |
1440   0B24 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1441   0B25 1C                      INC     E                   ; next data             ' 4     |
1442   0B26 77                      LD      (HL), A             ; write to PSG          ' 7     |
1443   0B27 02                      LD      (BC), A             ; write to save         ' 7     |
1444   0B28             
1445   0B28 C3 17 0A                JP      execute_xgm         ;                       ' 10    | (254)
1446   0B2B             
1447   0B2B             
1448   0B2B             ; YM port0 command
1449   0B2B             ; ----------------
1450   0B2B             
1451   0B2B             com_ym_port0_w0                         ; 20                    ' 80
1452   0B2B                         wait36                      ; sync                  ' 36    |
1452   0B2B ED 4F       >            LD      R, A
1452   0B2D ED 4F       >            LD      R, A
1452   0B2F ED 4F       >            LD      R, A
1452   0B31 ED 4F       >            LD      R, A
1453   0B33 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 66 (146)
1454   0B36 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1455   0B39 C3 2B 0D                JP      ym_port_write0      ;                       ' 10    |
1456   0B3C             
1457   0B3C             com_ym_port0_w1                         ; 21                    ' 80
1458   0B3C 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1459   0B3F 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 30 (110)
1460   0B42 C3 25 0D                JP      ym_port_write1      ;                       ' 10    |
1461   0B45             
1462   0B45             com_ym_port0_w2                         ; 22                    ' 80
1463   0B45                         wait52                      ; sync                  ' 52    |
1463   0B45 3E 02       >            LD      A, w            ; 7-2
1463   0B47 3D          >            DEC     A               ; 4
1463   0B48 20 FD       >            JR      NZ, .loop       ; 12
1463   0B4A ED 4F       >            LD      R, A
1463   0B4C ED 4F       >            LD      R, A
1464   0B4E 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1465   0B51 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1466   0B54 C3 22 0E                JP      ym_port_write2      ;                       ' 10    |
1467   0B57             
1468   0B57             com_ym_port0_w3                         ; 23                    ' 80
1469   0B57 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1470   0B5A 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1471   0B5C 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1472   0B5D C3 01 0D                JP      com_ym_port_w3      ; execute               ' 10    |
1473   0B60             
1474   0B60             com_ym_port0_w4                         ; 24                    ' 80
1475   0B60                         wait144                     ; sync                  ' 144   |
1475   0B60 3E 08       >            LD      A, w            ; 7-2
1475   0B62 3D          >            DEC     A               ; 4
1475   0B63 20 FD       >            JR      NZ, .loop       ; 12
1475   0B65 3E 00       >            LD      A, $0
1475   0B67 3E 00       >            LD      A, $0
1476   0B69 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 178 (254+4)
1477   0B6C 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1478   0B6F D9                      EXX                         ;                       ' 4     |
1479   0B70 C3 00 0E                JP      ym_port_write4      ;                       ' 10    |
1480   0B73             
1481   0B73             com_ym_port0_w5                         ; 25                    ' 80
1482   0B73                         wait52                      ; sync                  ' 52    |
1482   0B73 3E 02       >            LD      A, w            ; 7-2
1482   0B75 3D          >            DEC     A               ; 4
1482   0B76 20 FD       >            JR      NZ, .loop       ; 12
1482   0B78 ED 4F       >            LD      R, A
1482   0B7A ED 4F       >            LD      R, A
1483   0B7C 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1484   0B7F 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1485   0B82 C3 ED 0D                JP      ym_port_write5      ;                       ' 10    |
1486   0B85             
1487   0B85             com_ym_port0_w6                         ; 26                    ' 80
1488   0B85 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1489   0B88 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1490   0B8A 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1491   0B8B C3 0A 0D                JP      com_ym_port_w6      ; execute               ' 10    |
1492   0B8E             
1493   0B8E             com_ym_port0_w7                         ; 27                    ' 80
1494   0B8E                         wait144                     ; sync                  ' 144   |
1494   0B8E 3E 08       >            LD      A, w            ; 7-2
1494   0B90 3D          >            DEC     A               ; 4
1494   0B91 20 FD       >            JR      NZ, .loop       ; 12
1494   0B93 3E 00       >            LD      A, $0
1494   0B95 3E 00       >            LD      A, $0
1495   0B97 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 178 (254+4)
1496   0B9A 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1497   0B9D D9                      EXX                         ;                       ' 4     |
1498   0B9E C3 CB 0D                JP      ym_port_write7      ;                       ' 10    |
1499   0BA1             
1500   0BA1             com_ym_port0_w8                         ; 28                    ' 80
1501   0BA1                         wait52                      ; sync                  ' 52    |
1501   0BA1 3E 02       >            LD      A, w            ; 7-2
1501   0BA3 3D          >            DEC     A               ; 4
1501   0BA4 20 FD       >            JR      NZ, .loop       ; 12
1501   0BA6 ED 4F       >            LD      R, A
1501   0BA8 ED 4F       >            LD      R, A
1502   0BAA 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1503   0BAD 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1504   0BB0 C3 B8 0D                JP      ym_port_write8      ;                       ' 10    |
1505   0BB3             
1506   0BB3             com_ym_port0_w9                         ; 29                    ' 80
1507   0BB3 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1508   0BB6 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1509   0BB8 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1510   0BB9 C3 13 0D                JP      com_ym_port_w9      ; execute               ' 10    |
1511   0BBC             
1512   0BBC             com_ym_port0_wA                         ; 2A                    ' 80
1513   0BBC                         wait144                     ; sync                  ' 144   |
1513   0BBC 3E 08       >            LD      A, w            ; 7-2
1513   0BBE 3D          >            DEC     A               ; 4
1513   0BBF 20 FD       >            JR      NZ, .loop       ; 12
1513   0BC1 3E 00       >            LD      A, $0
1513   0BC3 3E 00       >            LD      A, $0
1514   0BC5 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 178 (254+4)
1515   0BC8 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1516   0BCB D9                      EXX                         ;                       ' 4     |
1517   0BCC C3 96 0D                JP      ym_port_writeA      ;                       ' 10    |
1518   0BCF             
1519   0BCF             com_ym_port0_wB                         ; 2B                    ' 80
1520   0BCF                         wait52                      ; sync                  ' 52    |
1520   0BCF 3E 02       >            LD      A, w            ; 7-2
1520   0BD1 3D          >            DEC     A               ; 4
1520   0BD2 20 FD       >            JR      NZ, .loop       ; 12
1520   0BD4 ED 4F       >            LD      R, A
1520   0BD6 ED 4F       >            LD      R, A
1521   0BD8 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1522   0BDB 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1523   0BDE C3 83 0D                JP      ym_port_writeB      ;                       ' 10    |
1524   0BE1             
1525   0BE1             com_ym_port0_wC                         ; 2C                    ' 80
1526   0BE1 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1527   0BE4 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1528   0BE6 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1529   0BE7 C3 1C 0D                JP      com_ym_port_wC      ; execute               ' 10    |
1530   0BEA             
1531   0BEA             com_ym_port0_wD                         ; 2D                    ' 80
1532   0BEA                         wait144                     ; sync                  ' 144   |
1532   0BEA 3E 08       >            LD      A, w            ; 7-2
1532   0BEC 3D          >            DEC     A               ; 4
1532   0BED 20 FD       >            JR      NZ, .loop       ; 12
1532   0BEF 3E 00       >            LD      A, $0
1532   0BF1 3E 00       >            LD      A, $0
1533   0BF3 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1534   0BF6 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1535   0BF9 C3 60 0D                JP      ym_port_writeD      ;                       ' 10    |
1536   0BFC             
1537   0BFC             com_ym_port0_wE                         ; 2E                    ' 80
1538   0BFC                         wait36                      ; sync                  ' 36    |
1538   0BFC ED 4F       >            LD      R, A
1538   0BFE ED 4F       >            LD      R, A
1538   0C00 ED 4F       >            LD      R, A
1538   0C02 ED 4F       >            LD      R, A
1539   0C04 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 66 (146)
1540   0C07 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1541   0C0A C3 4A 0D                JP      ym_port_writeE      ;                       ' 10    |
1542   0C0D             
1543   0C0D             com_ym_port0_wF                         ; 2F                    ' 80
1544   0C0D 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1545   0C10 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 30 (110)
1546   0C13 C3 44 0D                JP      ym_port_writeF      ;                       ' 10    |
1547   0C16             
1548   0C16             
1549   0C16             ; YM port2 command
1550   0C16             ; ----------------
1551   0C16             
1552   0C16             com_ym_port2_w0                         ; 30                    ' 80
1553   0C16                         wait36                      ; sync                  ' 36    |
1553   0C16 ED 4F       >            LD      R, A
1553   0C18 ED 4F       >            LD      R, A
1553   0C1A ED 4F       >            LD      R, A
1553   0C1C ED 4F       >            LD      R, A
1554   0C1E 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 66 (146)
1555   0C21 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1556   0C24 C3 2B 0D                JP      ym_port_write0      ;                       ' 10    |
1557   0C27             
1558   0C27             com_ym_port2_w1                         ; 31                    ' 80
1559   0C27 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1560   0C2A 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    | 30 (110)
1561   0C2D C3 25 0D                JP      ym_port_write1      ;                       ' 10    |
1562   0C30             
1563   0C30             com_ym_port2_w2                         ; 32                    ' 80
1564   0C30                         wait52                      ; sync                  ' 52    |
1564   0C30 3E 02       >            LD      A, w            ; 7-2
1564   0C32 3D          >            DEC     A               ; 4
1564   0C33 20 FD       >            JR      NZ, .loop       ; 12
1564   0C35 ED 4F       >            LD      R, A
1564   0C37 ED 4F       >            LD      R, A
1565   0C39 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1566   0C3C 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1567   0C3F C3 22 0E                JP      ym_port_write2      ;                       ' 10    |
1568   0C42             
1569   0C42             com_ym_port2_w3                         ; 33                    ' 80
1570   0C42 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1571   0C45 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1572   0C47 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1573   0C48 C3 01 0D                JP      com_ym_port_w3      ; execute               ' 10    |
1574   0C4B             
1575   0C4B             com_ym_port2_w4                         ; 34                    ' 80
1576   0C4B                         wait144                     ; sync                  ' 144   |
1576   0C4B 3E 08       >            LD      A, w            ; 7-2
1576   0C4D 3D          >            DEC     A               ; 4
1576   0C4E 20 FD       >            JR      NZ, .loop       ; 12
1576   0C50 3E 00       >            LD      A, $0
1576   0C52 3E 00       >            LD      A, $0
1577   0C54 21 02 40                LD      HL, YMPORT2         ; HL point on YM port0  ' 10    | 178 (254+4)
1578   0C57 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1579   0C5A D9                      EXX                         ;                       ' 4     |
1580   0C5B C3 00 0E                JP      ym_port_write4      ;                       ' 10    |
1581   0C5E             
1582   0C5E             com_ym_port2_w5                         ; 35                    ' 80
1583   0C5E                         wait52                      ; sync                  ' 52    |
1583   0C5E 3E 02       >            LD      A, w            ; 7-2
1583   0C60 3D          >            DEC     A               ; 4
1583   0C61 20 FD       >            JR      NZ, .loop       ; 12
1583   0C63 ED 4F       >            LD      R, A
1583   0C65 ED 4F       >            LD      R, A
1584   0C67 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1585   0C6A 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1586   0C6D C3 ED 0D                JP      ym_port_write5      ;                       ' 10    |
1587   0C70             
1588   0C70             com_ym_port2_w6                         ; 36                    ' 80
1589   0C70 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1590   0C73 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1591   0C75 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1592   0C76 C3 0A 0D                JP      com_ym_port_w6      ; execute               ' 10    |
1593   0C79             
1594   0C79             com_ym_port2_w7                         ; 37                    ' 80
1595   0C79                         wait144                     ; sync                  ' 144   |
1595   0C79 3E 08       >            LD      A, w            ; 7-2
1595   0C7B 3D          >            DEC     A               ; 4
1595   0C7C 20 FD       >            JR      NZ, .loop       ; 12
1595   0C7E 3E 00       >            LD      A, $0
1595   0C80 3E 00       >            LD      A, $0
1596   0C82 21 02 40                LD      HL, YMPORT2         ; HL point on YM port0  ' 10    | 178 (254+4)
1597   0C85 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1598   0C88 D9                      EXX                         ;                       ' 4     |
1599   0C89 C3 CB 0D                JP      ym_port_write7      ;                       ' 10    |
1600   0C8C             
1601   0C8C             com_ym_port2_w8                         ; 38                    ' 80
1602   0C8C                         wait52                      ; sync                  ' 52    |
1602   0C8C 3E 02       >            LD      A, w            ; 7-2
1602   0C8E 3D          >            DEC     A               ; 4
1602   0C8F 20 FD       >            JR      NZ, .loop       ; 12
1602   0C91 ED 4F       >            LD      R, A
1602   0C93 ED 4F       >            LD      R, A
1603   0C95 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1604   0C98 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1605   0C9B C3 B8 0D                JP      ym_port_write8      ;                       ' 10    |
1606   0C9E             
1607   0C9E             com_ym_port2_w9                         ; 39                    ' 80
1608   0C9E 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1609   0CA1 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1610   0CA3 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1611   0CA4 C3 13 0D                JP      com_ym_port_w9      ; execute               ' 10    |
1612   0CA7             
1613   0CA7             com_ym_port2_wA                         ; 3A                    ' 80
1614   0CA7                         wait144                     ; sync                  ' 144   |
1614   0CA7 3E 08       >            LD      A, w            ; 7-2
1614   0CA9 3D          >            DEC     A               ; 4
1614   0CAA 20 FD       >            JR      NZ, .loop       ; 12
1614   0CAC 3E 00       >            LD      A, $0
1614   0CAE 3E 00       >            LD      A, $0
1615   0CB0 21 02 40                LD      HL, YMPORT2         ; HL point on YM port0  ' 10    | 178 (254+4)
1616   0CB3 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1617   0CB6 D9                      EXX                         ;                       ' 4     |
1618   0CB7 C3 96 0D                JP      ym_port_writeA      ;                       ' 10    |
1619   0CBA             
1620   0CBA             com_ym_port2_wB                         ; 3B                    ' 80
1621   0CBA                         wait52                      ; sync                  ' 52    |
1621   0CBA 3E 02       >            LD      A, w            ; 7-2
1621   0CBC 3D          >            DEC     A               ; 4
1621   0CBD 20 FD       >            JR      NZ, .loop       ; 12
1621   0CBF ED 4F       >            LD      R, A
1621   0CC1 ED 4F       >            LD      R, A
1622   0CC3 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1623   0CC6 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1624   0CC9 C3 83 0D                JP      ym_port_writeB      ;                       ' 10    |
1625   0CCC             
1626   0CCC             com_ym_port2_wC                         ; 3C                    ' 80
1627   0CCC 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1628   0CCF 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1629   0CD1 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1630   0CD2 C3 1C 0D                JP      com_ym_port_wC      ; execute               ' 10    |
1631   0CD5             
1632   0CD5             com_ym_port2_wD                         ; 3D                    ' 80
1633   0CD5                         wait144                     ; sync                  ' 144   |
1633   0CD5 3E 08       >            LD      A, w            ; 7-2
1633   0CD7 3D          >            DEC     A               ; 4
1633   0CD8 20 FD       >            JR      NZ, .loop       ; 12
1633   0CDA 3E 00       >            LD      A, $0
1633   0CDC 3E 00       >            LD      A, $0
1634   0CDE 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 174 (254)
1635   0CE1 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1636   0CE4 C3 60 0D                JP      ym_port_writeD      ;                       ' 10    |
1637   0CE7             
1638   0CE7             com_ym_port2_wE                         ; 3E                    ' 80
1639   0CE7                         wait36                      ; sync                  ' 36    |
1639   0CE7 ED 4F       >            LD      R, A
1639   0CE9 ED 4F       >            LD      R, A
1639   0CEB ED 4F       >            LD      R, A
1639   0CED ED 4F       >            LD      R, A
1640   0CEF 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 66 (146)
1641   0CF2 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1642   0CF5 C3 4A 0D                JP      ym_port_writeE      ;                       ' 10    |
1643   0CF8             
1644   0CF8             com_ym_port2_wF                         ; 3F                    ' 80
1645   0CF8 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1646   0CFB 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    | 30 (110)
1647   0CFE C3 44 0D                JP      ym_port_writeF      ;                       ' 10    |
1648   0D01             
1649   0D01             
1650   0D01             com_ym_port_w3                          ;                       ' 116
1651   0D01 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1652   0D02 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1653   0D03 1C                      INC     E                   ; next data             ' 4     |
1654   0D04 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1655   0D05 1C                      INC     E                   ; next data             ' 4     |
1656   0D06 02                      LD      (BC), A             ; write data to YM      ' 7     |
1657   0D07 C3 22 0E                JP      ym_port_write2      ;                       ' 10    | (162)
1658   0D0A             
1659   0D0A             com_ym_port_w6                          ;                       ' 116
1660   0D0A 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1661   0D0B 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1662   0D0C 1C                      INC     E                   ; next data             ' 4     |
1663   0D0D 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1664   0D0E 1C                      INC     E                   ; next data             ' 4     |
1665   0D0F 02                      LD      (BC), A             ; write data to YM      ' 7     |
1666   0D10 C3 ED 0D                JP      ym_port_write5      ;                       ' 10    | (162)
1667   0D13             
1668   0D13             com_ym_port_w9                          ;                       ' 116
1669   0D13 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1670   0D14 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1671   0D15 1C                      INC     E                   ; next data             ' 4     |
1672   0D16 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1673   0D17 1C                      INC     E                   ; next data             ' 4     |
1674   0D18 02                      LD      (BC), A             ; write data to YM      ' 7     |
1675   0D19 C3 B8 0D                JP      ym_port_write8      ;                       ' 10    | (162)
1676   0D1C             
1677   0D1C             com_ym_port_wC                          ;                       ' 116
1678   0D1C 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1679   0D1D 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1680   0D1E 1C                      INC     E                   ; next data             ' 4     |
1681   0D1F 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1682   0D20 1C                      INC     E                   ; next data             ' 4     |
1683   0D21 02                      LD      (BC), A             ; write data to YM      ' 7     |
1684   0D22 C3 83 0D                JP      ym_port_writeB      ;                       ' 10    | (162)
1685   0D25             
1686   0D25             
1687   0D25             ym_port_write1                          ;                       ' 110
1688   0D25 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1689   0D26 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1690   0D27 1C                      INC     E                   ; next data             ' 4     |
1691   0D28 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (146)
1692   0D29 1C                      INC     E                   ; next data             ' 4     |
1693   0D2A 02                      LD      (BC), A             ; write data to YM      ' 7     |
1694   0D2B             
1695   0D2B             ym_port_write0
1696   0D2B 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1697   0D2C                         waitYMReady                 ; wait YM to be ready   ' 30    |
1697   0D2C D9          >            EXX                     ;                           ' 4     | (4)
1697   0D2D CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1697   0D2F C2 2D 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1697   0D32 D9          >            EXX                     ;                           ' 4     | (30)
1698   0D33 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (212)
1699   0D34 1C                      INC     E                   ; next data             ' 4     |
1700   0D35 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1701   0D36 1C                      INC     E                   ; next data             ' 4     |
1702   0D37 02                      LD      (BC), A             ; write to YM           ' 7     |
1703   0D38             
1704   0D38 D9                      EXX                         ; switch to HL' (port0) ' 4     |
1705   0D39             .wait                                   ;                       '       |
1706   0D39 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1707   0D3B C2 39 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 40 (252)
1708   0D3E                                                     ;                       '       |
1709   0D3E 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1710   0D40 D9                      EXX                         ; switch back           ' 4     |
1711   0D41             
1712   0D41 C3 17 0A                JP      execute_xgm         ; +8 cycles here        ' 10    | (254+8)
1713   0D44             
1714   0D44             ym_port_writeF                          ;                       ' 110
1715   0D44 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1716   0D45 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1717   0D46 1C                      INC     E                   ; next data             ' 4     |
1718   0D47 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (146)
1719   0D48 1C                      INC     E                   ; next data             ' 4     |
1720   0D49 02                      LD      (BC), A             ; write data to YM      ' 7     |
1721   0D4A             
1722   0D4A             ym_port_writeE
1723   0D4A 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1724   0D4B                         waitYMReady                 ; wait YM to be ready   ' 30    |
1724   0D4B D9          >            EXX                     ;                           ' 4     | (4)
1724   0D4C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1724   0D4E C2 4C 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1724   0D51 D9          >            EXX                     ;                           ' 4     | (30)
1725   0D52 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (212)
1726   0D53 1C                      INC     E                   ; next data             ' 4     |
1727   0D54 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1728   0D55 1C                      INC     E                   ; next data             ' 4     |
1729   0D56 02                      LD      (BC), A             ; write to YM           ' 7     |
1730   0D57             
1731   0D57                         wait12                      ; sync                  ' 12    |
1731   0D57 18 00       >            JR      .loop
1732   0D59                         waitYMReady                 ; wait YM to be ready   ' 30    | 42 (254)
1732   0D59 D9          >            EXX                     ;                           ' 4     | (4)
1732   0D5A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1732   0D5C C2 5A 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1732   0D5F D9          >            EXX                     ;                           ' 4     | (30)
1733   0D60             
1734   0D60             ym_port_writeD
1735   0D60                         sampleOutputSafe            ;                       ' 46    | (46)
1735   0D60 D9          >            EXX                     ;                           ' 4     | 4
1735   0D61 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
1735   0D63 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1735   0D64 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1735   0D65 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1735   0D67 12          >            LD      (DE), A         ; play sample               ' 7     |
1735   0D68 D9          >            EXX                     ;                           ' 4     | (46)
1736   0D69             
1737   0D69 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1738   0D6A                         waitYMReady                 ; wait YM to be ready   ' 30    |
1738   0D6A D9          >            EXX                     ;                           ' 4     | (4)
1738   0D6B CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1738   0D6D C2 6B 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1738   0D70 D9          >            EXX                     ;                           ' 4     | (30)
1739   0D71 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1740   0D72 1C                      INC     E                   ; next data             ' 4     |
1741   0D73 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1742   0D74 1C                      INC     E                   ; next data             ' 4     |
1743   0D75 02                      LD      (BC), A             ; write to YM           ' 7     |
1744   0D76             
1745   0D76             ;ym_port_writeC
1746   0D76 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1747   0D77                         waitYMReady                 ; wait YM to be ready   ' 30    |
1747   0D77 D9          >            EXX                     ;                           ' 4     | (4)
1747   0D78 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1747   0D7A C2 78 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1747   0D7D D9          >            EXX                     ;                           ' 4     | (30)
1748   0D7E 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1749   0D7F 1C                      INC     E                   ; next data             ' 4     |
1750   0D80 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1751   0D81 1C                      INC     E                   ; next data             ' 4     |
1752   0D82 02                      LD      (BC), A             ; write to YM           ' 7     |
1753   0D83             
1754   0D83             ym_port_writeB
1755   0D83 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1756   0D84                         waitYMReady                 ; wait YM to be ready   ' 30    |
1756   0D84 D9          >            EXX                     ;                           ' 4     | (4)
1756   0D85 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1756   0D87 C2 85 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1756   0D8A D9          >            EXX                     ;                           ' 4     | (30)
1757   0D8B 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1758   0D8C 1C                      INC     E                   ; next data             ' 4     |
1759   0D8D 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1760   0D8E 1C                      INC     E                   ; next data             ' 4     |
1761   0D8F 02                      LD      (BC), A             ; write to YM           ' 7     |
1762   0D90             
1763   0D90 D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1764   0D91             .wait                                   ;                       '       |
1765   0D91 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1766   0D93 C2 91 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1767   0D96             
1768   0D96             ym_port_writeA                          ;                       ' 4
1769   0D96 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1770   0D98 0A                      LD      A, (BC)             ;                       ' 7     |
1771   0D99 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1772   0D9A CB 90                   RES     2, B                ;                       ' 8     |
1773   0D9C 12                      LD      (DE), A             ;                       ' 7     |
1774   0D9D D9                      EXX                         ;                       ' 4     |
1775   0D9E             
1776   0D9E 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1777   0D9F                         waitYMReady                 ; wait YM to be ready   ' 30    |
1777   0D9F D9          >            EXX                     ;                           ' 4     | (4)
1777   0DA0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1777   0DA2 C2 A0 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1777   0DA5 D9          >            EXX                     ;                           ' 4     | (30)
1778   0DA6 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1779   0DA7 1C                      INC     E                   ; next data             ' 4     |
1780   0DA8 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1781   0DA9 1C                      INC     E                   ; next data             ' 4     |
1782   0DAA 02                      LD      (BC), A             ; write to YM           ' 7     |
1783   0DAB             
1784   0DAB             ;ym_port_write9
1785   0DAB 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1786   0DAC                         waitYMReady                 ; wait YM to be ready   ' 30    |
1786   0DAC D9          >            EXX                     ;                           ' 4     | (4)
1786   0DAD CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1786   0DAF C2 AD 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1786   0DB2 D9          >            EXX                     ;                           ' 4     | (30)
1787   0DB3 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1788   0DB4 1C                      INC     E                   ; next data             ' 4     |
1789   0DB5 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1790   0DB6 1C                      INC     E                   ; next data             ' 4     |
1791   0DB7 02                      LD      (BC), A             ; write to YM           ' 7     |
1792   0DB8             
1793   0DB8             ym_port_write8
1794   0DB8 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1795   0DB9                         waitYMReady                 ; wait YM to be ready   ' 30    |
1795   0DB9 D9          >            EXX                     ;                           ' 4     | (4)
1795   0DBA CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1795   0DBC C2 BA 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1795   0DBF D9          >            EXX                     ;                           ' 4     | (30)
1796   0DC0 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1797   0DC1 1C                      INC     E                   ; next data             ' 4     |
1798   0DC2 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1799   0DC3 1C                      INC     E                   ; next data             ' 4     |
1800   0DC4 02                      LD      (BC), A             ; write to YM           ' 7     |
1801   0DC5             
1802   0DC5 D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1803   0DC6             .wait                                   ;                       '       |
1804   0DC6 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1805   0DC8 C2 C6 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1806   0DCB             
1807   0DCB             ym_port_write7                          ;                       ' 4
1808   0DCB 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1809   0DCD 0A                      LD      A, (BC)             ;                       ' 7     |
1810   0DCE 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1811   0DCF CB 90                   RES     2, B                ;                       ' 8     |
1812   0DD1 12                      LD      (DE), A             ;                       ' 7     |
1813   0DD2 D9                      EXX                         ;                       ' 4     |
1814   0DD3             
1815   0DD3 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1816   0DD4                         waitYMReady                 ; wait YM to be ready   ' 30    |
1816   0DD4 D9          >            EXX                     ;                           ' 4     | (4)
1816   0DD5 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1816   0DD7 C2 D5 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1816   0DDA D9          >            EXX                     ;                           ' 4     | (30)
1817   0DDB 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1818   0DDC 1C                      INC     E                   ; next data             ' 4     |
1819   0DDD 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1820   0DDE 1C                      INC     E                   ; next data             ' 4     |
1821   0DDF 02                      LD      (BC), A             ; write to YM           ' 7     |
1822   0DE0             
1823   0DE0             ;ym_port_write6
1824   0DE0 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1825   0DE1                         waitYMReady                 ; wait YM to be ready   ' 30    |
1825   0DE1 D9          >            EXX                     ;                           ' 4     | (4)
1825   0DE2 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1825   0DE4 C2 E2 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1825   0DE7 D9          >            EXX                     ;                           ' 4     | (30)
1826   0DE8 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1827   0DE9 1C                      INC     E                   ; next data             ' 4     |
1828   0DEA 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1829   0DEB 1C                      INC     E                   ; next data             ' 4     |
1830   0DEC 02                      LD      (BC), A             ; write to YM           ' 7     |
1831   0DED             
1832   0DED             ym_port_write5
1833   0DED 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1834   0DEE                         waitYMReady                 ; wait YM to be ready   ' 30    |
1834   0DEE D9          >            EXX                     ;                           ' 4     | (4)
1834   0DEF CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1834   0DF1 C2 EF 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1834   0DF4 D9          >            EXX                     ;                           ' 4     | (30)
1835   0DF5 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1836   0DF6 1C                      INC     E                   ; next data             ' 4     |
1837   0DF7 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1838   0DF8 1C                      INC     E                   ; next data             ' 4     |
1839   0DF9 02                      LD      (BC), A             ; write to YM           ' 7     |
1840   0DFA             
1841   0DFA D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1842   0DFB             .wait                                   ;                       '       |
1843   0DFB CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1844   0DFD C2 FB 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1845   0E00             
1846   0E00             ym_port_write4                          ;                       ' 4
1847   0E00 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1848   0E02 0A                      LD      A, (BC)             ;                       ' 7     |
1849   0E03 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1850   0E04 CB 90                   RES     2, B                ;                       ' 8     |
1851   0E06 12                      LD      (DE), A             ;                       ' 7     |
1852   0E07 D9                      EXX                         ;                       ' 4     |
1853   0E08             
1854   0E08 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1855   0E09                         waitYMReady                 ; wait YM to be ready   ' 30    |
1855   0E09 D9          >            EXX                     ;                           ' 4     | (4)
1855   0E0A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1855   0E0C C2 0A 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1855   0E0F D9          >            EXX                     ;                           ' 4     | (30)
1856   0E10 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1857   0E11 1C                      INC     E                   ; next data             ' 4     |
1858   0E12 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1859   0E13 1C                      INC     E                   ; next data             ' 4     |
1860   0E14 02                      LD      (BC), A             ; write to YM           ' 7     |
1861   0E15             
1862   0E15             ;ym_port_write3
1863   0E15 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1864   0E16                         waitYMReady                 ; wait YM to be ready   ' 30    |
1864   0E16 D9          >            EXX                     ;                           ' 4     | (4)
1864   0E17 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1864   0E19 C2 17 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1864   0E1C D9          >            EXX                     ;                           ' 4     | (30)
1865   0E1D 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1866   0E1E 1C                      INC     E                   ; next data             ' 4     |
1867   0E1F 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1868   0E20 1C                      INC     E                   ; next data             ' 4     |
1869   0E21 02                      LD      (BC), A             ; write to YM           ' 7     |
1870   0E22             
1871   0E22             ym_port_write2
1872   0E22 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1873   0E23                         waitYMReady                 ; wait YM to be ready   ' 30    |
1873   0E23 D9          >            EXX                     ;                           ' 4     | (4)
1873   0E24 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1873   0E26 C2 24 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1873   0E29 D9          >            EXX                     ;                           ' 4     | (30)
1874   0E2A 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1875   0E2B 1C                      INC     E                   ; next data             ' 4     |
1876   0E2C 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1877   0E2D 1C                      INC     E                   ; next data             ' 4     |
1878   0E2E 02                      LD      (BC), A             ; write to YM           ' 7     |
1879   0E2F             
1880   0E2F D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1881   0E30             .wait                                   ;                       '       |
1882   0E30 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1883   0E32 C2 30 0E                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1884   0E35             
1885   0E35 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1886   0E37 0A                      LD      A, (BC)             ;                       ' 7     |
1887   0E38 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1888   0E39 CB 90                   RES     2, B                ;                       ' 8     |
1889   0E3B 12                      LD      (DE), A             ;                       ' 7     |
1890   0E3C D9                      EXX                         ;                       ' 4     |
1891   0E3D             
1892   0E3D                         wait24                      ; sync                  ' 24    | 54 (100)
1892   0E3D 18 00       >            JR      .loop
1892   0E3F 18 00       >            JR      .loop
1893   0E41                         waitYMReady                 ; wait YM to be ready   ' 30    |
1893   0E41 D9          >            EXX                     ;                           ' 4     | (4)
1893   0E42 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1893   0E44 C2 42 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1893   0E47 D9          >            EXX                     ;                           ' 4     | (30)
1894   0E48             
1895   0E48 C3 25 0D                JP      ym_port_write1      ; execute next          ' 10    | (110)
1896   0E4B             
1897   0E4B             
1898   0E4B             ; YM KEY command
1899   0E4B             ; --------------
1900   0E4B             
1901   0E4B             com_ym_key_w0                           ; 40                    ' 80
1902   0E4B                         wait44                      ; sync                  ' 44    |
1902   0E4B 3E 02       >            LD      A, w            ; 7-2
1902   0E4D 3D          >            DEC     A               ; 4
1902   0E4E 20 FD       >            JR      NZ, .loop       ; 12
1902   0E50 C3 53 0E    >            JP      .loop
1903   0E53 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1904   0E56 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 84 (164)
1905   0E59 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    |
1906   0E5B C3 C9 0E                JP      ym_key_write0       ;                       ' 10    |
1907   0E5E             
1908   0E5E             com_ym_key_w1                           ; 41                    ' 80
1909   0E5E                         wait4                       ; sync                  ' 4     |
1909   0E5E 00          >            NOP
1910   0E5F 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1911   0E62 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 44 (124)
1912   0E65 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    |
1913   0E67 C3 C1 0E                JP      ym_key_write1       ;                       ' 10    |
1914   0E6A             
1915   0E6A             com_ym_key_w2                           ; 43                    ' 80
1916   0E6A                         wait134                     ; sync                  ' 134   |
1916   0E6A 3E 08       >            LD      A, w            ; 7-2
1916   0E6C 3D          >            DEC     A               ; 4
1916   0E6D 20 FD       >            JR      NZ, .loop       ; 12
1916   0E6F 00          >            NOP
1917   0E70 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1918   0E73 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1919   0E76 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 174 (254)
1920   0E78 C3 FC 0E                JP      ym_key_write2       ;                       ' 10    |
1921   0E7B             
1922   0E7B             com_ym_key_w3                           ; 44                    ' 80
1923   0E7B                         wait64                      ; sync                  ' 64    |
1923   0E7B 3E 03       >            LD      A, w            ; 7-2
1923   0E7D 3D          >            DEC     A               ; 4
1923   0E7E 20 FD       >            JR      NZ, .loop       ; 12
1923   0E80 3E 00       >            LD      A, $0
1923   0E82 3E 00       >            LD      A, $0
1924   0E84 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1925   0E87 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1926   0E8A 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 104 (184)
1927   0E8C C3 ED 0E                JP      ym_key_write3       ;                       ' 10    |
1928   0E8F             
1929   0E8F             com_ym_key_w4                           ; 45                    ' 80
1930   0E8F                         wait24                      ; sync                  ' 24    |
1930   0E8F 18 00       >            JR      .loop
1930   0E91 18 00       >            JR      .loop
1931   0E93 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1932   0E96 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1933   0E99 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 64 (144)
1934   0E9B C3 E5 0E                JP      ym_key_write4       ;                       ' 10    |
1935   0E9E             
1936   0E9E             com_ym_key_w5                           ; 46                    ' 80
1937   0E9E                         wait154                     ; sync                  ' 174   |
1937   0E9E 3E 09       >            LD      A, w            ; 7-2
1937   0EA0 3D          >            DEC     A               ; 4
1937   0EA1 20 FD       >            JR      NZ, .loop       ; 12
1937   0EA3 00          >            NOP
1937   0EA4 00          >            NOP
1938   0EA5 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1939   0EA8 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1940   0EAB             
1941   0EAB                         sampleOutputSafe            ;                       ' 46    | (46)
1941   0EAB D9          >            EXX                     ;                           ' 4     | 4
1941   0EAC 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
1941   0EAE 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1941   0EAF 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1941   0EB0 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1941   0EB2 12          >            LD      (DE), A         ; play sample               ' 7     |
1941   0EB3 D9          >            EXX                     ;                           ' 4     | (46)
1942   0EB4             
1943   0EB4                         wait16                      ; sync                  ' 16    |
1943   0EB4 18 00       >            JR      .loop
1943   0EB6 00          >            NOP
1944   0EB7                         waitYMReadyFast             ; wait YM to be ready   ' 22    |
1944   0EB7 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1944   0EB9 C2 B7 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1945   0EBC 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 58 (104)
1946   0EBE C3 DD 0E                JP      ym_key_write5       ;                       ' 10    |
1947   0EC1             
1948   0EC1             
1949   0EC1             ym_key_write1                           ;                       ' 124
1950   0EC1 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1951   0EC2 1C                      INC     E                   ; next data             ' 4     |
1952   0EC3                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (164)
1952   0EC3 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1952   0EC5 C2 C3 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1953   0EC8 02                      LD      (BC), A             ; write to YM           ' 7     |
1954   0EC9             
1955   0EC9             ym_key_write0                           ;                       ' 164
1956   0EC9 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1957   0ECA 1C                      INC     E                   ; next data             ' 4     |
1958   0ECB                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (204)
1958   0ECB CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1958   0ECD C2 CB 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1959   0ED0 02                      LD      (BC), A             ; write to YM           ' 7     |
1960   0ED1             
1961   0ED1                         wait8                       ; sync                  ' 8     |
1961   0ED1 00          >            NOP
1961   0ED2 00          >            NOP
1962   0ED3                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (244)
1962   0ED3 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1962   0ED5 C2 D3 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1963   0ED8 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1964   0EDA             
1965   0EDA C3 17 0A                JP      execute_xgm         ;                       ' 10    | (254)
1966   0EDD             
1967   0EDD             ym_key_write5                           ;                       ' 104
1968   0EDD 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1969   0EDE 1C                      INC     E                   ; next data             ' 4     |
1970   0EDF                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (144)
1970   0EDF CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1970   0EE1 C2 DF 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1971   0EE4 02                      LD      (BC), A             ; write to YM           ' 7     |
1972   0EE5             
1973   0EE5             ym_key_write4                           ;                       ' 144
1974   0EE5 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1975   0EE6 1C                      INC     E                   ; next data             ' 4     |
1976   0EE7                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (184)
1976   0EE7 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1976   0EE9 C2 E7 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1977   0EEC 02                      LD      (BC), A             ; write to YM           ' 7     |
1978   0EED             
1979   0EED             ym_key_write3                           ;                       ' 184
1980   0EED 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1981   0EEE 1C                      INC     E                   ; next data             ' 4     |
1982   0EEF                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (224)
1982   0EEF CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1982   0EF1 C2 EF 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1983   0EF4 02                      LD      (BC), A             ; write to YM           ' 7     |
1984   0EF5             
1985   0EF5                         wait8                       ; sync                  ' 8     |
1985   0EF5 00          >            NOP
1985   0EF6 00          >            NOP
1986   0EF7                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 30 (254)
1986   0EF7 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1986   0EF9 C2 F7 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1987   0EFC             
1988   0EFC             ym_key_write2
1989   0EFC                         sampleOutputSafe            ;                       ' 46    | (46)
1989   0EFC D9          >            EXX                     ;                           ' 4     | 4
1989   0EFD 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
1989   0EFF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1989   0F00 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1989   0F01 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1989   0F03 12          >            LD      (DE), A         ; play sample               ' 7     |
1989   0F04 D9          >            EXX                     ;                           ' 4     | (46)
1990   0F05             
1991   0F05                         wait8                       ; sync                  ' 8     |
1991   0F05 00          >            NOP
1991   0F06 00          >            NOP
1992   0F07                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (86)
1992   0F07 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1992   0F09 C2 07 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1993   0F0C 36 28                   LD      (HL), $28           ; restore write to key  ' 10    |
1994   0F0E             
1995   0F0E 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1996   0F0F 13                      INC     DE                  ; next data             ' 6     |
1997   0F10                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (126)
1997   0F10 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1997   0F12 C2 10 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1998   0F15 02                      LD      (BC), A             ; write to YM           ' 7     |
1999   0F16             
2000   0F16             .write1
2001   0F16 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2002   0F17 1C                      INC     E                   ; next data             ' 4     |
2003   0F18                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (166)
2003   0F18 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2003   0F1A C2 18 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2004   0F1D 02                      LD      (BC), A             ; write to YM           ' 7     |
2005   0F1E             
2006   0F1E             .write0
2007   0F1E 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2008   0F1F 1C                      INC     E                   ; next data             ' 4     |
2009   0F20                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (206)
2009   0F20 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2009   0F22 C2 20 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2010   0F25 02                      LD      (BC), A             ; write to YM           ' 7     |
2011   0F26             
2012   0F26                         wait7                       ; sync                  ' 7     |
2012   0F26 3E 00       >            LD      A, $0
2013   0F28                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 39 (245)
2013   0F28 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2013   0F2A C2 28 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2014   0F2D 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
2015   0F2F             
2016   0F2F C3 17 0A                JP      execute_xgm         ;                       ' 10    | (254+1)
2017   0F32             
2018   0F32             
2019   0F32             ; PCM command
2020   0F32             ; -----------
2021   0F32             
2022   0F32             com_pcm_p0_ch0                          ; 50                    ' 80
2023   0F32 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2024   0F34 C3 82 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2025   0F37             
2026   0F37             com_pcm_p1_ch0                          ; 54                    ' 80
2027   0F37 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2028   0F39 C3 82 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2029   0F3C             
2030   0F3C             com_pcm_p2_ch0                          ; 58                    ' 80
2031   0F3C 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2032   0F3E C3 82 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2033   0F41             
2034   0F41             com_pcm_p3_ch0                          ; 5C                    ' 80
2035   0F41 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2036   0F43 C3 82 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2037   0F46             
2038   0F46             com_pcm_p0_ch1                          ; 51                    ' 80
2039   0F46 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2040   0F48 C3 B1 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | 17 (97)
2041   0F4B             
2042   0F4B             com_pcm_p1_ch1                          ; 55                    ' 80
2043   0F4B 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2044   0F4D C3 82 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2045   0F50             
2046   0F50             com_pcm_p2_ch1                          ; 59                    ' 80
2047   0F50 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2048   0F52 C3 B1 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | (119)
2049   0F55             
2050   0F55             com_pcm_p3_ch1                          ; 5D                    ' 80
2051   0F55 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2052   0F57 C3 B1 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | (119)
2053   0F5A             
2054   0F5A             com_pcm_p0_ch2                          ; 52                    ' 80
2055   0F5A 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2056   0F5C C3 E0 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2057   0F5F             
2058   0F5F             com_pcm_p1_ch2                          ; 56                    ' 80
2059   0F5F 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2060   0F61 C3 E0 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2061   0F64             
2062   0F64             com_pcm_p2_ch2                          ; 5A                    ' 80
2063   0F64 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2064   0F66 C3 E0 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2065   0F69             
2066   0F69             com_pcm_p3_ch2                          ; 5E                    ' 80
2067   0F69 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2068   0F6B C3 E0 0F                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2069   0F6E             
2070   0F6E             com_pcm_p0_ch3                          ; 53                    ' 80
2071   0F6E 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2072   0F70 C3 0F 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2073   0F73             
2074   0F73             com_pcm_p1_ch3                          ; 57                    ' 80
2075   0F73 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2076   0F75 C3 0F 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2077   0F78             
2078   0F78             com_pcm_p2_ch3                          ; 5B                    ' 80
2079   0F78 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2080   0F7A C3 0F 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2081   0F7D             
2082   0F7D             com_pcm_p3_ch3                          ; 5F                    ' 80
2083   0F7D 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2084   0F7F C3 0F 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2085   0F82             
2086   0F82             
2087   0F82             com_pcm_ch0                             ;                       ' 97
2088   0F82                         handlePCMCommandXGM 0       ; handle command        ' 142   |
2088   0F82 21 14 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2088   0F85 79          >            LD      A, C                    ; A = new prio              ' 4     |
2088   0F86 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2088   0F87 D2 97 0F    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2088   0F8A 1C          >            INC     E                       ; next XGM command          ' 4     |
2088   0F8B 3E 05       >            LD      A, w            ; 7-2
2088   0F8D 3D          >            DEC     A               ; 4
2088   0F8E 20 FD       >            JR      NZ, .loop       ; 12
2088   0F90 00          >            NOP
2088   0F91 00          >            NOP
2088   0F92 3E 00       >            LD      A, $0
2088   0F94 C3 AD 0F    >            JP      .end                    ; done                      ' 10    |
2088   0F97 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2088   0F98 1C          >            INC     E                       ; next XGM command          ' 4     |
2088   0F99 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2088   0F9A 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2088   0F9C 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2088   0F9E 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2088   0F9F 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2088   0FA1 87          >            ADD     A                       ;                           ' 4     |
2088   0FA2 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2088   0FA3 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2088   0FA4 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2088   0FA5 E1          >            POP     HL                      ; copy params               ' 10    |
2088   0FA6 22 16 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2088   0FA9 E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2088   0FAA 22 18 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2089   0FAD                         wait4                       ; sync                  ' 4     | 156 (254-1)
2089   0FAD 00          >            NOP
2090   0FAE C3 17 0A                JP      execute_xgm         ;                       ' 10    |
2091   0FB1             
2092   0FB1             com_pcm_ch1                             ;                       ' 97
2093   0FB1                         handlePCMCommandXGM 1       ; handle command        ' 142   |
2093   0FB1 21 1C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2093   0FB4 79          >            LD      A, C                    ; A = new prio              ' 4     |
2093   0FB5 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2093   0FB6 D2 C6 0F    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2093   0FB9 1C          >            INC     E                       ; next XGM command          ' 4     |
2093   0FBA 3E 05       >            LD      A, w            ; 7-2
2093   0FBC 3D          >            DEC     A               ; 4
2093   0FBD 20 FD       >            JR      NZ, .loop       ; 12
2093   0FBF 00          >            NOP
2093   0FC0 00          >            NOP
2093   0FC1 3E 00       >            LD      A, $0
2093   0FC3 C3 DC 0F    >            JP      .end                    ; done                      ' 10    |
2093   0FC6 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2093   0FC7 1C          >            INC     E                       ; next XGM command          ' 4     |
2093   0FC8 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2093   0FC9 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2093   0FCB 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2093   0FCD 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2093   0FCE 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2093   0FD0 87          >            ADD     A                       ;                           ' 4     |
2093   0FD1 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2093   0FD2 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2093   0FD3 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2093   0FD4 E1          >            POP     HL                      ; copy params               ' 10    |
2093   0FD5 22 1E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2093   0FD8 E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2093   0FD9 22 20 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2094   0FDC                         wait4                       ; sync                  ' 4     | 156 (254-1)
2094   0FDC 00          >            NOP
2095   0FDD C3 17 0A                JP      execute_xgm         ;                       ' 10    |
2096   0FE0             
2097   0FE0             com_pcm_ch2                             ;                       ' 97
2098   0FE0                         handlePCMCommandXGM 2       ; handle command        ' 142   |
2098   0FE0 21 24 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2098   0FE3 79          >            LD      A, C                    ; A = new prio              ' 4     |
2098   0FE4 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2098   0FE5 D2 F5 0F    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2098   0FE8 1C          >            INC     E                       ; next XGM command          ' 4     |
2098   0FE9 3E 05       >            LD      A, w            ; 7-2
2098   0FEB 3D          >            DEC     A               ; 4
2098   0FEC 20 FD       >            JR      NZ, .loop       ; 12
2098   0FEE 00          >            NOP
2098   0FEF 00          >            NOP
2098   0FF0 3E 00       >            LD      A, $0
2098   0FF2 C3 0B 10    >            JP      .end                    ; done                      ' 10    |
2098   0FF5 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2098   0FF6 1C          >            INC     E                       ; next XGM command          ' 4     |
2098   0FF7 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2098   0FF8 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2098   0FFA 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2098   0FFC 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2098   0FFD 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2098   0FFF 87          >            ADD     A                       ;                           ' 4     |
2098   1000 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2098   1001 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2098   1002 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2098   1003 E1          >            POP     HL                      ; copy params               ' 10    |
2098   1004 22 26 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2098   1007 E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2098   1008 22 28 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2099   100B                         wait4                       ; sync                  ' 4     | 156 (254-1)
2099   100B 00          >            NOP
2100   100C C3 17 0A                JP      execute_xgm         ;                       ' 10    |
2101   100F             
2102   100F             com_pcm_ch3                             ;                       ' 97
2103   100F                         handlePCMCommandXGM 3       ; handle command        ' 142   |
2103   100F 21 2C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2103   1012 79          >            LD      A, C                    ; A = new prio              ' 4     |
2103   1013 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2103   1014 D2 24 10    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2103   1017 1C          >            INC     E                       ; next XGM command          ' 4     |
2103   1018 3E 05       >            LD      A, w            ; 7-2
2103   101A 3D          >            DEC     A               ; 4
2103   101B 20 FD       >            JR      NZ, .loop       ; 12
2103   101D 00          >            NOP
2103   101E 00          >            NOP
2103   101F 3E 00       >            LD      A, $0
2103   1021 C3 3A 10    >            JP      .end                    ; done                      ' 10    |
2103   1024 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2103   1025 1C          >            INC     E                       ; next XGM command          ' 4     |
2103   1026 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2103   1027 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2103   1029 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2103   102B 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2103   102C 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2103   102E 87          >            ADD     A                       ;                           ' 4     |
2103   102F 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2103   1030 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2103   1031 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2103   1032 E1          >            POP     HL                      ; copy params               ' 10    |
2103   1033 22 2E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2103   1036 E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2103   1037 22 30 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2104   103A                         wait4                       ; sync                  ' 4     | 156 (254-1)
2104   103A 00          >            NOP
2105   103B C3 17 0A                JP      execute_xgm         ;                       ' 10    |
2106   103E             
2107   103E             
2108   103E             
2109   103E             ; STATE command
2110   103E             ; -------------
2111   103E             
2112   103E             com_state_w0                            ; 60                    ' 80
2113   103E                         wait114                     ; sync                  ' 114   |
2113   103E 3E 07       >            LD      A, w            ; 7-2
2113   1040 3D          >            DEC     A               ; 4
2113   1041 20 FD       >            JR      NZ, .loop       ; 12
2114   1043 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 131 (211)
2115   1045 C3 8B 11                JP      state_w0            ; execute               ' 10    |
2116   1048             
2117   1048             com_state_w1                            ; 61                    ' 80
2118   1048                         wait81                      ; sync                  ' 81    |
2118   1048 3E 04       >            LD      A, w            ; 7-2
2118   104A 3D          >            DEC     A               ; 4
2118   104B 20 FD       >            JR      NZ, .loop       ; 12
2118   104D 00          >            NOP
2118   104E 00          >            NOP
2118   104F 3E 00       >            LD      A, $0
2119   1051 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 98 (178)
2120   1053 C3 85 11                JP      state_w1            ; execute               ' 10    |
2121   1056             
2122   1056             com_state_w2                            ; 62                    ' 80
2123   1056                         wait48                      ; sync                  ' 48    |
2123   1056 ED 4F       >            LD      R, A
2123   1058 ED 4F       >            LD      R, A
2123   105A ED 4F       >            LD      R, A
2123   105C ED 4F       >            LD      R, A
2123   105E 18 00       >            JR      .loop
2124   1060 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 65 (145)
2125   1062 C3 7F 11                JP      state_w2            ; execute               ' 10    |
2126   1065             
2127   1065             com_state_w3                            ; 63                    ' 80
2128   1065                         wait15                      ; sync                  ' 15    |
2128   1065 00          >            NOP
2128   1066 00          >            NOP
2128   1067 3E 00       >            LD      A, $0
2129   1069 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 32 (112)
2130   106B C3 79 11                JP      state_w3            ; execute               ' 10    |
2131   106E             
2132   106E             com_state_w4                            ; 64                    ' 80
2133   106E                         wait174                     ; sync                  ' 174   | (254)
2133   106E 3E 0A       >            LD      A, w            ; 7-2
2133   1070 3D          >            DEC     A               ; 4
2133   1071 20 FD       >            JR      NZ, .loop       ; 12
2133   1073 18 00       >            JR      .loop
2134   1075                         sampleOutput                ; sample output         ' 36    | (36)
2134   1075 D9          >            EXX                     ;                           ' 4     | 4
2134   1076 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2134   1077 03          >            INC     BC              ; increment read address    ' 6     |
2134   1078 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2134   107A 12          >            LD      (DE), A         ; play sample               ' 7     |
2134   107B D9          >            EXX                     ;                           ' 4     | (36)
2135   107C             
2136   107C                         wait26                      ; sync                  ' 26    |
2136   107C ED 4F       >            LD      R, A
2136   107E ED 4F       >            LD      R, A
2136   1080 00          >            NOP
2136   1081 00          >            NOP
2137   1082 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 43 (79)
2138   1084 C3 73 11                JP      state_w4            ; execute               ' 10    |
2139   1087             
2140   1087             com_state_w5                            ; 65                    ' 80
2141   1087                         wait157                     ; sync                  ' 157   |
2141   1087 3E 09       >            LD      A, w            ; 7-2
2141   1089 3D          >            DEC     A               ; 4
2141   108A 20 FD       >            JR      NZ, .loop       ; 12
2141   108C 3E 00       >            LD      A, $0
2141   108E 00          >            NOP
2142   108F 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 174 (254)
2143   1091 C3 63 11                JP      state_w5            ; execute               ' 10    |
2144   1094             
2145   1094             com_state_w6                            ; 66                    ' 80
2146   1094                         wait124                     ; sync                  ' 124   |
2146   1094 3E 07       >            LD      A, w            ; 7-2
2146   1096 3D          >            DEC     A               ; 4
2146   1097 20 FD       >            JR      NZ, .loop       ; 12
2146   1099 C3 9C 10    >            JP      .loop
2147   109C 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 141 (221)
2148   109E C3 5D 11                JP      state_w6            ; execute               ' 10    |
2149   10A1             
2150   10A1             com_state_w7                            ; 67                    ' 80
2151   10A1                         wait91                      ; sync                  ' 91    |
2151   10A1 3E 05       >            LD      A, w            ; 7-2
2151   10A3 3D          >            DEC     A               ; 4
2151   10A4 20 FD       >            JR      NZ, .loop       ; 12
2151   10A6 ED 4F       >            LD      R, A
2152   10A8 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 108 (188)
2153   10AA C3 57 11                JP      state_w7            ; execute               ' 10    |
2154   10AD             
2155   10AD             com_state_w8                            ; 68                    ' 80
2156   10AD                         wait58                      ; sync                  ' 58    |
2156   10AD 3E 03       >            LD      A, w            ; 7-2
2156   10AF 3D          >            DEC     A               ; 4
2156   10B0 20 FD       >            JR      NZ, .loop       ; 12
2156   10B2 00          >            NOP
2156   10B3 00          >            NOP
2157   10B4 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 75 (155)
2158   10B6 C3 51 11                JP      state_w8            ; execute               ' 10    |
2159   10B9             
2160   10B9             com_state_w9                            ; 69                    ' 80
2161   10B9                         wait25                      ; sync                  ' 25    |
2161   10B9 ED 4F       >            LD      R, A
2161   10BB ED 4F       >            LD      R, A
2161   10BD 3E 00       >            LD      A, $0
2162   10BF 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 42 (122)
2163   10C1 C3 4B 11                JP      state_w9            ; execute               ' 10    |
2164   10C4             
2165   10C4             com_state_wA                            ; 6A                    ' 80
2166   10C4                         wait174                     ; sync                  ' 174   | (254)
2166   10C4 3E 0A       >            LD      A, w            ; 7-2
2166   10C6 3D          >            DEC     A               ; 4
2166   10C7 20 FD       >            JR      NZ, .loop       ; 12
2166   10C9 18 00       >            JR      .loop
2167   10CB                         sampleOutput                ; sample output         ' 36    | (36)
2167   10CB D9          >            EXX                     ;                           ' 4     | 4
2167   10CC 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2167   10CD 03          >            INC     BC              ; increment read address    ' 6     |
2167   10CE CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2167   10D0 12          >            LD      (DE), A         ; play sample               ' 7     |
2167   10D1 D9          >            EXX                     ;                           ' 4     | (36)
2168   10D2             
2169   10D2                         wait36                      ; sync                  ' 36    |
2169   10D2 ED 4F       >            LD      R, A
2169   10D4 ED 4F       >            LD      R, A
2169   10D6 ED 4F       >            LD      R, A
2169   10D8 ED 4F       >            LD      R, A
2170   10DA 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 53 (89)
2171   10DC C3 45 11                JP      state_wA            ; execute               ' 10    |
2172   10DF             
2173   10DF             com_state_wB                            ; 6B                    ' 80
2174   10DF                         wait157                     ; sync                  ' 157   |
2174   10DF 3E 09       >            LD      A, w            ; 7-2
2174   10E1 3D          >            DEC     A               ; 4
2174   10E2 20 FD       >            JR      NZ, .loop       ; 12
2174   10E4 3E 00       >            LD      A, $0
2174   10E6 00          >            NOP
2175   10E7 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 174 (254)
2176   10E9 C3 33 11                JP      state_wB            ; execute               ' 10    |
2177   10EC             
2178   10EC             com_state_wC                            ; 6C                    ' 80
2179   10EC                         wait124                     ; sync                  ' 124   |
2179   10EC 3E 07       >            LD      A, w            ; 7-2
2179   10EE 3D          >            DEC     A               ; 4
2179   10EF 20 FD       >            JR      NZ, .loop       ; 12
2179   10F1 C3 F4 10    >            JP      .loop
2180   10F4 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 141 (221)
2181   10F6 C3 2D 11                JP      state_wC            ; execute               ' 10    |
2182   10F9             
2183   10F9             com_state_wD                            ; 6D                    ' 80
2184   10F9                         wait91                      ; sync                  ' 91    |
2184   10F9 3E 05       >            LD      A, w            ; 7-2
2184   10FB 3D          >            DEC     A               ; 4
2184   10FC 20 FD       >            JR      NZ, .loop       ; 12
2184   10FE ED 4F       >            LD      R, A
2185   1100 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 108 (188)
2186   1102 C3 27 11                JP      state_wD            ; execute               ' 10    |
2187   1105             
2188   1105             com_state_wE                            ; 6E                    ' 80
2189   1105                         wait58                      ; sync                  ' 58    |
2189   1105 3E 03       >            LD      A, w            ; 7-2
2189   1107 3D          >            DEC     A               ; 4
2189   1108 20 FD       >            JR      NZ, .loop       ; 12
2189   110A 00          >            NOP
2189   110B 00          >            NOP
2190   110C 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 75 (155)
2191   110E C3 21 11                JP      state_wE            ; execute               ' 10    |
2192   1111             
2193   1111             com_state_wF                            ; 6F                    ' 80
2194   1111                         wait35                      ; sync                  ' 35    |
2194   1111 18 00       >            JR      .loop
2194   1113 ED 4F       >            LD      R, A
2194   1115 3E 00       >            LD      A, $0
2194   1117 3E 00       >            LD      A, $0
2195   1119 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 42 (122)
2196   111B             
2197   111B             state_wF                                ;                       ' 122
2198   111B 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2199   111C 1C                      INC     E                   ; next data             ' 4     |
2200   111D 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (155)
2201   111E 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2202   111F 1C                      INC     E                   ; next data             ' 4     |
2203   1120 77                      LD      (HL), A             ; write to save         ' 7     |
2204   1121             
2205   1121             state_wE
2206   1121 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2207   1122 1C                      INC     E                   ; next data             ' 4     |
2208   1123 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (188)
2209   1124 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2210   1125 1C                      INC     E                   ; next data             ' 4     |
2211   1126 77                      LD      (HL), A             ; write to save         ' 7     |
2212   1127             
2213   1127             state_wD
2214   1127 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2215   1128 1C                      INC     E                   ; next data             ' 4     |
2216   1129 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (221)
2217   112A 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2218   112B 1C                      INC     E                   ; next data             ' 4     |
2219   112C 77                      LD      (HL), A             ; write to save         ' 7     |
2220   112D             
2221   112D             state_wC
2222   112D 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2223   112E 1C                      INC     E                   ; next data             ' 4     |
2224   112F 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (254)
2225   1130 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2226   1131 1C                      INC     E                   ; next data             ' 4     |
2227   1132 77                      LD      (HL), A             ; write to save         ' 7     |
2228   1133             
2229   1133             state_wB
2230   1133                         sampleOutput                ; sample output         ' 36    |
2230   1133 D9          >            EXX                     ;                           ' 4     | 4
2230   1134 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2230   1135 03          >            INC     BC              ; increment read address    ' 6     |
2230   1136 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2230   1138 12          >            LD      (DE), A         ; play sample               ' 7     |
2230   1139 D9          >            EXX                     ;                           ' 4     | (36)
2231   113A                         wait20                      ; wait                  ' 20    | (56)
2231   113A 3E 00       >            LD      A, $0
2231   113C 00          >            NOP
2231   113D ED 4F       >            LD      R, A
2232   113F             
2233   113F 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2234   1140 1C                      INC     E                   ; next data             ' 4     |
2235   1141 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (89)
2236   1142 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2237   1143 1C                      INC     E                   ; next data             ' 4     |
2238   1144 77                      LD      (HL), A             ; write to save         ' 7     |
2239   1145             
2240   1145             state_wA
2241   1145 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2242   1146 1C                      INC     E                   ; next data             ' 4     |
2243   1147 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (122)
2244   1148 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2245   1149 1C                      INC     E                   ; next data             ' 4     |
2246   114A 77                      LD      (HL), A             ; write to save         ' 7     |
2247   114B             
2248   114B             state_w9
2249   114B 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2250   114C 1C                      INC     E                   ; next data             ' 4     |
2251   114D 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (155)
2252   114E 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2253   114F 1C                      INC     E                   ; next data             ' 4     |
2254   1150 77                      LD      (HL), A             ; write to save         ' 7     |
2255   1151             
2256   1151             state_w8
2257   1151 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2258   1152 1C                      INC     E                   ; next data             ' 4     |
2259   1153 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (188)
2260   1154 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2261   1155 1C                      INC     E                   ; next data             ' 4     |
2262   1156 77                      LD      (HL), A             ; write to save         ' 7     |
2263   1157             
2264   1157             state_w7
2265   1157 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2266   1158 1C                      INC     E                   ; next data             ' 4     |
2267   1159 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (221)
2268   115A 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2269   115B 1C                      INC     E                   ; next data             ' 4     |
2270   115C 77                      LD      (HL), A             ; write to save         ' 7     |
2271   115D             
2272   115D             state_w6
2273   115D 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2274   115E 1C                      INC     E                   ; next data             ' 4     |
2275   115F 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (254)
2276   1160 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2277   1161 1C                      INC     E                   ; next data             ' 4     |
2278   1162 77                      LD      (HL), A             ; write to save         ' 7     |
2279   1163             
2280   1163             state_w5
2281   1163                         sampleOutput                ; sample output         ' 36    |
2281   1163 D9          >            EXX                     ;                           ' 4     | 4
2281   1164 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2281   1165 03          >            INC     BC              ; increment read address    ' 6     |
2281   1166 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2281   1168 12          >            LD      (DE), A         ; play sample               ' 7     |
2281   1169 D9          >            EXX                     ;                           ' 4     | (36)
2282   116A                         wait10                      ; wait                  ' 10    | (46)
2282   116A C3 6D 11    >            JP      .loop
2283   116D             
2284   116D 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2285   116E 1C                      INC     E                   ; next data             ' 4     |
2286   116F 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (79)
2287   1170 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2288   1171 1C                      INC     E                   ; next data             ' 4     |
2289   1172 77                      LD      (HL), A             ; write to save         ' 7     |
2290   1173             
2291   1173             state_w4
2292   1173 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2293   1174 1C                      INC     E                   ; next data             ' 4     |
2294   1175 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (112)
2295   1176 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2296   1177 1C                      INC     E                   ; next data             ' 4     |
2297   1178 77                      LD      (HL), A             ; write to save         ' 7     |
2298   1179             
2299   1179             state_w3
2300   1179 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2301   117A 1C                      INC     E                   ; next data             ' 4     |
2302   117B 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (145)
2303   117C 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2304   117D 1C                      INC     E                   ; next data             ' 4     |
2305   117E 77                      LD      (HL), A             ; write to save         ' 7     |
2306   117F             
2307   117F             state_w2
2308   117F 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2309   1180 1C                      INC     E                   ; next data             ' 4     |
2310   1181 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (178)
2311   1182 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2312   1183 1C                      INC     E                   ; next data             ' 4     |
2313   1184 77                      LD      (HL), A             ; write to save         ' 7     |
2314   1185             
2315   1185             state_w1
2316   1185 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2317   1186 1C                      INC     E                   ; next data             ' 4     |
2318   1187 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (211)
2319   1188 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2320   1189 1C                      INC     E                   ; next data             ' 4     |
2321   118A 77                      LD      (HL), A             ; write to save         ' 7     |
2322   118B             
2323   118B             state_w0
2324   118B 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2325   118C 1C                      INC     E                   ; next data             ' 4     |
2326   118D 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (244)
2327   118E 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2328   118F 1C                      INC     E                   ; next data             ' 4     |
2329   1190 77                      LD      (HL), A             ; write to save         ' 7     |
2330   1191             
2331   1191 C3 17 0A                JP      execute_xgm         ;                       ' 10    | (254)
2332   1194             
2333   1194             
2334   1194             ; NULL command
2335   1194             ; ------------
2336   1194             
2337   1194             com_null                                ; 01-0F / 60-7D         ' 80
2338   1194                         wait164                     ; sync                  ' 164   |
2338   1194 3E 09       >            LD      A, w            ; 7-2
2338   1196 3D          >            DEC     A               ; 4
2338   1197 20 FD       >            JR      NZ, .loop       ; 12
2338   1199 ED 4F       >            LD      R, A
2338   119B ED 4F       >            LD      R, A
2339   119D C3 17 0A                JP      execute_xgm         ;                       ' 10    | 174 (254)
2340   11A0             
2341   11A0             
2342   11A0             ; EXTRA FRAME command
2343   11A0             ; -------------------
2344   11A0             
2345   11A0             com_extra_frm                           ; FD                            ' 80
2346   11A0             
2347   11A0 3E 01                   LD      A, $1               ;                               ' 7     |
2348   11A2 32 12 01                LD      (MODIFYING_F), A    ; we are modifying variable     ' 13    | 20 (100)
2349   11A5             
2350   11A5 3A 13 01                LD      A, (PENDING_FRM)    ;                               ' 13    |
2351   11A8 3C                      INC     A                   ; force process 1 more frame    ' 4     | 30 (130)
2352   11A9 32 13 01                LD      (PENDING_FRM), A    ;                               ' 13    |
2353   11AC             
2354   11AC AF                      XOR     A                   ;                               ' 4     |
2355   11AD 32 12 01                LD      (MODIFYING_F), A    ; no more modifying variable    ' 13    | 17 (147)
2356   11B0             
2357   11B0                         wait97                      ; sync                          ' 97    | 107 (254)
2357   11B0 3E 05       >            LD      A, w            ; 7-2
2357   11B2 3D          >            DEC     A               ; 4
2357   11B3 20 FD       >            JR      NZ, .loop       ; 12
2357   11B5 00          >            NOP
2357   11B6 00          >            NOP
2357   11B7 3E 00       >            LD      A, $0
2358   11B9 C3 17 0A                JP      execute_xgm         ;                               ' 10    |
2359   11BC             
2360   11BC             
2361   11BC             ; LOOP command
2362   11BC             ; ------------
2363   11BC             
2364   11BC             com_loop                                ; FE                        ' 80
2365   11BC 1A                      LD      A, (DE)             ; A = loop addr b7-b0       ' 7     |
2366   11BD 6F                      LD      L, A                ; L = loop addr b7-b0       ' 4     |
2367   11BE 1C                      INC     E                   ; next param                ' 4     |
2368   11BF 1A                      LD      A, (DE)             ; A = loop addr b15-b8      ' 7     | 30 (110)
2369   11C0 67                      LD      H, A                ; HL = loop addr b15-b0     ' 4     |
2370   11C1 1C                      INC     E                   ; next param                ' 4     |
2371   11C2             
2372   11C2 ED 4B 04 01             LD      BC, (XGM_ARG_A+0)   ; BC = XGM base addr (ML)   ' 20    |
2373   11C6 09                      ADD     HL, BC              ; HL = XGM base addr + loop ' 11    | 47 (157)
2374   11C7 22 34 01                LD      (XGM_ADDR+0), HL    ; set new XGM addr (ML)     ' 16    |
2375   11CA             
2376   11CA 1A                      LD      A, (DE)             ; A = loop addr b23-b16     ' 7     |
2377   11CB 21 06 01                LD      HL, XGM_ARG_A+2     ; HL point XGM base adr H   ' 10    |
2378   11CE 8E                      ADC     (HL)                ; A = XGM base addr + loop  ' 7     | 41 (198)
2379   11CF 1C                      INC     E                   ; next param                ' 4     |
2380   11D0 32 36 01                LD      (XGM_ADDR+2), A     ; set new XGM addr (H)      ' 13    |
2381   11D3             
2382   11D3                         wait46                      ; sync                      ' 46    |
2382   11D3 3E 02       >            LD      A, w            ; 7-2
2382   11D5 3D          >            DEC     A               ; 4
2382   11D6 20 FD       >            JR      NZ, .loop       ; 12
2382   11D8 18 00       >            JR      .loop
2383   11DA C3 17 0A                JP      execute_xgm         ;                           ' 10    | 56 (254)
2384   11DD             
2385   11DD             
2386   11DD             ; END XGM command
2387   11DD             ; ---------------
2388   11DD             
2389   11DD             com_end                                 ; FF                        ' 80
2390   11DD 21 02 01                LD      HL, STATUS          ; HL = STATUS               ' 10    | 25 (105)
2391   11E0 CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status         ' 15    |
2392   11E2             
2393   11E2                         wait139                     ; sync                      ' 139   |
2393   11E2 3E 08       >            LD      A, w            ; 7-2
2393   11E4 3D          >            DEC     A               ; 4
2393   11E5 20 FD       >            JR      NZ, .loop       ; 12
2393   11E7 ED 4F       >            LD      R, A
2394   11E9 C3 17 0A                JP      execute_xgm         ;                           ' 10    | 149 (254)
2395   11EC             
2396   11EC             
2397   11EC             ; $BC+X+Y+Z
2398   11EC             do_xgm_again                            ;                           ' 135
2399   11EC 2D                      DEC     L                   ; HL point on MODIFYING_F   ' 4     |
2400   11ED 36 00                   LD      (HL), $0            ; no more modifying         ' 10    | 14 (149)
2401   11EF             
2402   11EF                         wait95                      ; sync                      ' 95    |
2402   11EF 3E 05       >            LD      A, w            ; 7-2
2402   11F1 3D          >            DEC     A               ; 4
2402   11F2 20 FD       >            JR      NZ, .loop       ; 12
2402   11F4 ED 4F       >            LD      R, A
2402   11F6 00          >            NOP
2403   11F7 C3 AF 02                JP      main_loop           ; restart loop (prep xgm)   ' 10    | 105 (254)
2404   11FA             
2405   11FA             ; $BC+X+Y+Z
2406   11FA             xgm_done                                ;                               ' 90
2407   11FA             
2408   11FA             ;    LD  A, (VCOUNTER)
2409   11FA             ;    LD  (DEBUG_8), A
2410   11FA             
2411   11FA 21 12 01                LD      HL, MODIFYING_F     ;                               ' 10    |
2412   11FD 36 01                   LD      (HL), $1            ; we are modifying variable     ' 10    | 24 (114)
2413   11FF 2C                      INC     L                   ; HL point on PENDING_FRM       ' 4     |
2414   1200             
2415   1200 35                      DEC     (HL)                ; still have frame to process ? ' 11    |
2416   1201 C2 EC 11                JP      NZ, do_xgm_again    ; do XGM process again          ' 10    | 21 (135)
2417   1204             
2418   1204 2D                      DEC     L                   ; HL point on MODIFYING_F       ' 4     |
2419   1205 36 00                   LD      (HL), $0            ; no more modifying variable    ' 10    | 14 (149)
2420   1207             
2421   1207             
2422   1207             ; execute external command
2423   1207             ; ------------------------
2424   1207             
2425   1207             ; $BC+X+Y+Z
2426   1207             external_com                            ;                           ' 149
2427   1207 31 00 16                LD      SP, STACK           ; restore stack             ' 10    |
2428   120A 21 00 01                LD      HL, COMMAND         ; HL point on COMMAND       ' 10    | 20 (159)
2429   120D             
2430   120D             .chk_xgm_play
2431   120D CB 76                   BIT     XGM_PLAY_SFT, (HL)  ; play XGM command ?        ' 12    |
2432   120F CA 2A 12                JP      Z, .chk_xgm_resume  ;                           ' 10    | 22 (181)
2433   1212             
2434   1212 CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear command             ' 15    |
2435   1214 2C                      INC     L                   ;                           ' 4     |
2436   1215 2C                      INC     L                   ; HL point on status        ' 4     | 38 (219)
2437   1216 CB F6                   SET     XGM_PLAY_SFT, (HL)  ; set play status           ' 15    |
2438   1218             
2439   1218 2A 04 01                LD      HL, (XGM_ARG_A)     ; set new XGM address       ' 16    |
2440   121B 22 34 01                LD      (XGM_ADDR), HL      ;                           ' 16    | 58 (277)
2441   121E 3A 06 01                LD      A, (XGM_ARG_A+2)    ;                           ' 13    |
2442   1221 32 36 01                LD      (XGM_ADDR+2),A      ;                           ' 13    |
2443   1224             
2444   1224 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2445   1227 C3 BC 12                JP      external_com_pcm    ; do PCM commands           ' 10    | 20 (254+43)
2446   122A                                                     ; +43 cycles here, ignore
2447   122A             
2448   122A             .chk_xgm_resume
2449   122A CB 6E                   BIT     XGM_RESUME_SFT, (HL)    ; play XGM command ?    ' 12    |
2450   122C CA 4B 12                JP      Z, .chk_xgm_stop        ;                       ' 10    | 22 (203)
2451   122F             
2452   122F CB AE                   RES     XGM_RESUME_SFT, (HL)    ; clear command         ' 15    |
2453   1231 2C                      INC     L                       ;                       ' 4     |
2454   1232 2C                      INC     L                       ; HL point on status    ' 4     | 38 (241)
2455   1233 CB F6                   SET     XGM_PLAY_SFT, (HL)      ; set play status       ' 15    |
2456   1235             
2457   1235 11 44 01                LD      DE, YM_RR_SAV       ; DE point on save state    ' 10    |
2458   1238 31 00 16                LD      SP, STACK           ; set STACK                 ' 10    | 20 (254+7)
2459   123B                                                     ; +7 cycles here, ignore
2460   123B             
2461   123B CD 8D 14                CALL    loadState           ; load state                ' 140+  | (140)
2462   123E             
2463   123E                         wait94                      ; sync                      ' 94    |
2463   123E 3E 05       >            LD      A, w            ; 7-2
2463   1240 3D          >            DEC     A               ; 4
2463   1241 20 FD       >            JR      NZ, .loop       ; 12
2463   1243 18 00       >            JR      .loop
2464   1245 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    | 114 (254)
2465   1248 C3 BC 12                JP      external_com_pcm    ; do PCM commands           ' 10    |
2466   124B             
2467   124B             .chk_xgm_stop
2468   124B CB 66                   BIT     XGM_STOP_SFT, (HL)  ; stop XGM command ?        ' 12    |
2469   124D CA B5 12                JP      Z, .chk_pcm0_pre    ;                           ' 10    | 22 (225)
2470   1250             
2471   1250 CB A6                   RES     XGM_STOP_SFT, (HL)  ; clear command             ' 15    |
2472   1252 2C                      INC     L                   ;                           ' 4     |
2473   1253 2C                      INC     L                   ; HL point on status        ' 4     | 38 (263)
2474   1254 CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status         ' 15    |
2475   1256             
2476   1256 11 64 01                LD      DE, YM_RR_OFF       ; DE point on off state     ' 10    |
2477   1259 31 00 16                LD      SP, STACK           ; set STACK                 ' 10    | 20 (254+29)
2478   125C                                                     ; +29 cycles here, ignore
2479   125C             
2480   125C CD 8D 14                CALL    loadState           ; stop music                ' 140+  | (140)
2481   125F             
2482   125F 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0      ' 10    |
2483   1262 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1      ' 10    | 20 (160)
2484   1265             
2485   1265 36 28                   LD      (HL), $28           ; set reg num to YM         ' 10    |
2486   1267                         waitYMReadyFast             ; wait YM to be ready       ' 22    | 32 (192)
2486   1267 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2486   1269 C2 67 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2487   126C             
2488   126C AF                      XOR     A                   ; A = $00                   ' 4     |
2489   126D 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2490   126E 3C                      INC     A                   ; A = $01                   ' 4     | 37 (229)
2491   126F                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2491   126F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2491   1271 C2 6F 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2492   1274             
2493   1274 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2494   1275                         waitYMReadyFast             ; wait YM to be ready       ' 22    | 29 (254+4)
2494   1275 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2494   1277 C2 75 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2495   127A             
2496   127A                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+4)
2496   127A D9          >            EXX                     ;                           ' 4     | 4
2496   127B 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
2496   127D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2496   127E 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2496   127F CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2496   1281 12          >            LD      (DE), A         ; play sample               ' 7     |
2496   1282 D9          >            EXX                     ;                           ' 4     | (46)
2497   1283             
2498   1283                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2498   1283 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2498   1285 C2 83 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2499   1288 36 28                   LD      (HL), $28           ; set reg num to YM         ' 10    |
2500   128A 3E 02                   LD      A, $02              ; A = $02                   ' 7     | 61 (111)
2501   128C                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2501   128C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2501   128E C2 8C 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2502   1291             
2503   1291 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2504   1292 C6 02                   ADD     $2                  ; A = $04                   ' 7     | 36 (147)
2505   1294                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2505   1294 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2505   1296 C2 94 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2506   1299             
2507   1299 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2508   129A 3C                      INC     A                   ; A = $05                   ' 4     | 33 (180)
2509   129B                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2509   129B CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2509   129D C2 9B 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2510   12A0             
2511   12A0 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2512   12A1 3C                      INC     A                   ; A = $06                   ' 4     | 33 (213)
2513   12A2                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2513   12A2 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2513   12A4 C2 A2 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2514   12A7             
2515   12A7 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2516   12A8                         waitYMReadyFast             ; wait YM to be ready       ' 22    | 39 (252)
2516   12A8 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2516   12AA C2 A8 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2517   12AD 36 2A                   LD      (HL), $2A           ; restore DAC write         ' 10    |
2518   12AF             
2519   12AF 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2520   12B2 C3 BC 12                JP      external_com_pcm    ; continue                  ' 10    | 20 (254+18)
2521   12B5                                                     ; +18 cycles here, ignore
2522   12B5             
2523   12B5             .chk_pcm0_pre                           ;                           ' 225
2524   12B5 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2525   12B8                         wait19                      ; sync                      ' 19    | 29 (254)
2525   12B8 18 00       >            JR      .loop
2525   12BA 3E 00       >            LD      A, $0
2526   12BC             
2527   12BC             ; $BD+X+Y+Z
2528   12BC             external_com_pcm
2529   12BC                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2529   12BC D9          >            EXX                     ;                           ' 4     | 4
2529   12BD 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2529   12BE 03          >            INC     BC              ; increment read address    ' 6     |
2529   12BF CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2529   12C1 12          >            LD      (DE), A         ; play sample               ' 7     |
2529   12C2 D9          >            EXX                     ;                           ' 4     | (36)
2530   12C3             
2531   12C3             .chk_pcm0
2532   12C3 CB 46                   BIT     CH0_SFT, (HL)       ; play PCM0 command ?       ' 12    |
2533   12C5 CA 0A 13                JP      Z, .chk_pcm1        ;                           ' 10    | 22 (58)
2534   12C8             
2535   12C8 CB 86                   RES     CH0_SFT, (HL)       ; clear command             ' 15    | (73)
2536   12CA             
2537   12CA                         handlePCMCommand 0          ; handle play PCM command   ' 157   | 167 (240)
2537   12CA ED 4B 08 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2537   12CE 21 14 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2537   12D1 79          >            LD      A, C                    ; A = new prio              ' 4     |
2537   12D2 BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2537   12D3 D2 E2 12    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2537   12D6 3E 05       >            LD      A, w            ; 7-2
2537   12D8 3D          >            DEC     A               ; 4
2537   12D9 20 FD       >            JR      NZ, .loop       ; 12
2537   12DB 3E 00       >            LD      A, $0
2537   12DD 3E 00       >            LD      A, $0
2537   12DF C3 F7 12    >            JP      .end                    ;                           ' 10    | 106 (157)
2537   12E2 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2537   12E3 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2537   12E4 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2537   12E6 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2537   12E8 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2537   12E9 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2537   12EB 6F          >            LD      L, A                    ;                           ' 4     |
2537   12EC 29          >            ADD     HL, HL                  ;                           ' 6     |
2537   12ED 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2537   12EE F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2537   12EF E1          >            POP     HL                      ; copy params               ' 10    |
2537   12F0 22 16 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2537   12F3 E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2537   12F4 22 18 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2538   12F7 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2539   12FA             
2540   12FA                         wait14                      ; sync                      ' 14    | (254)
2540   12FA 3E 00       >            LD      A, $0
2540   12FC 3E 00       >            LD      A, $0
2541   12FE             
2542   12FE                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2542   12FE D9          >            EXX                     ;                           ' 4     | 4
2542   12FF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2542   1300 03          >            INC     BC              ; increment read address    ' 6     |
2542   1301 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2542   1303 12          >            LD      (DE), A         ; play sample               ' 7     |
2542   1304 D9          >            EXX                     ;                           ' 4     | (36)
2543   1305             
2544   1305                         wait22                      ; sync                      ' 22    | (58)
2544   1305 ED 4F       >            LD      R, A
2544   1307 ED 4F       >            LD      R, A
2544   1309 00          >            NOP
2545   130A             
2546   130A             .chk_pcm1
2547   130A CB 4E                   BIT     CH1_SFT, (HL)       ; play PCM1 command ?       ' 12    |
2548   130C CA 50 13                JP      Z, .chk_pcm2        ;                           ' 10    | 22 (80)
2549   130F             
2550   130F CB 8E                   RES     CH1_SFT, (HL)       ; clear command             ' 15    | (95)
2551   1311             
2552   1311                         handlePCMCommand 1          ; handle play PCM command   ' 157   | (254-2)
2552   1311 ED 4B 0A 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2552   1315 21 1C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2552   1318 79          >            LD      A, C                    ; A = new prio              ' 4     |
2552   1319 BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2552   131A D2 29 13    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2552   131D 3E 05       >            LD      A, w            ; 7-2
2552   131F 3D          >            DEC     A               ; 4
2552   1320 20 FD       >            JR      NZ, .loop       ; 12
2552   1322 3E 00       >            LD      A, $0
2552   1324 3E 00       >            LD      A, $0
2552   1326 C3 3E 13    >            JP      .end                    ;                           ' 10    | 106 (157)
2552   1329 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2552   132A B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2552   132B 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2552   132D 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2552   132F 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2552   1330 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2552   1332 6F          >            LD      L, A                    ;                           ' 4     |
2552   1333 29          >            ADD     HL, HL                  ;                           ' 6     |
2552   1334 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2552   1335 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2552   1336 E1          >            POP     HL                      ; copy params               ' 10    |
2552   1337 22 1E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2552   133A E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2552   133B 22 20 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2553   133E             
2554   133E                         sampleOutput                ; *** sample output ****    ' 36    | (36-2)
2554   133E D9          >            EXX                     ;                           ' 4     | 4
2554   133F 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2554   1340 03          >            INC     BC              ; increment read address    ' 6     |
2554   1341 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2554   1343 12          >            LD      (DE), A         ; play sample               ' 7     |
2554   1344 D9          >            EXX                     ;                           ' 4     | (36)
2555   1345             
2556   1345                         wait36                      ; sync                      ' 36    | 46 (80)
2556   1345 ED 4F       >            LD      R, A
2556   1347 ED 4F       >            LD      R, A
2556   1349 ED 4F       >            LD      R, A
2556   134B ED 4F       >            LD      R, A
2557   134D 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2558   1350             
2559   1350             .chk_pcm2
2560   1350 CB 56                   BIT     CH2_SFT, (HL)       ; play PCM2 command ?       ' 12    |
2561   1352 CA 96 13                JP      Z, .chk_pcm3        ;                           ' 10    | 22 (102)
2562   1355             
2563   1355 CB 96                   RES     CH2_SFT, (HL)       ; clear command             ' 15    | (117)
2564   1357             
2565   1357                         handlePCMCommand 2          ; handle play PCM command   ' 157   | (254+20)
2565   1357 ED 4B 0C 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2565   135B 21 24 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2565   135E 79          >            LD      A, C                    ; A = new prio              ' 4     |
2565   135F BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2565   1360 D2 6F 13    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2565   1363 3E 05       >            LD      A, w            ; 7-2
2565   1365 3D          >            DEC     A               ; 4
2565   1366 20 FD       >            JR      NZ, .loop       ; 12
2565   1368 3E 00       >            LD      A, $0
2565   136A 3E 00       >            LD      A, $0
2565   136C C3 84 13    >            JP      .end                    ;                           ' 10    | 106 (157)
2565   136F 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2565   1370 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2565   1371 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2565   1373 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2565   1375 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2565   1376 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2565   1378 6F          >            LD      L, A                    ;                           ' 4     |
2565   1379 29          >            ADD     HL, HL                  ;                           ' 6     |
2565   137A 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2565   137B F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2565   137C E1          >            POP     HL                      ; copy params               ' 10    |
2565   137D 22 26 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2565   1380 E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2565   1381 22 28 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2566   1384             
2567   1384                         sampleOutput                ; *** sample output ****    ' 36    | (36+20)
2567   1384 D9          >            EXX                     ;                           ' 4     | 4
2567   1385 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2567   1386 03          >            INC     BC              ; increment read address    ' 6     |
2567   1387 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2567   1389 12          >            LD      (DE), A         ; play sample               ' 7     |
2567   138A D9          >            EXX                     ;                           ' 4     | (36)
2568   138B             
2569   138B                         wait36                      ; sync                      ' 36    | 46 (102)
2569   138B ED 4F       >            LD      R, A
2569   138D ED 4F       >            LD      R, A
2569   138F ED 4F       >            LD      R, A
2569   1391 ED 4F       >            LD      R, A
2570   1393 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2571   1396             
2572   1396             .chk_pcm3
2573   1396 CB 5E                   BIT     CH3_SFT, (HL)       ; play PCM3 command ?       ' 12    |
2574   1398 CA D8 13                JP      Z, ext_com_done     ;                           ' 10    | 22 (124)
2575   139B             
2576   139B CB 9E                   RES     CH3_SFT, (HL)       ; clear command             ' 15    | (139)
2577   139D             
2578   139D                         handlePCMCommand 3          ; handle play PCM command   ' 157   | (254+42)
2578   139D ED 4B 0E 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2578   13A1 21 2C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2578   13A4 79          >            LD      A, C                    ; A = new prio              ' 4     |
2578   13A5 BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2578   13A6 D2 B5 13    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2578   13A9 3E 05       >            LD      A, w            ; 7-2
2578   13AB 3D          >            DEC     A               ; 4
2578   13AC 20 FD       >            JR      NZ, .loop       ; 12
2578   13AE 3E 00       >            LD      A, $0
2578   13B0 3E 00       >            LD      A, $0
2578   13B2 C3 CA 13    >            JP      .end                    ;                           ' 10    | 106 (157)
2578   13B5 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2578   13B6 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2578   13B7 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2578   13B9 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2578   13BB 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2578   13BC 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2578   13BE 6F          >            LD      L, A                    ;                           ' 4     |
2578   13BF 29          >            ADD     HL, HL                  ;                           ' 6     |
2578   13C0 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2578   13C1 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2578   13C2 E1          >            POP     HL                      ; copy params               ' 10    |
2578   13C3 22 2E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2578   13C6 E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2578   13C7 22 30 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2579   13CA             
2580   13CA                         sampleOutput                ; *** sample output ****    ' 36    | (36+42)
2580   13CA D9          >            EXX                     ;                           ' 4     | 4
2580   13CB 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2580   13CC 03          >            INC     BC              ; increment read address    ' 6     |
2580   13CD CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2580   13CF 12          >            LD      (DE), A         ; play sample               ' 7     |
2580   13D0 D9          >            EXX                     ;                           ' 4     | (36)
2581   13D1             
2582   13D1                         wait46                      ; sync                      ' 46    | (124)
2582   13D1 3E 02       >            LD      A, w            ; 7-2
2582   13D3 3D          >            DEC     A               ; 4
2582   13D4 20 FD       >            JR      NZ, .loop       ; 12
2582   13D6 18 00       >            JR      .loop
2583   13D8             
2584   13D8             ; $BD+X+Y+Z
2585   13D8             ext_com_done                                ;                           ' 124
2586   13D8 01 02 01                LD      BC, STATUS              ; BC point on STATUS        ' 10    |
2587   13DB 0A                      LD      A, (BC)                 ; A = STATUS                ' 7     | 24 (148)
2588   13DC E6 F0                   AND     $F0                     ; clear PCM play status     ' 7     |
2589   13DE             
2590   13DE 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2591   13E1 ED 5B 16 01             LD      DE, (PCM_ADDR+(0*8))    ; DE = PCM ch0 addr         ' 20    |
2592   13E5 ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (211)
2593   13E7 28 02                   JR      Z, .ch0_silent          ; ch0 is not playing        ' 12    |
2594   13E9             
2595   13E9 F6 01                   OR      A, $01                  ; set play status for ch0   ' +2
2596   13EB             
2597   13EB             .ch0_silent
2598   13EB 08                      EX      AF,AF'                  ; preserve AF               ' 4     |
2599   13EC                         wait35                          ; sync                      ' 35    | 39 (254-4)
2599   13EC 18 00       >            JR      .loop
2599   13EE ED 4F       >            LD      R, A
2599   13F0 3E 00       >            LD      A, $0
2599   13F2 3E 00       >            LD      A, $0
2600   13F4             
2601   13F4             ; $BE+X+Y+Z
2602   13F4                         sampleOutput                    ; sample output             ' 36-4  | (36)
2602   13F4 D9          >            EXX                     ;                           ' 4     | 4
2602   13F5 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2602   13F6 03          >            INC     BC              ; increment read address    ' 6     |
2602   13F7 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2602   13F9 12          >            LD      (DE), A         ; play sample               ' 7     |
2602   13FA D9          >            EXX                     ;                           ' 4     | (36)
2603   13FB 08                      EX      AF,AF'                  ; restore AF                ' 4     |
2604   13FC             
2605   13FC 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2606   13FF ED 5B 1E 01             LD      DE, (PCM_ADDR+(1*8))    ; DE = PCM ch1 addr         ' 20    |
2607   1403 ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (99)
2608   1405 28 02                   JR      Z, .ch1_silent          ; ch1 is not playing        ' 12    |
2609   1407             
2610   1407 F6 02                   OR      A, $02                  ; set play status for ch1   ' +2
2611   1409             
2612   1409             .ch1_silent
2613   1409 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2614   140C ED 5B 26 01             LD      DE, (PCM_ADDR+(2*8))    ; DE = PCM ch2 addr         ' 20    |
2615   1410 ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (162)
2616   1412 28 02                   JR      Z, .ch2_silent          ; ch2 is not playing        ' 12    |
2617   1414             
2618   1414 F6 04                   OR      A, $04                  ; set play status for ch2   ' +2
2619   1416             
2620   1416             .ch2_silent
2621   1416 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2622   1419 ED 5B 2E 01             LD      DE, (PCM_ADDR+(3*8))    ; DE = PCM ch3 addr         ' 20    |
2623   141D ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (225)
2624   141F 28 02                   JR      Z, .ch3_silent          ; ch3 is not playing        ' 12    |
2625   1421             
2626   1421 F6 08                   OR      A, $08                  ; set play status for ch3   ' +2
2627   1423             
2628   1423             .ch3_silent
2629   1423 02                      LD      (BC), A                 ; set new status            ' 7     | (229)
2630   1424             
2631   1424 3A 11 01                LD      A, (PROTECT_ARG)        ; get BUS protect state     ' 13    |
2632   1427 B7                      OR      A                       ; no protecting ?           ' 4     | 27 (254+2)
2633   1428 CA AF 02                JP      Z, main_loop            ; process next frame        ' 10    |
2634   142B                                                         ; +2 cycles here, ignore...
2635   142B             
2636   142B             ; frame done
2637   142B             ;
2638   142B             ; 1 frame of PCM sample (256 bytes) is ~287 lines.
2639   142B             ;
2640   142B             ; NTSC: we should be <= 0xE8 to respect frame time here and we need to update PCM buffer 0.9 time per frame
2641   142B             ; so we have a free PCM mix frame from time to time.
2642   142B             ; Median (X+Y+Z) should be < 0x2A (< 42) plus some lines from the free PCM mix
2643   142B             ;
2644   142B             ; PAL: we should be <= 0118 to respect frame time here but we need to update PCM buffer 1.1 time per frame
2645   142B             ; so we have a penalty PCM mix frame from time to time.
2646   142B             ; Median (X+Y+Z) should be < 0x5A (< 90) minus some lines for the extra PCM mix
2647   142B             ; -------------------------------------------------------------------------------------
2648   142B             
2649   142B             
2650   142B             ; BUS protection wait (to avoid BUS contention with DMA)
2651   142B             ;
2652   142B             ; $BF+X+Y+Z
2653   142B             
2654   142B             bus_protect_wait
2655   142B                         sampleOutput                ; *** sample output *** ' 36    | (36)
2655   142B D9          >            EXX                     ;                           ' 4     | 4
2655   142C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2655   142D 03          >            INC     BC              ; increment read address    ' 6     |
2655   142E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2655   1430 12          >            LD      (DE), A         ; play sample               ' 7     |
2655   1431 D9          >            EXX                     ;                           ' 4     | (36)
2656   1432             
2657   1432                         wait105                     ; sync                  ' 105   | (141)
2657   1432 3E 06       >            LD      A, w            ; 7-2
2657   1434 3D          >            DEC     A               ; 4
2657   1435 20 FD       >            JR      NZ, .loop       ; 12
2657   1437 3E 00       >            LD      A, $0
2658   1439             
2659   1439 3A 11 01                LD      A, (PROTECT_ARG)    ; get BUS protect state ' 13    |
2660   143C B7                      OR      A                   ; no more protecting ?  ' 4     | 27 (168)
2661   143D CA 51 14                JP      Z, .continue        ; continue              ' 10    |
2662   1440             
2663   1440 2A 80 01                LD      HL, (IDLE_LOOP)     ;                       ' 16    |
2664   1443 23                      INC     HL                  ; increment idle loop   ' 6     | 38 (206)
2665   1444 22 80 01                LD      (IDLE_LOOP), HL     ;                       ' 16    |
2666   1447             
2667   1447 2A 82 01                LD      HL, (WAIT_LOOP)     ;                       ' 16    |
2668   144A 23                      INC     HL                  ; increment wait loop   ' 6     | 38 (244)
2669   144B 22 82 01                LD      (WAIT_LOOP), HL     ;                       ' 16    |
2670   144E             
2671   144E C3 2B 14                JP      bus_protect_wait    ; wait until bus is ok  ' 10    | (254)
2672   1451             
2673   1451             .continue                               ;                       ' 168
2674   1451             
2675   1451             ;    LD  A, (VCOUNTER)
2676   1451             ;    LD  (DEBUG_A), A
2677   1451             
2678   1451                         wait76                      ; sync                  ' 76    |
2678   1451 3E 04       >            LD      A, w            ; 7-2
2678   1453 3D          >            DEC     A               ; 4
2678   1454 20 FD       >            JR      NZ, .loop       ; 12
2678   1456 C3 59 14    >            JP      .loop
2679   1459 C3 AF 02                JP      main_loop           ; process next frame    ' 10    | 86 (254)
2680   145C             
2681   145C             
2682   145C             
2683   145C             ; ##############################  functions  ################################
2684   145C             
2685   145C                         INCLUDE "z80_fct.i80"   ; basic functions
0001+  145C             ; ########################### function #############################
0002+  145C             
0003+  145C             ; initDAC
0004+  145C             ; -----------
0005+  145C             ; HL <-  YMPORT0
0006+  145C             ; DE <-  $2A80
0007+  145C             ;
0008+  145C             ; prepare DAC for output
0009+  145C             
0010+  145C             initDAC
0011+  145C 11 80 2B                LD      DE, $2B80
0012+  145F CD 69 14                CALL    writeYM0        ; enable DAC
0013+  1462 11 80 2A                LD      DE, $2A80
0014+  1465 CD 69 14                CALL    writeYM0        ; DAC data to silent
0015+  1468 C9                      RET
0016+  1469             
0017+  1469             ; writeYM0 / writeYM1
0018+  1469             ; -------------------
0019+  1469             ; D   -> address
0020+  1469             ; E   -> value
0021+  1469             ; HL <-  YMPORT0 / YMPORT2
0022+  1469             ;
0023+  1469             ; write to YM2612
0024+  1469             
0025+  1469             writeYM0
0026+  1469 21 00 40                LD      HL, YMPORT0     ; HL = YM port 0            ' 10    | (10)
0027+  146C             
0028+  146C             .wait0
0029+  146C CB 7E                   BIT     7, (HL)         ; test YM not busy          ' 12    |
0030+  146E 20 FC                   JR      NZ, .wait0      ;                           ' 7     | 19 (29)
0031+  1470             
0032+  1470 72                      LD      (HL), D         ; write address             ' 7     | (36)
0033+  1471             
0034+  1471             .wait1
0035+  1471 CB 7E                   BIT     7, (HL)         ; test YM not busy          ' 12    |
0036+  1473 20 FC                   JR      NZ, .wait1      ;                           ' 7     | 19 (55)
0037+  1475             
0038+  1475 2C                      INC     L               ; next port                 ' 4     | 11 (66)
0039+  1476 73                      LD      (HL), E         ; write value               ' 7     |
0040+  1477             
0041+  1477 C9                      RET                     ; end                       ' 10    | (76)
0042+  1478             
0043+  1478             
0044+  1478             writeYM1
0045+  1478 21 00 40                LD      HL, YMPORT0     ; HL = YM port 0            ' 10    | (10)
0046+  147B             
0047+  147B             .wait0
0048+  147B CB 7E                   BIT     7, (HL)         ; test YM not busy          ' 12    |
0049+  147D 20 FC                   JR      NZ, .wait0      ;                           ' 7     | 19 (29)
0050+  147F             
0051+  147F 2C                      INC     L               ;                           ' 4     |
0052+  1480 2C                      INC     L               ; HL = YM port 2            ' 4     |
0053+  1481 72                      LD      (HL), D         ; write address             ' 7     | 23 (52)
0054+  1482 2D                      DEC     L               ;                           ' 4     |
0055+  1483 2D                      DEC     L               ; HL = YM port 0            ' 4     |
0056+  1484             
0057+  1484             .wait1
0058+  1484 CB 7E                   BIT     7, (HL)         ; test YM not busy          ' 12    |
0059+  1486 20 FC                   JR      NZ, .wait1      ;                           ' 7     | 19 (71)
0060+  1488             
0061+  1488 2C                      INC     L               ;                           ' 4     |
0062+  1489 2C                      INC     L               ;                           ' 4     |
0063+  148A 2C                      INC     L               ; HL = YM port 3            ' 4     | 19 (90)
0064+  148B 73                      LD      (HL), E         ; write value               ' 7     |
0065+  148C             
0066+  148C C9                      RET                     ; end                       ' 10    | (100)
2686   148D             
2687   148D             
2688   148D             ; loadState
2689   148D             ; ---------
2690   148D             ;     ?       ->  HL  -> ?
2691   148D             ;     ?       ->  BC  -> ?
2692   148D             ; reg source  ->  DE  -> ?
2693   148D             ;
2694   148D             ; load the YM and PSG state
2695   148D             ; = 8 samples + 140 cycles
2696   148D             
2697   148D             loadState
2698   148D             
2699   148D                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2699   148D D9          >            EXX                     ;                           ' 4     | 4
2699   148E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2699   148F 03          >            INC     BC              ; increment read address    ' 6     |
2699   1490 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2699   1492 12          >            LD      (DE), A         ; play sample               ' 7     |
2699   1493 D9          >            EXX                     ;                           ' 4     | (36)
2700   1494             
2701   1494 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0      ' 10    |
2702   1497 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1      ' 10    | 20 (56)
2703   149A             
2704   149A CD BC 14                CALL    loadYMState         ; load YM state             ' 188+  | (244)
2705   149D             
2706   149D 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2      ' 10    |
2707   14A0 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3      ' 10    | 20 (254+10)
2708   14A3             
2709   14A3                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2709   14A3 D9          >            EXX                     ;                           ' 4     | 4
2709   14A4 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
2709   14A6 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2709   14A7 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2709   14A8 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2709   14AA 12          >            LD      (DE), A         ; play sample               ' 7     |
2709   14AB D9          >            EXX                     ;                           ' 4     | (46)
2710   14AC             
2711   14AC CD BC 14                CALL    loadYMState         ; load YM state             ' 188+  | (244)
2712   14AF             
2713   14AF 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG           ' 10    | (254)
2714   14B2             
2715   14B2                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2715   14B2 D9          >            EXX                     ;                           ' 4     | 4
2715   14B3 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2715   14B4 03          >            INC     BC              ; increment read address    ' 6     |
2715   14B5 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2715   14B7 12          >            LD      (DE), A         ; play sample               ' 7     |
2715   14B8 D9          >            EXX                     ;                           ' 4     | (36)
2716   14B9             
2717   14B9 C3 81 15                JP      loadPSGState        ; load PSG state            ' 10+94 | (140)
2718   14BC             
2719   14BC             
2720   14BC             ; loadYMState
2721   14BC             ; -----------
2722   14BC             ; YMPORT0/2   ->  HL
2723   14BC             ; YMPORT1/3   ->  BC
2724   14BC             ; reg source  ->  DE  -> ?
2725   14BC             ;
2726   14BC             ; load the YM RR state
2727   14BC             ; = 4 samples (244 cycles)
2728   14BC             
2729   14BC             loadYMState                             ;                           ' 56
2730   14BC             
2731   14BC                         waitYMReady                 ; wait YM to be ready       ' 30    |
2731   14BC D9          >            EXX                     ;                           ' 4     | (4)
2731   14BD CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2731   14BF C2 BD 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2731   14C2 D9          >            EXX                     ;                           ' 4     | (30)
2732   14C3 36 80                   LD      (HL), $80           ; set reg num to YM         ' 10    |
2733   14C5 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2734   14C6 1C                      INC     E                   ; next                      ' 4     | 62 (118)
2735   14C7                         wait4                       ; wait YM to be ready       ' 4     |
2735   14C7 00          >            NOP
2736   14C8 02                      LD      (BC), A             ; restore state             ' 7     |
2737   14C9             
2738   14C9                         waitYMReady                 ; wait YM to be ready       ' 30    |
2738   14C9 D9          >            EXX                     ;                           ' 4     | (4)
2738   14CA CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2738   14CC C2 CA 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2738   14CF D9          >            EXX                     ;                           ' 4     | (30)
2739   14D0 36 81                   LD      (HL), $81           ; set reg num to YM         ' 10    |
2740   14D2 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (180)
2741   14D3 1C                      INC     E                   ; next                      ' 4     |
2742   14D4                         wait4                       ; wait YM to be ready       ' 4     |
2742   14D4 00          >            NOP
2743   14D5 02                      LD      (BC), A             ; restore state             ' 7     |
2744   14D6             
2745   14D6                         waitYMReady                 ; wait YM to be ready       ' 30    |
2745   14D6 D9          >            EXX                     ;                           ' 4     | (4)
2745   14D7 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2745   14D9 C2 D7 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2745   14DC D9          >            EXX                     ;                           ' 4     | (30)
2746   14DD 36 82                   LD      (HL), $82           ; set reg num to YM         ' 10    |
2747   14DF 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (242)
2748   14E0 1C                      INC     E                   ; next                      ' 4     |
2749   14E1                         wait4                       ; wait YM to be ready       ' 4     |
2749   14E1 00          >            NOP
2750   14E2 02                      LD      (BC), A             ; restore state             ' 7     |
2751   14E3             
2752   14E3 D9                      EXX                         ;                           ' 4     | (246)
2753   14E4             
2754   14E4             .wait1
2755   14E4 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2756   14E6 C2 E4 14                JP      NZ, .wait1          ; wait while busy           ' 10    | 22 (254+14)
2757   14E9             
2758   14E9 36 2A                   LD      (HL), $2A           ;                           ' 10    |
2759   14EB 0A                      LD      A, (BC)             ;                           ' 7     |
2760   14EC 03                      INC     BC                  ; *** sample output ****    ' 6     | 38 (52)
2761   14ED CB 90                   RES     2, B                ;                           ' 8     |
2762   14EF 12                      LD      (DE), A             ;                           ' 7     |
2763   14F0             
2764   14F0             .wait2
2765   14F0 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2766   14F2 C2 F0 14                JP      NZ, .wait2          ; wait while busy           ' 10    | 22 (74)
2767   14F5             
2768   14F5 D9                      EXX                         ;                           ' 4     | (78)
2769   14F6             
2770   14F6 36 84                   LD      (HL), $84           ; set reg num to YM         ' 10    |
2771   14F8 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2772   14F9 1C                      INC     E                   ; next                      ' 4     | 32 (110)
2773   14FA                         wait4                       ; wait YM to be ready       ' 4     |
2773   14FA 00          >            NOP
2774   14FB 02                      LD      (BC), A             ; restore state             ' 7     |
2775   14FC             
2776   14FC                         waitYMReady                 ; wait YM to be ready       ' 30    |
2776   14FC D9          >            EXX                     ;                           ' 4     | (4)
2776   14FD CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2776   14FF C2 FD 14    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2776   1502 D9          >            EXX                     ;                           ' 4     | (30)
2777   1503 36 85                   LD      (HL), $85           ; set reg num to YM         ' 10    |
2778   1505 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2779   1506 1C                      INC     E                   ; next                      ' 4     |
2780   1507                         wait4                       ; wait YM to be ready       ' 4     |
2780   1507 00          >            NOP
2781   1508 02                      LD      (BC), A             ; restore state             ' 7     |
2782   1509             
2783   1509                         waitYMReady                 ; wait YM to be ready       ' 30    |
2783   1509 D9          >            EXX                     ;                           ' 4     | (4)
2783   150A CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2783   150C C2 0A 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2783   150F D9          >            EXX                     ;                           ' 4     | (30)
2784   1510 36 86                   LD      (HL), $86           ; set reg num to YM         ' 10    |
2785   1512 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2786   1513 1C                      INC     E                   ; next                      ' 4     |
2787   1514                         wait4                       ; wait YM to be ready       ' 4     |
2787   1514 00          >            NOP
2788   1515 02                      LD      (BC), A             ; restore state             ' 7     |
2789   1516             
2790   1516 D9                      EXX                         ;                           ' 4     | (238)
2791   1517             
2792   1517             .wait3
2793   1517 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2794   1519 C2 17 15                JP      NZ, .wait3          ; wait while busy           ' 10    | 22 (254+6)
2795   151C             
2796   151C 36 2A                   LD      (HL), $2A           ;                           ' 10    |
2797   151E 0A                      LD      A, (BC)             ;                           ' 7     |
2798   151F 03                      INC     BC                  ; *** sample output ****    ' 6     | 38 (44)
2799   1520 CB 90                   RES     2, B                ;                           ' 8     |
2800   1522 12                      LD      (DE), A             ;                           ' 7     |
2801   1523             
2802   1523             .wait4
2803   1523 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2804   1525 C2 23 15                JP      NZ, .wait4          ; wait while busy           ' 10    | 22 (66)
2805   1528             
2806   1528 D9                      EXX                         ;                           ' 4     | (78)
2807   1529                         wait8                       ; sync                      ' 8     |
2807   1529 00          >            NOP
2807   152A 00          >            NOP
2808   152B             
2809   152B 36 88                   LD      (HL), $88           ; set reg num to YM         ' 10    |
2810   152D 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2811   152E 1C                      INC     E                   ; next                      ' 4     | 32 (110)
2812   152F                         wait4                       ; wait YM to be ready       ' 4     |
2812   152F 00          >            NOP
2813   1530 02                      LD      (BC), A             ; restore state             ' 7     |
2814   1531             
2815   1531                         waitYMReady                 ; wait YM to be ready       ' 30    |
2815   1531 D9          >            EXX                     ;                           ' 4     | (4)
2815   1532 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2815   1534 C2 32 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2815   1537 D9          >            EXX                     ;                           ' 4     | (30)
2816   1538 36 89                   LD      (HL), $89           ; set reg num to YM         ' 10    |
2817   153A 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2818   153B 1C                      INC     E                   ; next                      ' 4     |
2819   153C                         wait4                       ; wait YM to be ready       ' 4     |
2819   153C 00          >            NOP
2820   153D 02                      LD      (BC), A             ; restore state             ' 7     |
2821   153E             
2822   153E                         waitYMReady                 ; wait YM to be ready       ' 30    |
2822   153E D9          >            EXX                     ;                           ' 4     | (4)
2822   153F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2822   1541 C2 3F 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2822   1544 D9          >            EXX                     ;                           ' 4     | (30)
2823   1545 36 8A                   LD      (HL), $8A           ; set reg num to YM         ' 10    |
2824   1547 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2825   1548 1C                      INC     E                   ; next                      ' 4     |
2826   1549                         wait4                       ; wait YM to be ready       ' 4     |
2826   1549 00          >            NOP
2827   154A 02                      LD      (BC), A             ; restore state             ' 7     |
2828   154B             
2829   154B D9                      EXX                         ;                           ' 4     | (238)
2830   154C             
2831   154C             .wait5
2832   154C CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2833   154E C2 4C 15                JP      NZ, .wait5          ; wait while busy           ' 10    | 22 (254+6)
2834   1551             
2835   1551 36 2A                   LD      (HL), $2A           ;                           ' 10    |
2836   1553 0A                      LD      A, (BC)             ;                           ' 7     |
2837   1554 03                      INC     BC                  ; *** sample output ****    ' 6     | 38 (44)
2838   1555 CB 90                   RES     2, B                ;                           ' 8     |
2839   1557 12                      LD      (DE), A             ;                           ' 7     |
2840   1558             
2841   1558             .wait6
2842   1558 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2843   155A C2 58 15                JP      NZ, .wait6          ; wait while busy           ' 10    | 22 (66)
2844   155D             
2845   155D D9                      EXX                         ;                           ' 4     | (78)
2846   155E                         wait8                       ; sync                      ' 8     |
2846   155E 00          >            NOP
2846   155F 00          >            NOP
2847   1560             
2848   1560 36 8C                   LD      (HL), $8C           ; set reg num to YM         ' 10    |
2849   1562 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2850   1563 1C                      INC     E                   ; next                      ' 4     | 32 (110)
2851   1564                         wait4                       ; wait YM to be ready       ' 4     |
2851   1564 00          >            NOP
2852   1565 02                      LD      (BC), A             ; restore state             ' 7     |
2853   1566             
2854   1566                         waitYMReady                 ; wait YM to be ready       ' 30    |
2854   1566 D9          >            EXX                     ;                           ' 4     | (4)
2854   1567 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2854   1569 C2 67 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2854   156C D9          >            EXX                     ;                           ' 4     | (30)
2855   156D 36 8D                   LD      (HL), $8D           ; set reg num to YM         ' 10    |
2856   156F 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2857   1570 1C                      INC     E                   ; next                      ' 4     |
2858   1571                         wait4                       ; wait YM to be ready       ' 4     |
2858   1571 00          >            NOP
2859   1572 02                      LD      (BC), A             ; restore state             ' 7     |
2860   1573             
2861   1573                         waitYMReady                 ; wait YM to be ready       ' 30    |
2861   1573 D9          >            EXX                     ;                           ' 4     | (4)
2861   1574 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2861   1576 C2 74 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2861   1579 D9          >            EXX                     ;                           ' 4     | (30)
2862   157A 36 8E                   LD      (HL), $8E           ; set reg num to YM         ' 10    |
2863   157C 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2864   157D 1C                      INC     E                   ; next                      ' 4     |
2865   157E                         wait4                       ; wait YM to be ready       ' 4     |
2865   157E 00          >            NOP
2866   157F 02                      LD      (BC), A             ; restore state             ' 7     |
2867   1580             
2868   1580 C9                      RET                         ; done                      ' 10    | (244)
2869   1581             
2870   1581             
2871   1581             ; loadPSGState
2872   1581             ; ------------
2873   1581             ; PSGPORT     ->  HL
2874   1581             ; reg source  ->  DE  -> ?
2875   1581             ;
2876   1581             ; load the PSG env state
2877   1581             ; 94 cycles
2878   1581             
2879   1581             loadPSGState
2880   1581             
2881   1581 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2882   1582 1C                      INC     E                   ; next                      ' 4     | (21)
2883   1583 77                      LD      (HL), A             ; PSG restore channel 0 env ' 10    |
2884   1584             
2885   1584 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2886   1585 1C                      INC     E                   ; next                      ' 4     | 21 (42)
2887   1586 77                      LD      (HL), A             ; PSG restore channel 1 env ' 10    |
2888   1587             
2889   1587 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2890   1588 1C                      INC     E                   ; next                      ' 4     | 21 (63)
2891   1589 77                      LD      (HL), A             ; PSG restore channel 2 env ' 10    |
2892   158A             
2893   158A 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2894   158B 1C                      INC     E                   ; next                      ' 4     | 21 (84)
2895   158C 77                      LD      (HL), A             ; PSG restore channel 3 env ' 10    |
2896   158D             
2897   158D C9                      RET                         ; done                      ' 10    | (94)
2898   158E             
2899   158E             
2900   158E             ; ##############################  jump table  ################################
2901   158E             
2902   158E 00                      BLOCK   $1600-$
2903   1600             
2904   1600 27 0A                   DW      com_next_frame                                                                  ; 00
2905   1602             
2906   1602                         DW      com_null, com_null, com_null                                                    ; 01-03
2906   1602 941194119411
2907   1608                         DW      com_null, com_null, com_null, com_null                                          ; 04-07
2907   1608 9411941194119411
2908   1610                         DW      com_null, com_null, com_null, com_null                                          ; 08-0B
2908   1610 9411941194119411
2909   1618                         DW      com_null, com_null, com_null, com_null                                          ; 0C-0F
2909   1618 9411941194119411
2910   1620             
2911   1620                         DW      com_psg_tone_w0, com_psg_tone_w1, com_psg_tone_w2, com_psg_tone_w3              ; 10-13
2911   1620 2A0A370A450A520A
2912   1628                         DW      com_psg_tone_w4, com_psg_tone_w5, com_psg_tone_w6, com_psg_tone_w7              ; 14-17
2912   1628 620A6E0A7C0A860A
2913   1630                         DW      com_psg_env_w0, com_psg_env_w1, com_psg_env_w2, com_psg_env_w3                  ; 18-1B
2913   1630 A70ABA0AC60ADF0A
2914   1638                         DW      com_null, com_null, com_null, com_null                                          ; 1C-1F
2914   1638 9411941194119411
2915   1640             
2916   1640                         DW      com_ym_port0_w0, com_ym_port0_w1, com_ym_port0_w2, com_ym_port0_w3              ; 20-23
2916   1640 2B0B3C0B450B570B
2917   1648                         DW      com_ym_port0_w4, com_ym_port0_w5, com_ym_port0_w6, com_ym_port0_w7              ; 24-27
2917   1648 600B730B850B8E0B
2918   1650                         DW      com_ym_port0_w8, com_ym_port0_w9, com_ym_port0_wA, com_ym_port0_wB              ; 28-2B
2918   1650 A10BB30BBC0BCF0B
2919   1658                         DW      com_ym_port0_wC, com_ym_port0_wD, com_ym_port0_wE, com_ym_port0_wF              ; 2C-2F
2919   1658 E10BEA0BFC0B0D0C
2920   1660             
2921   1660                         DW      com_ym_port2_w0, com_ym_port2_w1, com_ym_port2_w2, com_ym_port2_w3              ; 30-33
2921   1660 160C270C300C420C
2922   1668                         DW      com_ym_port2_w4, com_ym_port2_w5, com_ym_port2_w6, com_ym_port2_w7              ; 34-37
2922   1668 4B0C5E0C700C790C
2923   1670                         DW      com_ym_port2_w8, com_ym_port2_w9, com_ym_port2_wA, com_ym_port2_wB              ; 38-3B
2923   1670 8C0C9E0CA70CBA0C
2924   1678                         DW      com_ym_port2_wC, com_ym_port2_wD, com_ym_port2_wE, com_ym_port2_wF              ; 3C-3F
2924   1678 CC0CD50CE70CF80C
2925   1680             
2926   1680                         DW      com_ym_key_w0, com_ym_key_w1, com_ym_key_w2, com_ym_key_w3                      ; 40-43
2926   1680 4B0E5E0E6A0E7B0E
2927   1688                         DW      com_ym_key_w4, com_ym_key_w5, com_null, com_null                                ; 44-47
2927   1688 8F0E9E0E94119411
2928   1690                         DW      com_null, com_null, com_null, com_null                                          ; 48-4B
2928   1690 9411941194119411
2929   1698                         DW      com_null, com_null, com_null, com_null                                          ; 4C-4F
2929   1698 9411941194119411
2930   16A0             
2931   16A0                         DW      com_pcm_p0_ch0, com_pcm_p0_ch1, com_pcm_p0_ch2, com_pcm_p0_ch3                  ; 50-53
2931   16A0 320F460F5A0F6E0F
2932   16A8                         DW      com_pcm_p1_ch0, com_pcm_p1_ch1, com_pcm_p1_ch2, com_pcm_p1_ch3                  ; 54-57
2932   16A8 370F4B0F5F0F730F
2933   16B0                         DW      com_pcm_p2_ch0, com_pcm_p2_ch1, com_pcm_p2_ch2, com_pcm_p2_ch3                  ; 58-5B
2933   16B0 3C0F500F640F780F
2934   16B8                         DW      com_pcm_p3_ch0, com_pcm_p3_ch1, com_pcm_p3_ch2, com_pcm_p3_ch3                  ; 5C-5F
2934   16B8 410F550F690F7D0F
2935   16C0             
2936   16C0                         DW      com_state_w0, com_state_w1, com_state_w2, com_state_w3                          ; 60-63
2936   16C0 3E10481056106510
2937   16C8                         DW      com_state_w4, com_state_w5, com_state_w6, com_state_w7                          ; 64-67
2937   16C8 6E1087109410A110
2938   16D0                         DW      com_state_w8, com_state_w9, com_state_wA, com_state_wB                          ; 68-6B
2938   16D0 AD10B910C410DF10
2939   16D8                         DW      com_state_wC, com_state_wD, com_state_wE, com_state_wF                          ; 6C-6F
2939   16D8 EC10F91005111111
2940   16E0             
2941   16E0                         DW      com_null, com_null, com_null, com_null                                          ; 70-74
2941   16E0 9411941194119411
2942   16E8                         DW      com_null, com_null, com_null, com_null                                          ; 74-77
2942   16E8 9411941194119411
2943   16F0                         DW      com_null, com_null, com_null, com_null                                          ; 78-7B
2943   16F0 9411941194119411
2944   16F8 94 11                   DW      com_null                                                                        ; 7C
2945   16FA             
2946   16FA A0 11                   DW      com_extra_frm                                                                   ; 7D
2947   16FC BC 11                   DW      com_loop                                                                        ; 7E
2948   16FE DD 11                   DW      com_end                                                                         ; 7F
2949   1700             
2950   1700             
2951   1700                         END
